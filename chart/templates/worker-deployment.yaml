{{- $root := . -}}
{{- if .Values.worker.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Values.appName }}-sidekiq
  name: {{ .Values.appName }}-sidekiq
  namespace: {{ .Release.Namespace }}
spec:
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: {{ .Values.appName }}-sidekiq
  strategy:
    type: {{ .Values.worker.strategyType }}
    rollingUpdate:
      maxSurge: {{ .Values.worker.maxSurge }}
      maxUnavailable: {{ .Values.worker.maxUnavailable }}
  template:
    metadata:
      labels:
        app: {{ .Values.appName }}-sidekiq
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: {{ .Values.affinityWeight }}
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: {{ .Values.matchExpressions.key }}
                      operator: {{ .Values.matchExpressions.operator }}
                      values:
                        - {{ .Values.appName }}-sidekiq
                topologyKey: {{ .Values.topologyKey }}
      securityContext:
        fsGroup: {{ $root.Values.fsGroup }}
      volumes:
{{ toYaml .Values.common.volumes | indent 8 }}
      {{- if .Values.mockData.enabled }}
      initContainers:
{{ toYaml .Values.common.initContainers | indent 8 }}
      {{- end }}
      containers:
        - image: "{{ .Values.image.value }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          name: {{ .Values.appName }}-sidekiq
          securityContext:
            runAsUser: 0
          ## TODO: Be sure that this is the correct way to start sidekiq
          command:
{{ toYaml .Values.worker.containers.command | indent 12 }}
          args:
{{ toYaml .Values.worker.containers.args | indent 12 }}
          # source and destination files
          livenessProbe: #ensure app is serving requests properly and know when to restart a container
            httpGet:
              path: {{ .Values.worker.healthCheck.requestPath }}
              port: {{ .Values.worker.healthCheck.port }}
            initialDelaySeconds: {{ .Values.worker.healthCheck.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.worker.healthCheck.timeoutSeconds }}
            failureThreshold:  {{ .Values.worker.healthCheck.liveness.failureThreshold }}
          readinessProbe: #ensure container is ready to start accepting traffic
            httpGet:
              path: {{ .Values.worker.healthCheck.readinessPath }}
              port: {{ .Values.worker.healthCheck.readinessPort }}
            initialDelaySeconds: {{ .Values.worker.healthCheck.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.worker.healthCheck.timeoutSeconds }}
            failureThreshold: {{ .Values.worker.healthCheck.readiness.failureThreshold }}
          lifecycle:
            preStop:
              exec:
                # SIGTERM triggers a quick exit; gracefully terminate instead
                command: {{ .Values.worker.healthCheck.command }}
          resources:
{{ toYaml .Values.worker.resources | indent 12 }}
          volumeMounts:
{{ toYaml .Values.common.volumeMounts | indent 12 }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: GIT_REVISION
              value: {{ .Values.image.tag}}
{{ toYaml .Values.worker.envSecrets | indent 12 }}
          {{- range $keys, $key := .Values.common.secrets }}
          {{- range $secrets, $secret := $key }}
            - name: {{ $secret.env_var }}
              valueFrom:
                secretKeyRef:
                  name: {{ $keys }}
                  key: {{ $secret.name }}
          {{- end }}
          {{- end }}
        {{- if $root.Values.clamav.enabled  }}
        - name: clamav
          image: "{{ $root.Values.clamav.image.value }}:{{ $root.Values.clamav.image.tag }}"
          imagePullPolicy: {{ $root.Values.image.pullPolicy }}
          ports:
{{ toYaml $root.Values.clamav.ports | indent 12 }}
{{ toYaml $root.Values.clamav.probes | indent 10 }}
          resources:
{{ toYaml $root.Values.clamav.resources | indent 12 }}
          volumeMounts:
{{ toYaml $root.Values.clamav.volumeMounts | indent 12 }}
        {{- end }}
        {{- if $root.Values.worker.socatProxyEnabled }}
{{ toYaml $root.Values.common.socatProxy | indent 8 }}
        {{- end }}
      terminationGracePeriodSeconds: {{ .Values.worker.terminationGracePeriodSeconds }} # put your longest Job time here plus security time.
      serviceAccountName: {{ .Values.serviceAccount.name }}
{{- end }}
