def notify(message, color='good') {
    if (notify_slack.toBoolean()) {
        slackSend message: message,
                  color: color,
                  failOnError: true
    }
}

pipeline {
  agent {
    label 'app-deploys'
  }
  stages {
    stage('Notify Slack') {
      steps {
        notify """Deploying `${application}` to `${environment}`.
                 |${currentBuild.rawBuild.getCauses()[0].getShortDescription()}
                 |${currentBuild.getAbsoluteUrl()}""".stripMargin()
      }
    }

    stage('Checkout Code') {
      steps {
        checkout poll: false,
                 changelog: false,
                 scm: [$class: 'GitSCM', branches: [[name: '*/master']],
                 extensions: [[$class: 'SubmoduleOption', recursiveSubmodules: true]],
                 userRemoteConfigs: [[url: 'git@github.com:department-of-veterans-affairs/devops.git']]]
      }
    }

    stage('Create virtualenv') {
      steps {
        dir('ansible') {
          sh 'virtualenv venv'
          sh 'venv/bin/pip install -r requirements.txt'
        }
      }
    }

    // Delay is introduced to de-synchronize the vets-api
    // and vets-api-worker deployments that are triggered simultaneously
    // on a merge to this repository. The simultaneous deployments
    // were leading to a race condition during the db migration step.
    stage('De-synchronize') {
      when {
        expression { return application == 'vets-api-worker' }
      }

      steps {
        sleep time: 1, unit: 'MINUTES'
      }
    }

    stage('Run Ansible deploy') {
      steps {
        dir('ansible') {
          sh  "bash -c 'source venv/bin/activate && ansible-playbook " +
              "-e env=${environment} " +
              "-e app_name=${application} " +
              "-e force_ami=${force_ami} " +
              "-e git_version=${branch.split('/')[-1]} " +
              "-i inventory " +
              "aws-deploy-app.yml'"
        }
      }
    }
  }

  post {
    success {
      notify """Successfully deployed `${application}` to `${environment}`.
               |Took ${currentBuild.rawBuild.getDurationString()}""".stripMargin()
    }
    failure {
      notify """Failed to deploy `${application}` to `${environment}`!
               |${currentBuild.getAbsoluteUrl()}console""".stripMargin(), 'danger'
    }
  }
}
