{{- $root := . -}}
{{- range $name, $service := $root.Values.web.webServices }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ $name }}
  name: {{ $name }}
  namespace: {{ $root.Release.Namespace }}
spec:
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: {{ $name }}
  strategy:
    type: {{ $root.Values.web.strategyType }}
    rollingUpdate:
      maxSurge: {{ $root.Values.web.maxSurge }}
      maxUnavailable: {{ $root.Values.web.maxUnavailable }}
  template:
    metadata:
      labels:
        app: {{ $name }}
      annotations:
{{ toYaml $root.Values.annotations | indent 8 }}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: {{ $root.Values.affinityWeight }}
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: {{ $root.Values.matchExpressions.key }}
                      operator: {{ $root.Values.matchExpressions.operator }}
                      values:
                        - {{ $name }}
                topologyKey: {{ $root.Values.topologyKey }}
      securityContext:
        fsGroup: {{ $root.Values.fsGroup }}
      volumes:
        - name: vets-api-mockdata
          emptyDir: {}
        - name: clamav-volume
          emptyDir: {}
        - name: ddsocket
          hostPath:
            path: /var/run/datadog
{{ toYaml $root.Values.common.volumes | indent 8 }}
      {{- if $root.Values.mockData.enabled }}
      initContainers:
        - name: vets-api-mockdata
          image: "{{ $root.Values.git_container_repo }}:{{ $root.Values.git_container_version }}"
          args:
            - clone
            - --single-branch
            - --
            - https://$(GITHUB_TOKEN)@github.com/department-of-veterans-affairs/vets-api-mockdata.git
            - /data
          env:
            - name: GITHUB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: github-token
                  key: github-token
          volumeMounts:
            - name: vets-api-mockdata
              mountPath: /data
{{ toYaml $root.Values.common.initContainers | indent 8 }}
      {{- end }}
      containers:
        - image: "{{ $root.Values.image.value }}:{{ $root.Values.image.tag }}"
          imagePullPolicy: {{ $root.Values.image.pullPolicy }}
          name: {{ $root.Values.appName }}-web
          ports:
            {{- range $key := $root.Values.web.containers.ports }}
            - containerPort: {{ $key.containerPort }}
              name: {{ $key.name }}
            {{- end }}
          {{- if $root.Values.web.livenessProbe.enabled  }}
          livenessProbe: #ensure app is serving requests properly and know when to restart a container
            httpGet:
              path: {{ $root.Values.web.livenessProbe.requestPath }}
              port: {{ $root.Values.web.livenessProbe.port }}
            initialDelaySeconds: {{ $root.Values.web.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ $root.Values.web.livenessProbe.periodSeconds }}
            successThreshold: {{ $root.Values.web.livenessProbe.successThreshold }}
            failureThreshold: {{ $root.Values.web.livenessProbe.failureThreshold }}
          {{- end }}
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - sleep {{ $root.Values.web.terminationGracePeriodSeconds }}
          {{- if $root.Values.web.startupProbe.enabled  }}
          startupProbe:
            httpGet:
              path: {{ $root.Values.web.startupProbe.requestPath }}
              port: {{ $root.Values.web.startupProbe.port }}
              httpHeaders:
                - name: Host
                  value: {{ $service.healthCheck.host | default $root.Values.web.healthCheck.host }}
            initialDelaySeconds: {{ $root.Values.web.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ $root.Values.web.startupProbe.periodSeconds }}
            failureThreshold: {{ $root.Values.web.startupProbe.failureThreshold }}
            successThreshold: {{ $root.Values.web.startupProbe.successThreshold }}
          {{- end }}
          readinessProbe: # ensure container is ready to accept traffic
            exec:
              command: {{ $root.Values.web.readinessProbe.command }}
            initialDelaySeconds: {{ $root.Values.web.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ $root.Values.web.readinessProbe.periodSeconds }}
            successThreshold: {{ $root.Values.web.readinessProbe.successThreshold }}
            failureThreshold: {{ $root.Values.web.readinessProbe.failureThreshold }}
          resources:
{{- if $service.resources }}
{{ toYaml $service.resources | indent 12 }}
{{- else }}
{{ toYaml $root.Values.web.resources | indent 12 }}
{{- end }}
          volumeMounts:
            - name: clamav-volume
              mountPath: /app/clamav_tmp
            - name: vets-api-mockdata
              mountPath: /app/config/vets-api-mockdata
            - name: ddsocket
              mountPath: /var/run/datadog
{{ toYaml $root.Values.common.volumeMounts | indent 12 }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KUBE_DEPLOYMENT
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app']
            - name: GIT_REVISION
              value: {{ $root.Values.image.tag}}
{{ toYaml $root.Values.web.envSecrets | indent 12 }}
          {{- range $keys, $key := $root.Values.common.secrets }}
          {{- range $secrets, $secret := $key }}
            - name: {{ $secret.env_var }}
              valueFrom:
                secretKeyRef:
                  name: {{ $keys }}
                  key: {{ $secret.name }}
          {{- end }}
          {{- end }}
          {{- range $varName := $root.Values.parameters }}
            - name: {{ $varName }}
              valueFrom:
                secretKeyRef:
                  name: common-environment-vars
                  key: {{ $varName }}
          {{- end }}
        {{- if $root.Values.clamav.enabled  }}
        - name: clamav
          image: "{{ $root.Values.clamav.image.value }}:{{ $root.Values.clamav.image.tag }}"
          imagePullPolicy: {{ $root.Values.clamav.image.pullPolicy }}
          ports:
            - containerPort: 3310
              name: clamavport
              protocol: TCP
          readinessProbe:
            tcpSocket:
              port: clamavport
            failureThreshold: {{ $root.Values.clamav.readinessProbe.failureThreshold }}
            initialDelaySeconds: 30
            periodSeconds: {{ $root.Values.clamav.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ $root.Values.clamav.readinessProbe.timeoutSeconds }}
            successThreshold: {{ $root.Values.clamav.readinessProbe.successThreshold }}
          startupProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - |
                  clamscan --version || echo "ClamAV failed to start"
                  echo -n "clamav.startup.success:1|c" | nc -u -w1 localhost 8125
            initialDelaySeconds: 30
            periodSeconds: 10
            failureThreshold: 10
            timeoutSeconds: 30
            successThreshold: 1
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - freshclam --config-file /etc/clamav/freshclam.conf
          resources:
            requests:
              cpu: "{{ $root.Values.clamav.requestedCPU }}"
              memory: "{{ $root.Values.clamav.requestedMemory }}"
          volumeMounts:
            - name: clamav-volume
              mountPath: /vets-api
        {{- end }}
        {{- if $root.Values.web.socatProxyEnabled }}
{{ toYaml $root.Values.common.socatProxy | indent 8 }}
        {{- end }}
      terminationGracePeriodSeconds: {{ $root.Values.web.terminationGracePeriodSeconds }}
      serviceAccountName: {{ $root.Values.serviceAccount.name }}
{{- end }}
