name: Check Backend Review Group Approval

on:
  pull_request:
    types: [opened, reopened, edited, synchronize, review_requested, submitted]

jobs:
  check-backend-review:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      contents: read
    steps:
      - name: Set up env vars
        id: vars
        run: |
          echo "REPO=${{ github.repository }}" >> $GITHUB_ENV
          echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV

      - name: Install GitHub CLI
        uses: cli/cli-action@v2

      - name: Get PR author
        id: author
        run: |
          PR_AUTHOR=$(gh pr view "$PR_NUMBER" --repo "$REPO" --json author -q '.author.login')
          echo "PR author is $PR_AUTHOR"
          echo "pr_author=$PR_AUTHOR" >> $GITHUB_OUTPUT

      - name: Check if 'backend-review-group' is a requested reviewer team
        id: check_team
        run: |
          TEAM_SLUG="backend-review-group"
          TEAM_REQUESTED=$(gh pr view "$PR_NUMBER" --repo "$REPO" --json reviewRequests -q '.reviewRequests.teams[].slug' | grep -Fx "$TEAM_SLUG" || true)

          if [[ -n "$TEAM_REQUESTED" ]]; then
            echo "Backend team is a requested reviewer"
            echo "team_requested=true" >> $GITHUB_OUTPUT
          else
            echo "Backend team is NOT a requested reviewer"
            echo "team_requested=false" >> $GITHUB_OUTPUT
          fi

      - name: Exit early if backend team is not requested
        if: steps.check_team.outputs.team_requested == 'false'
        run: echo "Skipping backend review check since team is not requested"

      - name: Get backend team members
        if: steps.check_team.outputs.team_requested == 'true'
        run: |
          gh api orgs/${{ github.repository_owner }}/teams/backend-review-group/members \
            --paginate --jq '.[].login' > members.txt

          echo "Team members:"
          cat members.txt

      - name: Check if any backend reviewer approved
        if: steps.check_team.outputs.team_requested == 'true'
        run: |
          gh pr view "$PR_NUMBER" --repo "$REPO" --json reviews -q '.reviews[] | select(.state=="APPROVED") | .author.login' > approvals.txt

          echo "Approved by:"
          cat approvals.txt

          PASSED=false
          while IFS= read -r member; do
            if grep -Fxq "$member" approvals.txt; then
              echo "✅ $member from backend-review-group has approved"
              PASSED=true
              break
            fi
          done < members.txt

          if [[ "$PASSED" == "true" ]]; then
            echo "Team approval satisfied"
          else
            echo "❌ No approvals from backend-review-group"
            exit 1
          fi

    name: Succeed if backend approval is confirmed
    needs: [get-pr-data, check-workflow-status]
    runs-on: ubuntu-latest
    permissions: write-all
    env:
      pr_draft: ${{ needs.get-pr-data.outputs.pr_draft }}
      pr_number: ${{ needs.get-pr-data.outputs.pr_number }}
      pr_branch: ${{ needs.get-pr-data.outputs.pr_branch }}
      require_be_approval: ${{ needs.get-pr-data.outputs.require_be_approval }}
      failures_detected: ${{ needs.check-workflow-status.outputs.failures_detected }}
    outputs:
      author_is_backend: ${{ steps.verify_approval.outputs.author_is_backend }}
      team_approval_status: ${{ steps.verify_approval.outputs.team_approval_status }}
      approval_status: ${{ steps.verify_approval.outputs.approval_status }}
    steps:
      - name: Checkout PR HEAD ref
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ vars.AWS_ASSUME_ROLE }}
          aws-region: "us-gov-west-1"

      - name: Get bot token from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Verify backend-review-group approval
        id: verify_approval
        run: |
          approval_status=required
          team_approval_status=required
          author_is_backend=false

          BACKEND_REVIEWERS=$(gh api /orgs/department-of-veterans-affairs/teams/backend-review-group/members --jq '.[].login')
          BACKEND_REVIEWERS=$(echo "$BACKEND_REVIEWERS" | tr '\n' '|' | sed 's/|$//')
          echo "Backend reviewers regex: $BACKEND_REVIEWERS"

          # Get PR author
          PR_AUTHOR=$(gh pr view ${{ env.pr_number }} --json author -q '.author.login')
          if echo "$PR_AUTHOR" | grep -qiE "^($BACKEND_REVIEWERS)$"; then
            echo "PR author '$PR_AUTHOR' is a backend-review-group member."
            echo "author_is_backend=true" >> "$GITHUB_OUTPUT"
          fi

          APPROVED=$(gh api /repos/${{ github.repository }}/pulls/${{ env.pr_number }}/reviews --jq '
            [ .[]
            | select(.state == "APPROVED" and (.dismissed_at == null))
            ]
            | sort_by(.submitted_at)
            | reverse
            | unique_by(.user.login)
            | .[].user.login
          ' || true)

          echo "$APPROVED"

          TEAM_APPROVALS=$(echo "$APPROVED" | grep -viE "^($BACKEND_REVIEWERS)$" || true)
          echo "Team Approvals: $TEAM_APPROVALS"
          if [ -z "$TEAM_APPROVALS" ]; then
            echo "TEAM APPROVAL REQUIRED"
            team_approval_status=required
          else
            echo "TEAM APPROVAL CONFIRMED"
            team_approval_status=confirmed
          fi

          BE_APPROVALS=$(echo "$APPROVED" | grep -iE "^($BACKEND_REVIEWERS)$" || true)
          echo "Backend Approvals: $BE_APPROVALS"
          if [ -z "$BE_APPROVALS" ]; then
            echo "BE APPROVAL REQUIRED"
            approval_status=required
          else
            echo "BE APPROVAL CONFIRMED"
            approval_status=confirmed
          fi

          echo "author_is_backend=$author_is_backend" >> "$GITHUB_OUTPUT"
          echo "team_approval_status=$team_approval_status" >> "$GITHUB_OUTPUT"
          echo "approval_status=$approval_status" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}

      - name: Remove ready-for-review label
        if: steps.verify_approval.outputs.team_approval_status == 'confirmed'
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          number: ${{ env.pr_number }}
          labels: ready-for-review

      - name: Exit for non backend approvals
        if: needs.get-pr-data.outputs.require_be_approval == 'false'
        run: exit 0

      - name: Fail if draft or failures
        if: needs.get-pr-data.outputs.pr_draft == 'true' || needs.check-workflow-status.outputs.failures_detected == 'true' || steps.verify_approval.outputs.approval_status == 'required'
        run: exit 1

      - name: Remove ready-for-backend-review label
        if: steps.verify_approval.outputs.approval_status == 'confirmed'
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          number: ${{ env.pr_number }}
          labels: ready-for-backend-review

      - name: Add ready-for-backend-review label
        if: |
          steps.verify_approval.outputs.approval_status == 'required' &&
          (
            steps.verify_approval.outputs.team_approval_status == 'confirmed' ||
            steps.verify_approval.author_is_backend == 'true'
          )
        uses: actions-ecosystem/action-add-labels@v1
        with:
          number: ${{ env.pr_number }}
          labels: ready-for-backend-review


      - name: Backend Approval Confirmed
        if: steps.verify_approval.outputs.approval_status == 'confirmed'
        run: exit 0
