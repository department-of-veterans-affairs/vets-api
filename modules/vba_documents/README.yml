openapi: '3.0.0'
info:
  version: 0.0.0
  title: Benefits
  description: |
    Veterans Benefits Administration (VBA) document uploads.
    
    ## Background
    
    This API is being provided as a proof of concept of a general-purpose VA 
    API gateway. The use case is to allow authorized third-party developers to 
    submit VBA documents and have a high degree of assurance that those documents 
    will be processed and stored in the appropriate VA data system.
    
    The Document Upload API passes data through to ICMHS aka “Central Mail API”.
    Central Mail API accepts a payload consisting of a document in PDF format, zero or more
    optional attachments in PDF format, and some JSON metadata. The metadata describes the
    document, attachments, and identifies the person that the document relates to. This payload is
    encoded as multipart/form-data. A unique identifier supplied with the payload can be used to
    subsequently request the processing status of the uploaded document package.
    
    ## Design
    
    ### Authorization
    
    API requests are authorized by means of a symmetric API token, provided in an HTTP header
    with name "apikey".

    ### Upload Operation
    
    Allows a client to upload a document package (form + attachments + metadata).

    1. Client Request: POST https://api.vets.gov/services/vba_documents/v0/
        * No request body or parameters required
    
    2. Service Response: A JSON API object with the following attributes:
        * `guid`: An identifier that can be used for subsequent status requests
        * `location`: A URL to which the actual document package payload can be submitted
          in the next step. The URL is specific to this upload request and should not be
          re-used for subsequent uploads. The URL is valid for 900 seconds (15 minutes)
          from the time of this response.
          
    3. Client Request: PUT to the location URL returned in Step 2.
        * Request body should be encoded as multipart/form-data, equivalent to that
          generated by an HTML form submission or using “curl -F…”. The format is
          described in more detail below.
        * No `apikey` authorization header is required for this request, as authorization is
          embedded in the signed location URL.
          
    4. Service Response: The HTTP status indicates whether the upload was successful.
      Additionally the response includes an ETag header containing an MD5 hash of the
      submitted payload. This can be compared to the submitted payload to ensure data
      integrity of the upload

      ## Reference

      Raw Open API Spec: http://dev-api.vets.gov/services/vba_documents/docs/v0/api

  termsOfService: ''
  contact:
    name: Vets.gov
tags:
  - name: document_uploads
    description: VA Benefits document upload functionality
servers: 
  - url: dev-api.vets.gov/services/vba_benefits/{version}
    description: Vets.gov API development environment
    variables:
      version:
        default: v0

paths:
  /uploads:
    post:
      tags:
        - document_uploads
      summary: Get a location for subsequent document upload PUT request
      operationId: postBenefitsDocumentUpload
      security:
        - api_key: []
      responses:
        '202':
          description: Accepted. Location generated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentUploadSubmission"
        '401':
          description: Unauthorized Request
        '403':
          description: Bad API Token      
          
  /location:
    put:
      tags:
        - document_uploads
      summary: Accepts document upload. 
      description: | 
        Accepts document metadata, document binary, and attachment binaries.Full URL, including 
        query parameters, provided from POST `/document_uploads`.
        
        ## Example Payload

        The following demonstrates a (redacted) multipart payload suitable for submitting to the PUT
        endpoint. Most programming languages should have provisions for assembling a multipart
        payload like this without having to do so manually.

        ```
        --17de1ed8f01442b2a2d7a93506314b76
        Content-Disposition: form-data; name="metadata"
        Content-Type: application/json
        {"veteranFirstName": "Jane",
        "veteranLastName": "Doe",
        "fileNumber": "012345678",
        "zipCode": "97202",
        "source": "MyVSO",
        "docType": "21-22"}
        --17de1ed8f01442b2a2d7a93506314b76
        Content-Disposition: form-data; name="content"
        Content-Type: application/pdf
        <Binary PDF contents>
        --17de1ed8f01442b2a2d7a93506314b76
        Content-Disposition: form-data; name="attachment1"
        Content-Type: application/pdf
        <Binary PDF attachment contents>
        --17de1ed8f01442b2a2d7a93506314b76--
        ```

        This PUT request would have an overall HTTP Content-Type header:

        ```
        Content-Type: multipart/form-data; boundary=17de1ed8f01442b2a2d7a93506314b76
        ```
        
        Note that the Content-Disposition parameter "name" in each part must be the expected values
        "metadata", "content", "attachment1"..."attachmentN"

      servers:
        - url: https://dev-api.vets.gov/services_user_content/vba_benefits/
          description: Override base path for all operations with the /files path
      parameters:
        - name: Content-MD5
          in: header
          description: Base64-encoded 128-bit MD5 digest of the message. Use for integrity control.
          required: false
          schema:
            type: string
            format: md5
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                metadata:
                  $ref: "#/components/schemas/DocumentUploadMetadata"
                document:
                  type: string
                  format: binary
                  description: Document contents. Must be provided in PDF format
                attachment1:
                  type: string
                  example: <<PDF BINARY>>
                  format: binary
                  description: Optional attachment contents. Must be provided in PDF format
                attachment2:
                  type: string
                  example: <<PDF BINARY>>
                  format: binary
                  description: Optional attachment contents. Must be provided in PDF format
      responses:
        '200':
          description: Document upload staged
        '400':
          description: Bad request
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/DocumentUploadFailure'
                
  '/uploads/{guid}':
    get:
      tags:
        - document_uploads
      summary: Get status for a previous benefits document upload
      operationId: getBenefitsDocumentUploadStatus
      parameters:
        - name: guid
          in: path
          description: UUID as specified in the metadata of a previous upload
          required: true
          example: 6d8433c1-cd55-4c24-affd-f592287a7572
          schema:
            type: string
      security:
        - api_key: []
      responses:
        '200':
          description: Upload status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentUploadStatus'
        '401':
          description: Unauthorized Request
        '403':
          description: Bad API Token
        '404':
          description: Not Found
          
components:
  securitySchemes:
    api_key:
      type: apiKey
      name: apikey
      in: query
  schemas:
    DocumentUploadSubmission:
      description: |
        Contains a submission record with information for use in subsequent requests for status
        or upload.
      properties:
        guid:
          type: string
          example: 6d8433c1-cd55-4c24-affd-f592287a7572
          description: Unique identifier for future reference
        location:
          type: string
          format: URL
          example: https://dev-api.vets.gov/
          description: URL to PUT documents in subsequent request
          
    DocumentUploadMetadata:
      description: |
        This section is subject to revision, as we assess the feasibility of API gateway middleware
        calculating some of the required downstream metadata on behalf of the submitter.
      required:
        - veteranFirstName
        - veteranLastName
        - fileNumber
        - zipCode
      properties:
        veteranFirstName:
          type: string
          example: Jane
          description: Veteran first name
        veteranLastName:
          type: string
          example: Doe
          description: Veteran last name
        fileNumber:
          type: string
          example: '999887777'
          description: VA file number or SSN
        zipCode:
          type: string
          example: '20571'
          description: Veteran zip code
        source:
          type: string
          example: MyVSO
          description: System, installation, or entity submitting the document
        docType:
          type: string
          description: VBA form number of document
          example: '21-22'
    DocumentUploadFailure:
      type: object
      xml:
        name: Error
      properties:
        Code:
          type: string
          description: Error code
          example: Bad Digest
        Message:
          type: string
          description: Error detail
          example: A client error (InvalidDigest) occurred when calling the PutObject operation - The Content-MD5 you specified was invalid.
        Resource:
          type: string
          description: Resource description
          example: /vba_documents/6d8433c1-cd55-4c24-affd-f592287a7572.upload
        RequestId:
          type: string
          description: Identifier for debug purposes
    DocumentUploadStatus:
      description: |
        Note that until a document status of “received”, “processing”, or “success” is returned, a client
        cannot consider the document as received by VA. In particular a status of “uploaded” means
        that the document package has been transmitted, but possibly not validated. Any errors with the
        document package (unreadable PDF, etc) may cause the status to change to “error”.

      required:
        - guid
        - status
        - code
        - message
        - detail
      properties:
        guid:
          description: The document upload identifier.
          type: string
          format: uuid
          example: 6d8433c1-cd55-4c24-affd-f592287a7572
        status:
          description: |
            Document upload status
        
            * `pending` - Initial status, indicates no document package has been uplaoded yet
            * `uploaded` - Indicates document package has been successfully uploaded, but not yet processed or propagated to Central Mail API
            * `received` - Indicates document package has been successfully propagated to Central Mail API
            * `processing` - Indicates document package is being processed by ICMHS or a downstream system.
            * `success` - Indicates document package has been received by DHMS.
            * `error` - Indicates that there was an error. See the `code` and `message` for further information.
          type: string
          enum:
            - pending
            - uploaded
            - received
            - processing
            - success
            - error
        code:
          description: |
            Unambiguous status code. Only present if status = "error"
            
            * `DOC101` - Invalid multipart payload provided - not a multipart, or missing one or more required parts.
            * `DOC102` - Invalid metadata - not parseable as JSON, incorrect fields, etc.
            * `DOC103` - Invalid content - not parseable as PDF. Detail field will indicate which document or attachment part was affected.
            * `DOC104` - Upload rejected by downstream system. Detail field will indicate nature of rejection.
            * `DOC201` - Upload server error.
            * `DOC202` - Error during processing by downstream system. Processing failed and could not be retried. Detail field will provide additional details where available.
          type: string
          
        message:
          description: Human readable error description. Only present if status = "error"
          type: string
        detail:
          description: Human readable error detail. Only present if status = "error"
          type: string
