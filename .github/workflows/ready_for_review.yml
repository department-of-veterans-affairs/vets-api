name: Pull Request Ready for Review
on:
  pull_request:
     types: [opened, reopened, synchronize, ready_for_review, converted_to_draft, review_requested, review_request_removed, labeled, unlabeled]
  workflow_run:
    workflows: ["Code Checks", "Check CODEOWNERS Entries", "Audit Service Tags", "CodeQL"]
    types: [completed]
  pull_request_review:
    types: [submitted]
    branches: master

jobs:
  get-pr-data:
    name: Get PR Data
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      pr_number: ${{ steps.get_pr_data.outputs.pr_number }}
      pr_branch:  ${{ steps.get_pr_data.outputs.pr_branch }}
      pr_author:  ${{ steps.get_pr_data.outputs.pr_author }}
      pr_draft: ${{ steps.get_pr_data.outputs.pr_draft }}
      pr_labels: ${{ steps.get_pr_data.outputs.pr_labels }}
      pr_requested_teams: ${{ steps.get_pr_data.outputs.pr_requested_teams }}
      require_be_approval: ${{ steps.get_pr_data.outputs.require_be_approval }}
    steps:
      - name: Get pull_request data
        id: get_pr_data
        run: |
          FETCH_PR_DATA = false

          if ${{ github.event_name == 'pull_request' }}; then
            FETCH_PR_DATA = true
            echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT

          elif [[ "${{ github.event_name }}" == "pull_request_review" ]]; then
            FETCH_PR_DATA = true
            PR_NUMBER="${{ github.event.pull_request.number }}"
            echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT
          elif ${{ github.event_name == 'workflow_run' }}; then
            if ${{ github.event.workflow_run.event == 'push' }}; then
              HEAD_BRANCH="${{ github.event.workflow_run.head_branch }}"
              echo "Workflow was triggered by push to $HEAD_BRANCH. Labeling not required."
              exit 0
            elif ${{ toJSON(github.event.workflow_run.pull_requests) != '[]' }}; then
              FETCH_PR_DATA = true
              PR_NUMBER="${{ github.event.workflow_run.pull_requests[0].number }}"
              echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT
            else
              echo "Workflow run has no associated pull requests. Labeling not performed."
              exit 0
            fi
          else
            echo "event_name: ${{ github.event_name }}"
            echo "Pull Request not successfully retrieved."
            exit 1
          fi

          # Fetch PR details from GitHub API
          if FETCH_PR_DATA == 'true'; then

            PR_INFO=$(gh api /repos/${{ github.repository }}/pulls/${PR_NUMBER} --jq '{
              draft: .draft,
              labels: [.labels[].name],
              head_ref: .head.ref,
              requested_teams: [.requested_teams[].slug],
              author: .user.login
            }')

            echo "pr_draft=$(echo "$PR_INFO" | jq -r '.draft')" >> $GITHUB_OUTPUT
            echo "pr_labels=$(echo "$PR_INFO" | jq -c '.labels')" >> $GITHUB_OUTPUT
            echo "pr_branch=$(echo "$PR_INFO" | jq -c '.labels')" >> $GITHUB_OUTPUT
            echo "pr_requested_teams=$(echo "$PR_INFO" | jq -c '.head_ref')" >> $GITHUB_OUTPUT
          fi


  check-workflow-status:
    name: Check Workflow Statuses
    needs: [get-pr-data]
    runs-on: ubuntu-latest
    permissions: write-all
    env:
      pr_number: ${{ needs.get-pr-data.outputs.pr_number }}
      pr_branch: ${{ needs.get-pr-data.outputs.pr_branch }}
      pr_draft: ${{ needs.get-pr-data.outputs.pr_draft }}
    outputs:
      failures_detected: ${{ steps.check_workflow_status.outputs.failures_detected }}
      pending_workflows: ${{ steps.check_workflow_status.outputs.pending_workflows }}
    steps:
      - name: Check if workflows have completed successfully
        id: check_workflow_status
        run: |
          if ${pr_draft} == 'false'; then
            failures=false
            pending=false
            GITHUB_REPOSITORY="department-of-veterans-affairs/vets-api"
            WORKFLOWS=("Code Checks" "Check CODEOWNERS Entries" "Audit Service Tags" "CodeQL")

            for WORKFLOW in "${WORKFLOWS[@]}"; do
              # Check if there's any in-progress run for this workflow
              IN_PROGRESS_SHA=$(gh run list --repo "$GITHUB_REPOSITORY" --workflow="$WORKFLOW" --status=in_progress --json headBranch,event,headSha -q \
                ".[] | select(.headBranch == \"${pr_branch}\" and .event == \"pull_request\") | .headSha" | head -n 1)

              if [ -n "$IN_PROGRESS" ]; then
                echo "$WORKFLOW is still in progress."
                pending=true
              else
                # Check if the latest completed run was successful
                SUCCESSFUL=$(gh run list --repo "$GITHUB_REPOSITORY" --workflow="$WORKFLOW" --status=completed --json headBranch,event,conclusion,headSha -q \
                  ".[] | select(.headBranch == \"${pr_branch}\" and .event == \"pull_request\") | select(.conclusion == \"success\") | .headSha" | head -n 1)
                if [ -z "$SUCCESSFUL" ]; then
                  echo "$WORKFLOW did not complete successfully."
                  failures=true
                  # break
                else
                  echo "$WORKFLOW completed successfully."
                fi
              fi
            done
          else
            pending=true
            failures=true
          fi
          echo "pending_workflows=$pending" >> "$GITHUB_OUTPUT"
          echo "failures_detected=$failures" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        # Add ready for review
        - name: Add ready-for-team-review label
          if: |
              needs.get-pr-data.outputs.pr_draft == 'false' &&
              steps.check_workflow_status.outputs.failures_detected == 'false' &&
              steps.check_workflow_status.outputs.pending_workflows == 'false'
          uses: actions-ecosystem/action-add-labels@v1
          with:
            number: ${{ env.pr_number }}
            labels: ready-for-team-review

  fetch-pr-reviews:
    name: Fetch Pull Request Reviews
    needs: [get-pr-data, check-workflow-status]
    if: |
        needs.get-pr-data.outputs.pr_draft == 'false' &&
        needs.check-workflow-status.outputs.failures_detected == 'false' &&
        needs.check-workflow-status.outputs.pending_worfklows == 'false'
    runs-on: ubuntu-latest
    permissions: write-all
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      pr_draft: ${{ needs.get-pr-data.outputs.pr_draft }}
      pr_author: ${{ needs.get-pr-data.outputs.pr_author }}
      pr_number: ${{ needs.get-pr-data.outputs.pr_number }}
      pr_labels: ${{ needs.get-pr-data.outputs.pr_labels }}
      pr_requested_teams: ${{ needs.get-pr-data.outputs.pr_requested_teams }}
    outputs:
      backend_approval_required: ${{ steps.verify_approval.outputs.backend_approval_required }}
      author_is_backend: ${{ steps.verify_approval.outputs.author_is_backend }}
      team_approval_status: ${{ steps.verify_approval.outputs.team_approval_status }}
      approval_status: ${{ steps.verify_approval.outputs.approval_status }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: "us-gov-west-1"

      - name: Get bot token from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Get backend-review-group members
        id: get_team_members
        uses: octokit/request-action@v2.x
        with:
          route: GET /orgs/department-of-veterans-affairs/teams/backend-review-group/members
        env:
          GITHUB_TOKEN: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}

      - name: Get PR reviews
        id: get_pr_reviews
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/pulls/${{ env.pr_number }}/reviews
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify backend-review-group approval
        if: |

        id: verify_approval
        run: |
          backend_approval_required=false

          if [[ ${{ contains(fromJson(env.pr_requested_teams), 'backend-review-group') || contains(fromJson(env.pr_labels), 'require-backend-approval') }} == true ]]; then
            backend_approval_required=true
          fi

          # Check if PR author is in BACKEND_REVIEWERS
          if echo "${pr_branch}" | grep -qiE "^($BACKEND_REVIEWERS)$"; then
            echo "PR author '${pr_branch}' is a backend-review-group member."
            echo "author_is_backend=true" >> $GITHUB_OUTPUT
            backend_approval_required=true
          else
            echo "PR author '${pr_branch}' is NOT a backend-review-group member."
            echo "author_is_backend=false" >> $GITHUB_OUTPUT
          fi

          echo "backend_approval_required=${backend_approval_required}" >> $GITHUB_OUTPUT

          TEAM_APPROVALS=$(cat <<'EOF' | jq -r '[.[] | {user: .user.login, state, submitted_at}]
            | sort_by(.submitted_at)
            | reverse
            | unique_by(.user)
            | map(select(.state == "APPROVED"))
            | .[].user' | grep -viE "$BACKEND_REVIEWERS" | wc -l
          ${{ steps.get_pr_reviews.outputs.data }}
          EOF
          )

          echo "Number of non backend-review-group approvals: $TEAM_APPROVALS"
          if [ "$TEAM_APPROVALS" -eq 0 ]; then
            echo "team_approval_status=required" >> $GITHUB_OUTPUT
          else
            echo "team_approval_status=confirmed" >> $GITHUB_OUTPUT
          fi


          if [[ "$BACKEND_APPROVAL_REQUIRED" == "true" ]]; then

            BACKEND_REVIEWERS=$(cat <<'EOF' | jq -r '.[].login' | tr '\n' '|' | sed 's/|$//'
            ${{ steps.get_team_members.outputs.data }}
            EOF
            )

            BE_APPROVALS=$(cat <<'EOF' | jq -r '[.[] | {user: .user.login, state, submitted_at}]
              | sort_by(.submitted_at)
              | reverse
              | unique_by(.user)
              | map(select(.state == "APPROVED"))
              | .[].user' | grep -iE "$BACKEND_REVIEWERS" | wc -l
            ${{ steps.get_pr_reviews.outputs.data }}
            EOF
            )
            echo "Number of backend-review-group approvals: $BE_APPROVALS"

            if [ "$BE_APPROVALS" -eq 0 ]; then
              echo "approval_status=required" >> $GITHUB_OUTPUT
            else
              echo "approval_status=confirmed" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Add require-backend-approval label
        if: steps.verify_approval.outputs.backend_approval_required == 'true'
        uses: actions-ecosystem/action-add-labels@v1
        with:
          number: ${{ env.pr_number }}
          labels: require-backend-approval

      - name: Add ready-for-backend-review label
        if: |
          steps.verify_approval.outputs.approval_status == 'required' &&
          ( steps.verify_approval.outputs.team_approval_status == 'confirmed' ||
            steps.verify_approval.outputs.author_is_backend == 'true'
          )
        uses: actions-ecosystem/action-add-labels@v1
        with:
          number: ${{ env.pr_number }}
          labels: ready-for-backend-review

      - name: Remove ready-for-backend-review label
        if: |
          steps.verify_approval.outputs.approval_status == 'confirmed' ||
          steps.verify_approval.outputs.backend_approval_required == 'false' ||
          (
            steps.verify_approval.outputs.team_approval_status == 'required' &&
            steps.verify_approval.outputs.author_is_backend == 'false'
          )
        uses: actions-ecosystem/action-add-labels@v1
        with:
          number: ${{ env.pr_number }}
          labels: ready-for-backend-review

      - name: Add backend-approval-confirmed label
        if: steps.verify_approval.outputs.approval_status == 'confirmed'
        uses: actions-ecosystem/action-add-labels@v1
        with:
          number: ${{ env.pr_number }}
          labels: backend-approval-confirmed

      - name: Remove backend-approval-confirmed label
        if: steps.verify_approval.outputs.approval_status == 'required'
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          number: ${{ env.pr_number }}
          labels: backend-approval-confirmed

      - name: Remove ready-for-team-review label
        if: |
          steps.verify_approval.outputs.team_approval_status == 'confirmed' ||
          steps.verify_approval.outputs.author_is_backend == 'true'
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          number: ${{ env.pr_number }}
          labels: ready-for-team-review

      - name: Add team-approval-confirmed label
        if: steps.verify_approval.outputs.team_approval_status == 'confirmed'
        uses: actions-ecosystem/action-add-labels@v1
        with:
          number: ${{ env.pr_number }}
          labels: team-approval-confirmed


