{{- $root := . -}}
{{- range $name, $service := $root.Values.web.webServices }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ $name }}
  name: {{ $name }}
  namespace: {{ $root.Release.Namespace }}
spec:
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: {{ $name }}
  strategy:
    type: {{ $root.Values.web.strategyType }}
    rollingUpdate:
      maxSurge: {{ $root.Values.web.maxSurge }}
      maxUnavailable: {{ $root.Values.web.maxUnavailable }}
  template:
    metadata:
      labels:
        app: {{ $name }}
      annotations:
{{ toYaml $root.Values.annotations | indent 8 }}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: {{ $root.Values.affinityWeight }}
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: {{ $root.Values.matchExpressions.key }}
                      operator: {{ $root.Values.matchExpressions.operator }}
                      values:
                        - {{ $name }}
                topologyKey: {{ $root.Values.topologyKey }}
      securityContext:
        fsGroup: {{ $root.Values.fsGroup }}
      volumes:
{{ toYaml $root.Values.common.volumes | indent 8 }}
      {{- if $root.Values.mockData.enabled }}
      initContainers:
{{ toYaml $root.Values.common.initContainers | indent 8 }}
      {{- end }}
      containers:
        - image: "{{ $root.Values.image.value }}:{{ $root.Values.image.tag }}"
          imagePullPolicy: {{ $root.Values.image.pullPolicy }}
          name: {{ $root.Values.appName }}-web
          ports:
            {{- range $key := $root.Values.web.containers.ports }}
            - containerPort: {{ $key.containerPort }}
              name: {{ $key.name }}
            {{- end }}
          {{- if $root.Values.web.livenessProbe.enabled  }}
          livenessProbe: #ensure app is serving requests properly and know when to restart a container
            httpGet:
              path: {{ $root.Values.web.livenessProbe.requestPath }}
              port: {{ $root.Values.web.livenessProbe.port }}
            initialDelaySeconds: {{ $root.Values.web.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ $root.Values.web.livenessProbe.periodSeconds }}
            successThreshold: {{ $root.Values.web.livenessProbe.successThreshold }}
            failureThreshold: {{ $root.Values.web.livenessProbe.failureThreshold }}
          {{- end }}
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - sleep 40
          {{- if $root.Values.web.startupProbe.enabled  }}
          startupProbe:
            httpGet:
              path: {{ $root.Values.web.startupProbe.requestPath }}
              port: {{ $root.Values.web.startupProbe.port }}
              httpHeaders:
                - name: Host
                  value: {{ $service.healthCheck.host | default $root.Values.web.healthCheck.host }}
            initialDelaySeconds: {{ $root.Values.web.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ $root.Values.web.startupProbe.periodSeconds }}
            failureThreshold: {{ $root.Values.web.startupProbe.failureThreshold }}
            successThreshold: {{ $root.Values.web.startupProbe.successThreshold }}
          {{- end }}
          readinessProbe: #ensure container is ready to start accepting traffic
            httpGet:
              path: {{ $root.Values.web.readinessProbe.requestPath }}
              port: {{ $root.Values.web.readinessProbe.port }}
              httpHeaders:
                - name: Host
                  value: {{ $service.healthCheck.host | default $root.Values.web.healthCheck.host }}
            initialDelaySeconds: {{ $root.Values.web.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ $root.Values.web.readinessProbe.periodSeconds }}
            successThreshold: {{ $root.Values.web.readinessProbe.successThreshold }}
            failureThreshold: {{ $root.Values.web.readinessProbe.failureThreshold }}
          resources:
{{ toYaml $root.Values.web.resources | indent 12 }}
          volumeMounts:
{{ toYaml $root.Values.common.volumeMounts | indent 12 }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: GIT_REVISION
              value: {{ $root.Values.image.tag}}
{{ toYaml $root.Values.web.envSecrets | indent 12 }}
          {{- range $keys, $key := $root.Values.common.secrets }}
          {{- range $secrets, $secret := $key }}
            - name: {{ $secret.env_var }}
              valueFrom:
                secretKeyRef:
                  name: {{ $keys }}
                  key: {{ $secret.name }}
          {{- end }}
          {{- end }}
        {{- if $root.Values.clamav.enabled  }}
        - name: clamav
          image: "{{ $root.Values.clamav.image.value }}:{{ $root.Values.clamav.image.tag }}"
          imagePullPolicy: {{ $root.Values.image.pullPolicy }}
          ports:
{{ toYaml $root.Values.clamav.ports | indent 12 }}
{{ toYaml $root.Values.clamav.probes | indent 10 }}
          resources:
{{ toYaml $root.Values.clamav.resources | indent 12 }}
          volumeMounts:
{{ toYaml $root.Values.clamav.volumeMounts | indent 12 }}
        {{- end }}
        {{- if $root.Values.web.clamavMirror.enabled }}
{{ toYaml $root.Values.common.clamavMirror | indent 8 }}
        {{- end }}
        {{- if $root.Values.web.socatProxyEnabled }}
{{ toYaml $root.Values.common.socatProxy | indent 8 }}
        {{- end }}
      terminationGracePeriodSeconds: {{ $root.Values.web.terminationGracePeriodSeconds }}
      serviceAccountName: {{ $root.Values.serviceAccount.name }}
{{- end }}
