{
	"info": {
		"_postman_id": "e243c8b1-84fd-4cc0-9a2a-5d185de28ca0",
		"name": "Automated Forms API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/forms?query",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.environment.set(\"forms_valid_pdf\", \"\");\r",
							"pm.environment.set(\"forms_invalid_pdf\", \"\");\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"for(var i = 0; i < jsonData.data.length; i++) {\r",
							"    if(jsonData.data[i].attributes.valid_pdf == true && pm.environment.get(\"forms_valid_pdf\") == \"\") {\r",
							"        pm.environment.set(\"forms_valid_pdf\", jsonData.data[i].attributes.url);\r",
							"        pm.environment.set(\"forms_valid_sha256\", jsonData.data[i].attributes.sha256);\r",
							"    }\r",
							"\r",
							"    if(jsonData.data[i].attributes.valid_pdf == false && pm.environment.get(\"forms_invalid_pdf\") == \"\") {\r",
							"        pm.environment.set(\"forms_invalid_pdf\", jsonData.data[i].attributes.url);\r",
							"    }\r",
							"}\r",
							"\r",
							"//if the query didn't get any responses valid or invalid, don't try to hit a url because we don't have one\r",
							"if(pm.environment.get(\"forms_valid_pdf\") == \"\" && pm.environment.get(\"forms_invalid_pdf\") == \"\") {\r",
							"    postman.setNextRequest(null);\r",
							"}\r",
							"//if the query didn't return a valid pdf (only an invalid one would have been returned then), skip the valid url request\r",
							"else if(pm.environment.get(\"forms_valid_pdf\") == \"\") {\r",
							"    postman.setNextRequest(\"invalid url request\");\r",
							"}\r",
							"//if we have a valid but not an invalid, then we need to skip invalid url request, this logic is handled in the valid url request"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "key",
							"value": "apikey",
							"type": "string"
						},
						{
							"key": "value",
							"value": "{{apikey}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/services/va_forms/v0/forms?query={{forms_query}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"services",
						"va_forms",
						"v0",
						"forms"
					],
					"query": [
						{
							"key": "query",
							"value": "{{forms_query}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "valid url request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"PDF download less than 5 seconds. Actual time: \" + (pm.response.responseTime / 1000) + \" seconds\", function (){\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(5000);\r",
							"});\r",
							"\r",
							"//if we don't have an invalid pdf to ping, terminate the collection run\r",
							"if(pm.environment.get(\"forms_invalid_pdf\") == \"\") {\r",
							"    postman.setNextRequest(null);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{forms_valid_pdf}}",
					"host": [
						"{{forms_valid_pdf}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "invalid url request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{forms_invalid_pdf}}",
					"host": [
						"{{forms_invalid_pdf}}"
					]
				}
			},
			"response": []
		}
	]
}