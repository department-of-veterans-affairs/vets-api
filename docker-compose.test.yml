version: '3.4'
services:
  redis:
    image: redis:5.0-alpine
  postgres:
    image: mdillon/postgis:11-alpine
    environment:
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-password}"
      POSTGRES_USER: "${POSTGRES_USER:-postgres}"
  vets-api:
    build:
      context: .
      target: development
      args:
        sidekiq_license: "${BUNDLE_ENTERPRISE__CONTRIBSYS__COM}"
        userid: "${VETS_API_USER_ID}"
    image: "vets-api:${DOCKER_IMAGE:-latest}"
    volumes:
      - ".:/srv/vets-api/src"
      - test_bundle:/usr/local/bundle
    environment:
      "Settings.database_url": "postgis://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DATABASE:-vets_api_development}?pool=4"
      "Settings.test_database_url": "postgis://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DATABASE:-vets_api_test}?pool=4"
      "Settings.saml.cert_path": "/srv/vets-api/src/spec/support/certificates/ruby-saml.crt"
      "Settings.saml.key_path": "/srv/vets-api/src/spec/support/certificates/ruby-saml.key"
      "Settings.redis.host": "redis"
      "Settings.redis.port": "6379"
      "Settings.binaries.clamdscan": "clamscan"           # Not running a separate process within the container for clamdscan, so we use clamscan which requires no daemon
      POSTGRES_HOST: "${POSTGRES_HOST:-postgres}"
      POSTGRES_PORT: "${POSTGRES_PORT:-5432}"
      POSTGRES_USER: "${POSTGRES_USER:-postgres}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-password}"
      CI:
      RAILS_ENV: test
      CC_TEST_REPORTER_ID: '0c396adc254b0317e2c3a89a1c929fd61270b133c944d3e9c0f13b3937a7ce45'
      CHANGE_ID:           "${CHANGE_ID}"
      GIT_URL:             "${GIT_URL}"
      JENKINS_URL:         "${JENKINS_URL}"
      DANGER_GITHUB_API_TOKEN: "${DANGER_GITHUB_API_TOKEN}"
    depends_on:
      - postgres
      - redis
    links:
      - postgres
      - redis
volumes:
  test_bundle:
