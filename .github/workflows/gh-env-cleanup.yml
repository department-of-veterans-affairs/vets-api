name: GitHub Environment Cleanup

on:
  schedule:
    - cron: '0 0 * * 1-5' # Weekdays at midnight UTC
  pull_request:
    types: [closed] # Trigger on PR close
permissions:
  id-token: write
  contents: read
jobs:
  # Scheduled cleanup job
  scheduled-cleanup:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ASSUME_ROLE }}
          aws-region: "us-gov-west-1"

      - name: Get Bot Token from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Set Up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'

      - name: Clean Up Environments
        run: |
          cat << 'EOF' | ruby
            require 'bundler/inline'
            gemfile { source 'https://rubygems.org'; gem 'octokit' }

            CURRENT_TIME = Time.now.to_i
            THRESHOLD_SECONDS = 90 * 24 * 60 * 60 # 90 days in seconds
            REPO = ENV['GITHUB_REPOSITORY']
            CLIENT = Octokit::Client.new access_token: ENV['VA_VSP_BOT_GITHUB_TOKEN']

            def old_and_unprotected? env
              env[:protection_rules].empty? && CURRENT_TIME - env[:created_at].to_i > THRESHOLD_SECONDS
            end

            def delete_environment env
              puts "\nDeleting: #{env[:name]}"
              CLIENT.delete_environment REPO, URI.encode_www_form_component(env[:name])
            end

            print 'Fetching and deleting old environments'
            100.times do |page|
              envs = CLIENT.environments(REPO, per_page: 100, page: page + 1)&.dig(:environments) || []
              print '.'
              break if envs.empty?
              exit 2 if CLIENT.rate_limit.remaining < 1000

              envs
                .select { |env| old_and_unprotected? env }
                .each { |env| delete_environment env }
            end
            puts "\nDone."
          EOF

      - name: Clean up old caches
        run: |
          echo "Cleaning up caches older than 7 days..."
          
          # Get current timestamp and calculate 7 days ago
          SEVEN_DAYS_AGO=$(date -v-7d +%Y-%m-%dT%H:%M:%SZ)
          echo "Deleting caches last accessed before: $SEVEN_DAYS_AGO"
          
          # Delete old caches
          gh api repos/${{ github.repository }}/actions/caches --paginate | \
            jq -r ".actions_caches[] | select(.last_accessed_at < \"${SEVEN_DAYS_AGO}\") | .id" | \
            while read -r cache_id; do
              if [ -n "$cache_id" ]; then
                echo "Deleting old cache ID: $cache_id"
                gh api --method DELETE repos/${{ github.repository }}/actions/caches/$cache_id || true
              fi
            done
          
          echo "Old cache cleanup completed"
        env:
          GH_TOKEN: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}

  # PR-close cleanup job
  pr-close-cleanup:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ASSUME_ROLE }}
          aws-region: "us-gov-west-1"

      - name: Get Bot Token from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Delete PR Environments
        run: |
          # Define possible environment name patterns
          ENVIRONMENTS=(
            "${{ github.head_ref }}/main/main"
            "${{ github.head_ref }}/${{ github.head_ref }}/main"
            "${{ github.head_ref }}/main/${{ github.head_ref }}"
            "${{ github.head_ref }}/${{ github.head_ref }}/${{ github.head_ref }}"
          )

          for ENV in "${ENVIRONMENTS[@]}"; do
            ENCODED_ENV=$(echo "$ENV" | jq -Rr @uri)
            echo "Attempting to delete environment: $ENV"
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE \
              -H "Authorization: Bearer ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/environments/$ENCODED_ENV")

            if [ "$RESPONSE" -eq 204 ]; then
              echo "Successfully deleted: $ENCODED_ENV"
            else
              echo "Failed to delete: $ENCODED_ENV (HTTP $RESPONSE). It probably never existed though."
            fi
          done

      - name: Delete branch cache
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          echo "Cleaning up caches for deleted branch: $BRANCH_NAME"
          
          # Delete caches using proper iteration over lines
          gh api repos/${{ github.repository }}/actions/caches --paginate | \
            jq -r ".actions_caches[] | select(.ref == \"refs/heads/${BRANCH_NAME}\" or (.key | contains(\"buildx-${BRANCH_NAME}-\"))) | .id" | \
            while read -r cache_id; do
              if [ -n "$cache_id" ]; then
                echo "Deleting cache ID: $cache_id"
                gh api --method DELETE repos/${{ github.repository }}/actions/caches/$cache_id || true
              fi
            done
          
          echo "Cache cleanup completed for branch: $BRANCH_NAME"
        env:
          GH_TOKEN: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}
