name: Code Checks
on: [push]
jobs:
  linting_and_security:
    name: Linting and Security
    env:
      BUNDLE_ENTERPRISE__CONTRIBSYS__COM: ${{ secrets.BUNDLE_ENTERPRISE__CONTRIBSYS__COM }}
    runs-on: ubuntu-20.04 # Doesn't run on self-hosted runners as there are SSL issues within the TIC
    steps:
      - uses: actions/checkout@v2

      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Run bundle-audit (checks gems for CVE issues)
        run:  bundle exec bundle-audit check --update

      - name: Run Rubocop
        run: bundle exec rubocop --parallel --format progress --format json --out rubocop.json

      - name: Run Brakeman
        run:  bundle exec brakeman --ensure-latest --confidence-level=2 -o brakeman.json

      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Linting and Security Results
          path: |
            rubocop.json
            brakeman.json
          if-no-files-found: ignore

  tests:
    name: Test
    env:
      BUNDLE_ENTERPRISE__CONTRIBSYS__COM: ${{ secrets.BUNDLE_ENTERPRISE__CONTRIBSYS__COM }}
      CI: true
      NODE_EXTRA_CA_CERTS: '/etc/ssl/certs/VA-Internal-S2-RCA1-v1.cer.pem' # Needed for self-hosted runners (cache, upload-artifact)
      RAILS_ENV: test
      TERM: xterm-256color
      DOCKER_IMAGE: ${{ github.sha }}-${{ github.run_id }}${{ github.run_number }}
    runs-on: asg
    steps:
      - uses: actions/checkout@v2

      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Setup Environment
        run: |
          echo "VETS_API_USER_ID=$(id -u)" >> $GITHUB_ENV
          echo "BUILDX_CONTAINER_ID=$(docker ps | grep ${{ steps.buildx.outputs.name }} | cut -f1 -d' ' | tr -d '[:space:]')" >> $GITHUB_ENV

      - name: Setup Docker
        run: |
          docker volume create --name=test_bundle
          cp /etc/ssl/certs/VA-Internal-S2-RCA1-v1.cer.pem config/ca-trust/
          docker cp config/ca-trust/VA-Internal-S2-RCA1-v1.cer.pem ${{ env.BUILDX_CONTAINER_ID }}:/usr/local/share/ca-certificates/
          docker exec -d  ${{ env.BUILDX_CONTAINER_ID }} update-ca-certificates

      - name: Cache Docker Layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ secrets.CACHE_VERSION }}-{{ env.DOCKER_IMAGE}}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ secrets.CACHE_VERSION }}-

      - name: Build Docker Image
        uses: docker/build-push-action@v2
        with:
          build-args: |
            sidekiq_license=${{ env.BUNDLE_ENTERPRISE__CONTRIBSYS__COM }}
            userid=${{ env.VETS_API_USER_ID }}
          context: .
          target: development
          push: false
          load: true
          tags: vets-api:${{ env.DOCKER_IMAGE }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move Docker Cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Setup Database
        run: |
             docker-compose -f docker-compose.test.yml -f  docker-compose.gha.yml -p ${{ env.DOCKER_IMAGE}} \
             run --rm --service-ports vets-api bash \
             -c "RAILS_ENV=test DISABLE_BOOTSNAP=true parallel_test -n 14 -e 'bundle exec rake db:reset'"

      - name: Run Specs
        run: |
             docker-compose -f docker-compose.test.yml -f docker-compose.gha.yml -p ${{ env.DOCKER_IMAGE}} \
             run --rm --service-ports vets-api bash \
             -c "DISABLE_BOOTSNAP=true bundle exec parallel_rspec spec/ modules/ -n 14 -o '--color --tty'"

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Coverage Report
          path: coverage

      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Test Results
          path: log/*.xml
          if-no-files-found: ignore

      - name: Docker Cleanup
        if: always()
        run: |
          docker rmi -f vets-api:${{ env.DOCKER_IMAGE }} 2> /dev/null || true
          docker rm -f ${{ env.DOCKER_IMAGE }}_postgres_1 2> /dev/null || true

  publish_results:
    name: Publish Results
    if: always()
    needs: [linting_and_security, tests]
    runs-on: ubuntu-20.04 # Doesn't run on self-hosted runners as there are SSL issues within the TIC

    steps:
      - uses: actions/download-artifact@v2

      - uses: duderman/rubocop-annotate-action@v0.1.0
        with:
          path: Linting and Security Results/rubocop.json
        if: hashFiles('Linting and Security Results/rubocop.json') != ''

      - uses: devmasx/brakeman-linter-action@v1.0.0
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          REPORT_PATH: Linting and Security Results/brakeman.json
        if: hashFiles('Linting and Security/brakeman.json') != ''

      - name: Publish Test Results
        uses: docker://ghcr.io/enricomi/publish-unit-test-result-action:v1
        if: always()
        with:
          check_name: Test Results
          comment_mode: off
          files: Test Results/*.xml
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fix up coverage report to work with coverage-check-action
        run: sed -i 's/"line"/"covered_percent"/g' 'Coverage Report/.last_run.json'

      - name: Publish Coverage Report
        uses: devmasx/coverage-check-action@v1.2.0
        if: hashFiles('Coverage Report/.last_run.json') != ''
        with:
          type: simplecov
          result_path: Coverage Report/.last_run.json
          min_coverage: 90
          token: ${{ secrets.GITHUB_TOKEN }}

