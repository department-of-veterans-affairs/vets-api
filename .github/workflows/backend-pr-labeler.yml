name: Backend PR Labeler
on:
  pull_request:
    types: [opened, reopened, review_requested, review_request_removed, ready_for_review, converted_to_draft, labeled, unlabeled]
  pull_request_review:
    types: [submitted]
  workflow_run:
    workflows: 
      - "Code Checks"
    types: [completed]
jobs:
  check-pr-status:
    runs-on: ubuntu-latest
    outputs:
      pull_request: ${{ steps.get_pr.outputs.pull_request }}
      test_status: ${{ steps.get_code_checks_conclusion.outputs.test_status }}
      exempt: ${{ steps.check_exemption.outputs.exempt }}
      draft: ${{ steps.check_draft.outputs.draft }}
      failures_detected: ${{ steps.audit_pr_labels.outputs.failures_detected }}
    steps:
      # - name: Checkout code
      #   uses: actions/checkout@v4

      - name: Get pull_request
        id: get_pr
        run: |
          if ${{ github.event_name == 'pull_request'}}; then
            echo "pull_request=${{ toJSON(github.event.pull_request) }}" >> $GITHUB_OUTPUT
          elif ${{ github.event_name == 'pull_request_review' }}; then
            echo "pull_request=${{ toJSON(github.event.pull_request_review.pull_request) }}" >> $GITHUB_OUTPUT
          else
            echo "pull_request=${{ toJSON(github.event.workflow_run.pull_requests[0]) }}" >> $GITHUB_OUTPUT
          fi

      - name: Get Code Checks conclusion
        if: github.event_name == 'workflow_run'
        run: |
          echo "pull_request_json=${{ steps.get_pr.outputs.pull_request }}"
          echo "workflow_run: ${{ toJSON(github.event.workflow_run) }}"
          echo "test_status=${{ github.event.workflow_run.conclusion }}" >> $GITHUB_OUTPUT
          echo "test_status: ${{ github.event.workflow_run.conclusion }}"

      - name: Check for exemption
        id: check_exemption
        run: |
          pull_request=${{ fromJSON(steps.get_pr.outputs.pull_request) }}
          if [ ! ${{ contains(fromJSON(steps.get_pr.outputs.pull_request).requested_teams.*.name), 'backend-review-group') }} ]; then
            echo "exempt=true" >> $GITHUB_OUTPUT
            echo "PR is exempt from backend approval."
          else
            echo "exempt=false" >> $GITHUB_OUTPUT
            echo "PR requires backend approval."
          fi

      - name: Check Draft state
        id: check_draft
        run: |
          if ${{ fromJSON(steps.get_pr.outputs.pull_request).draft }}; then
            echo "draft=true" >> $GITHUB_OUTPUT
            echo "Draft PR detected, skipping label checks."
          else
            echo "draft=false" >> $GITHUB_OUTPUT
            echo "PR is ready for review."
          fi

      - name: Check for failure labels
        id: audit_pr_labels
        run: |
          labels = '${{ fromJSON(steps.get_pr.outputs.pull_request).labels.*.name }}'
          if [[ \
            ${{ contains(labels, 'code-health-failure') == 'true' }} || \
            ${{ contains(labels, 'codeowners-addition-failure') == 'true' }} || \
            ${{ contains(labels, 'codeowners-delete-failure') == 'true' }} || \
            ${{ contains(labels, 'lint-failure') == 'true' }} || \
            ${{ contains(labels, 'test-failure') == 'true' }} \
          ]]; then
            echo "failures_detected=true" >> $GITHUB_OUTPUT
            echo "Failure labels detected."
          else
            echo "failures_detected=false" >> $GITHUB_OUTPUT
            echo "No failure labels detected."
          fi

      # # If test-passing label is present, ready_for_review=true
      # - name: Audit Test Passing Label
      #   id: audit_passing_labels
      #   if: |
      #     contains(github.event.pull_request.labels.*.name, 'test-passing')
      #   run: |
      #     echo "ready_for_review=true" >> $GITHUB_OUTPUT

  check-approvals:
    runs-on: ubuntu-latest
    needs: check-pr-status
    if: ${{ needs.check-pr-status.outputs.exempt == 'false' && needs.check-pr-status.outputs.draft == 'false' }}
    outputs:
      approval_status: ${{ steps.verify_approval.outputs.approval_status }}
    steps:
      # - uses: actions/checkout@v4
      - name: Print vars
        run: |
          echo "exempt=${{ needs.check-pr-status.outputs.exempt }}"
          echo "draft=${{ needs.check-pr-status.outputs.draft }}"
          echo "failures_detected=${{ needs.check-pr-status.outputs.failures_detected }}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: "us-gov-west-1"

      - name: Get bot token from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      # If backend-review-group approval is required, get reviews
      - name: Get PR Reviews
        id: get_pr_reviews
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/pulls/${{ fromJSON(needs.check-pr-status.outputs.pull_request).number }}/reviews
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # If backend-review-group approval is required, get team members
      - name: Get backend-review-group members
        id: get_team_members
        uses: octokit/request-action@v2.x
        with:
          route: GET /orgs/department-of-veterans-affairs/teams/backend-review-group/members
        env:
          GITHUB_TOKEN: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}

      # If backend-review-group approval is required, confirm an approval exists from at least one BE team member
      - name: Verify backend-review-group approval
        id: verify_approval
        run: |
          BACKEND_REVIEWERS=$(cat <<'EOF' | jq -r '.[].login' | tr '\n' '|' | sed 's/|$//'
          ${{ steps.get_team_members.outputs.data }}
          EOF
          )

          APPROVALS=$(cat <<'EOF' | jq -r '.[] | select(.state == "APPROVED") | .user.login' | grep -iE "$BACKEND_REVIEWERS" | wc -l
          ${{ steps.get_pr_reviews.outputs.data }}
          EOF
          )

          echo "Number of backend-review-group approvals: $APPROVALS"
          if [ "$APPROVALS" -eq 0 ]; then
            echo "approval_status=required" >> $GITHUB_OUTPUT
            echo "Backend-review-group approval required."
          else
            echo "approval_status=confirmed" >> $GITHUB_OUTPUT
            echo "Backend-review-group approval confirmed."
          fi

  apply-labels:
    runs-on: ubuntu-latest
    needs: [check-pr-status, check-approvals]
    if: ${{ always() }}
    steps:
      - name: Set vars from outputs
        id: set-vars
        run: |
          echo "pull_request=${{ needs.check-pr-status.outputs.pull_request }}" >> $GITHUB_ENV
          echo "pull_reques_number=${{ fromJSON(needs.check-pr-status.outputs.pull_request).number }}" >> $GITHUB_ENV
          echo "pull_request_labels=${{ fromJSON(needs.check-pr-status.outputs.pull_request).labels.*.name }}" >> $GITHUB_ENV
          echo "test_status=${{ needs.check-pr-status.outputs.test_status }}" >> $GITHUB_ENV
          echo "exempt=${{ needs.check-pr-status.outputs.exempt }}" >> $GITHUB_ENV
          echo "draft=${{ needs.check-pr-status.outputs.draft }}" >> $GITHUB_ENV
          echo "failures_detected=${{ needs.check-pr-status.outputs.failures_detected }}" >> $GITHUB_ENV
          echo "approval_status=${{ needs.check-approvals.outputs.approval_status }}" >> $GITHUB_ENV

      - name: print vars
        id: print-vars
        run: |
          echo ${{ env.exempt }}
          echo ${{ env.draft }}
          echo ${{ env.failures_detected }}
          echo ${{ env.approval_status }}

      # Remove labels if required
      - name: Remove require-backend-approval label
        if: ${{ (env.draft == 'true' || env.exempt == 'true') && contains(env.pull_request_labels, 'require-backend-approval') }}
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          number: ${{ env.pull_request_number }}
          labels: |
            require-backend-approval

      - name: Remove Review label
        uses: actions-ecosystem/action-remove-labels@v1
        if: |
          env.draft ||
          (
            contains(env.pull_request_labels, 'ready-for-backend-review') &&
            ( 
              env.failures_detected == 'true' ||
              env.approval_status == 'confirmed'
            )
          )
        with:
          number: ${{ env.pull_request_number }}
          labels: |
            ready-for-backend-review

      - name: Remove Test Passing label
        if: ${{ env.test_status == 'failure' && contains(env.pull_request_labels, 'test-passing') }}
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          number: ${{ env.pull_request_number }}
          labels: |
            test-passing

      - name: Remove Test Failure label
        if: ${{ env.test_status == 'success' && contains(env.pull_request_labels, 'test-passing') }}
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          number: ${{ env.pull_request_number }}
          labels: |
            test-failure

      # Add labels if required
      - name: Add require-backend-approval label
        if: ${{ env.draft == 'false' && env.exempt == 'false'}}
        uses: actions-ecosystem/action-add-labels@v1
        with:
          number: ${{ env.pull_request_number }}
          labels: |
            require-backend-approval

      - name: Add Review label
        uses: actions-ecosystem/action-add-labels@v1
        if: |
          env.failures_detected == 'false' &&
          env.approval_status == 'required'
        with:
          number: ${{ env.pull_request_number }}
          labels: |
            ready-for-backend-review

      - name: Add Test Failure label
        if: ${{ env.test_status == 'failure' }}
        uses: actions-ecosystem/action-add-labels@v1
        with:
          number: ${{ env.pull_request_number }}
          labels: |
            test-failure

      - name: Add Test Passing label
        if: ${{ env.test_status == 'success' }}
        uses: actions-ecosystem/action-add-labels@v1
        with:
          number: ${{ env.pull_request_number }}
          labels: |
            test-passing
      
      - name: Debugging
        if: ${{ always() }}
        run: |
          echo "github_eventname: ${{ github.event_name }}"
          echo "github_event: ${{ toJSON(github.event) }}"
          echo "labels: ${{ toJSON(env.pull_request_labels) }}"
          echo "labels: ${{ env.pull_request_labels[0] }}"
          echo "pull_request: ${{ toJSON(env.pull_request) }}"
          echo '${{ toJSON(fromJSON(env.pull_request).requested_teams) }}' | jq .
          echo '${{ toJSON(github.event.workflow) }}' | jq .
