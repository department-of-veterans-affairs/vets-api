ssmPath: /dsva-vagov/vets-api/dev/
parameters:
  SETTINGS__EVSS__URL: "evss/url"
  SETTINGS__EVSS__SERVICE_NAME: "evss/service_name"
  SETTINGS__EVSS__CERT_PATH: "evss/cert_path"
  SETTINGS__EVSS__S3__AWS_ACCESS_KEY_ID: "claims_api/evss/s3/aws_access_key_id"
  SETTINGS__EVSS__S3__AWS_SECRET_ACCESS_KEY: "claims_api/evss/s3/aws_secret_access_key"
  SETTINGS__EVSS__S3__BUCKET: "claims_api/evss/s3/bucket"
  SETTINGS__EVSS__S3__REGION: "claims_api/evss/s3/region"
  SETTINGS__EVSS__LETTERS__URL: "evss/letters/url"
  SETTINGS__HOSTNAME: "hostname"
  SETTINGS__VSP_ENVIRONMENT: "vsp_environment"

  SETTINGS__ARGOCD__SLACK__API_KEY: "argocd/slack/api_key"
  SETTINGS__FORM_10_10CG__POA__S3__AWS_ACCESS_KEY_ID: "form_10_10cg/poa/s3/aws_access_key_id"
  SETTINGS__FORM_10_10CG__POA__S3__AWS_SECRET_ACCESS_KEY: "form_10_10cg/poa/s3/aws_secret_access_key"
  SETTINGS__FORM_10_10CG__POA__S3__BUCKET: "form_10_10cg/poa/s3/bucket"
  SETTINGS__FORM_10_10CG__POA__S3__REGION: "form_10_10cg/poa/s3/region"
  SETTINGS__HCA__EE__ENDPOINT: "hca/ee/endpoint"
  SETTINGS__HCA__EE__PASS: "hca/ee/pass"
  SETTINGS__HCA__S3__AWS_ACCESS_KEY_ID: "hca/s3/aws_access_key_id"
  SETTINGS__HCA__S3__AWS_SECRET_ACCESS_KEY: "hca/s3/aws_secret_access_key"
  SETTINGS__LOCATORS__VHA_ACCESS_SATISFACTION: "locators/vha_access_satisfaction"
  SETTINGS__LOCATORS__VHA_ACCESS_WAITTIME: "locators/vha_access_waittime"
  SETTINGS__MHV__RX__APP_TOKEN: "mobile/mhv/rx/app_token"
  SETTINGS__MHV__SM__APP_TOKEN: "mhv/sm/app_token"
  SETTINGS__MHV__INHERITED_PROOFING__APP_TOKEN: "mhv/inherited_proofing/app_token"
  SETTINGS__FORM_10_10CG__CARMA__MULESOFT__CLIENT_ID: "form_10_10cg/carma/mulesoft/client_id"
  SETTINGS__FORM_10_10CG__CARMA__MULESOFT__CLIENT_SECRET: "form_10_10cg/carma/mulesoft/client_secret"
  SETTINGS__LOCATORS__VHA: "locators/vha"

  SETTINGS__VIRTUAL_HOSTS: "virtual_hosts"
  SETTINGS__VIRTUAL_AGENT__CXDW_CLIENT_SECRET: "virtual_agent/cxdw_client_secret"
  SETTINGS__VIRTUAL_AGENT__CXDW_CLIENT_ID: "virtual_agent/cxdw_client_id"
  SETTINGS__VIRTUAL_AGENT__CXDW_APP_URI: "virtual_agent/cxdw_app_uri"
  SETTINGS__VIRTUAL_AGENT__CXDW_DATAVERSE_URI: "virtual_agent/cxdw_dataverse_uri"
  SETTINGS__VIRTUAL_AGENT__CXDW_TABLE_PREFIX: "virtual_agent/cxdw_table_prefix"
  SETTINGS__VIRTUAL_AGENT__SPEECH_TOKEN_REQUEST_URI: "virtual_agent/speech_token_request_uri"
  SETTINGS__VIRTUAL_AGENT__SPEECH_TOKEN_SUBSCRIPTION_KEY: "virtual_agent/speech_token_subscription_key"
appName:
target_env:
domain:
manualRoll:
image:
  value:
  testRepository: 008577686731.dkr.ecr.us-gov-west-1.amazonaws.com/dsva/vets-api-postman
  tag:
  pullPolicy: Always
vsp_environment:
affinityWeight:
mockData:
  enabled: false
matchExpressions:
  key: app
  operator: In
topologyKey: kubernetes.io/hostname
annotations:
  ad.datadoghq.com/vets-api-web.checks:
serviceAccount:
  enabled: false
  role_arn:
  name:
fsGroup:
#Web configuration
web:
  strategyType:
  maxSurge:
  maxUnavailable:
  containers:
    ports:
      - containerPort:
        name: web
      - containerPort:
        name:
  healthCheck:
    host:
  livenessProbe:
    enabled: false
    port:
    initialDelaySeconds:
    failureThreshold:
    periodSeconds:
    successThreshold:
    requestPath:
  readinessProbe:
    port:
    initialDelaySeconds:
    failureThreshold:
    periodSeconds:
    successThreshold:
    requestPath:
  startupProbe:
    enabled: false
    port:
    initialDelaySeconds:
    failureThreshold:
    periodSeconds:
    successThreshold:
    requestPath:
  socatProxyEnabled: false
  terminationGracePeriodSeconds:
  envSecrets:
    - name: DD_APM_ENABLED
      value: false
  resources:
    requests:
      cpu:
      memory:
    limits:
      cpu:
      memory:
  ssoeEnabled: false
  ssoeConfigs:
  ingress:
    enabled: true
    entryPoints:
    default:
      port:
      kind:
      host:
      priority:
    headers:
      enabled: false
      properties: {}
  webServices: {}
  autoscaling:
    minReplicas:
    maxReplicas:
    targetValue:
    scaleUp:
      stabilizationWindowSeconds:
      pods:
      periodSeconds:
    scaleDown:
      stabilizationWindowSeconds:
      pods:
      periodSeconds:
  service:
    enabled: false
    annotations: {}
    ports:
    type:
  externalDns:
    dnsName:
    recordTTL:
    targets:
  dbMigrate:
    enabled: false
    envSecrets:
      - name: DD_APM_ENABLED
        value: false
#Worker Configuration
worker:
  enabled: false
  strategyType:
  maxSurge:
  maxUnavailable:
  containers:
    command: []
    args: []
  autoscaling:
    enabled: false
    minReplicas:
    maxReplicas:
    targetValue:
  healthCheck:
    requestPath:
    port:
    initialDelaySeconds:
    readinessPath:
    readinessPort:
    timeoutSeconds:
    successThreshold:
    command: []
    liveness:
      failureThreshold:
    readiness:
      failureThreshold:
  terminationGracePeriodSeconds:
  socatProxyEnabled: false
  envSecrets:
    - name: DD_APM_ENABLED
      value: false
  resources:
    requests:
      cpu:
      memory:
# cronJobs configuration
cronJobs: {}


# clamav configuration
# Clamav is specific for vets-api helm charts. Please do not enable.
# Setting up clamav incorrectly can lead to a PRODUCTION shut down.
clamav:
  enabled: false
  image:
    tag:
    value:
  volumeMounts:
  ports:
  probes:
  resources: {}


# Common configuration
common:
  socatProxy:
  lighthousePreConfigs:
    name:
    data:
  volumeMounts:
  volumes:
  initContainers:
  secrets: {}
  configMaps: {}
    # configMap:
    #   name:
    #   data: {}
    # readinessConfigMap:
    #   name:
    #   data: {}
