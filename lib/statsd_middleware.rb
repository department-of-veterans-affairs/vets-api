# frozen_string_literal: true

class StatsdMiddleware
  STATUS_KEY   = 'api.rack.request'
  DURATION_KEY = 'api.rack.request.duration'

  # Whitelist of vets-website app names. List was generated by running
  # `yarn apps` or `npm run apps` from inside the vets-website dir
  SOURCE_APP_NAMES = Set.new %w[
    0993-edu-benefits
    0994-edu-benefits
    0996-higher-level-review
    1010cg-application-caregiver-assistance
    10203-edu-benefits
    1990-edu-benefits
    1990e-edu-benefits
    1990n-edu-benefits
    1995-edu-benefits
    28-1900-chapter-31
    28-8832-planning-and-career-guidance
    526EZ-all-claims
    5490-edu-benefits
    5495-edu-benefits
    686-dependent-status
    686C-674
    ask-a-question
    auth
    beta-enrollment
    burials
    claims-status
    coronavirus-research
    coronavirus-vaccination
    covid19screen
    dashboard
    dependents-view-dependents
    disability-my-rated-disabilities
    discharge-upgrade-instructions
    facilities
    feedback-tool
    financial-status-report
    gi
    hca
    letters
    login-page
    my-documents
    my-health-account-validation
    order-form-2346
    pensions
    post-911-gib-status
    pre-need
    profile
    proxy-rewrite
    public-outreach-materials
    questionnaire
    resources-and-support
    search
    static-pages
    terms-and-conditions
    vaos
    verify
    veteran-id-card
    veteran-representative
    view-payments
    yellow-ribbon
    your-debt
    undefined
  ].freeze

  def initialize(app)
    @app = app
  end

  def call(env)
    start_time = Time.current
    status, headers, response = @app.call(env)
    duration = (Time.current - start_time) * 1000.0

    path_parameters = env['action_dispatch.request.path_parameters']

    # When ActionDispatch middleware is not processed, as is the case when middleware
    # such as Rack::Attack halts the call chain while applying a rate limit, path
    # parameters are not parsed. In this case, we don't have a controller or action
    # for the request.
    #
    # We should never use a dynamic path to apply the tag for the instrumentation,
    # since this will permit a rogue actor to increase the number of time series
    # exported from the process and causes instability in the metrics system. Effort
    # should be taken to track known conditions carefully in alternate metrics. For
    # the case of Rack::Attack rate limits, we can track the number of 429s responses
    # based on component at the reverse proxy layer, or with instrumentation provided
    # by the Rack::Attack middleware (which performs some rudimentary path matching)

    if path_parameters
      controller = path_parameters[:controller]
      action = path_parameters[:action]
      source_app = get_source_app(env)

      instrument_statsd(status, duration, controller, action, source_app)
    end

    [status, headers, response]
  end

  private

  def get_source_app(env)
    source_app = env['HTTP_SOURCE_APP_NAME']

    return 'not_provided' if source_app.nil?
    return source_app if SOURCE_APP_NAMES.include?(source_app)

    # TODO: - Use sentry to notify us instead. It must be done in a rate-limited way
    #        so as not to allow for a malicious client to overflow worker queues
    Rails.logger.warn "Unrecognized value for HTTP_SOURCE_APP_NAME request header... [#{source_app}]"

    'not_in_whitelist'
  end

  def instrument_statsd(status, duration, controller, action, source_app)
    duration_tags = ["controller:#{controller}", "action:#{action}", "source_app:#{source_app}"]
    status_tags = duration_tags + ["status:#{status}"]

    # rubocop:disable Style/RescueModifier
    StatsD.increment(STATUS_KEY, tags: status_tags) rescue nil
    StatsD.measure(DURATION_KEY, duration, tags: duration_tags) rescue nil
    # rubocop:enable Style/RescueModifier
  end
end
