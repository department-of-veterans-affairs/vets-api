rake about                                                            # List versions of all Rails frameworks and the environment
rake app:template                                                     # Applies the template supplied by LOCATION=(/path/to/template) or URL
rake app:update                                                       # Update configs and some other initially generated files (or use just update:configs or update:bin)
rake breakers:begin_forced_outage                                     # Begin a forced outage (requires: service=<service_name>)
rake breakers:end_forced_outage                                       # End a forced outage (requires: service=<service_name>)
rake breakers:list_services                                           # List out all breakers-compatible service names
rake camelize_file:json[json_path]                                    # Given a json file it is transformed into a camelCase version
rake camelize_file:schema[json_schema_file]                           # Given a json schema file in spec/support/schemas, it creates a camelCase version
rake ci                                                               # Runs the continuous integration scripts
rake claims:failed                                                    # Find failed burial and pension claim uploads
rake connectivity:all                                                 # Check connectivity to all backend services
rake connectivity:db                                                  # Check DB
rake connectivity:edu                                                 # Check Edu SFTP
rake connectivity:evss                                                # Check EVSS
rake connectivity:gi                                                  # Check GI
rake connectivity:hca                                                 # Check HCA
rake connectivity:logs                                                # Check that logs are writeable
rake connectivity:mvi                                                 # Check MVI
rake connectivity:redis                                               # Check Redis
rake connectivity:rx                                                  # Check Rx
rake connectivity:sm                                                  # Check SM
rake connectivity:statsd                                              # Check StatsD
rake db:create                                                        # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config). Without RAILS_ENV or when RAILS_ENV is development, it defaults to creating the development and test databases
rake db:drop                                                          # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config). Without RAILS_ENV or when RAILS_ENV is development, it defaults to dropping the development and test databases
rake db:environment:set                                               # Set the environment value for the database
rake db:fixtures:load                                                 # Loads fixtures into the current environment's database
rake db:gis:setup                                                     # Setup PostGIS data in the database
rake db:migrate                                                       # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)
rake db:migrate:status                                                # Display status of migrations
rake db:prepare                                                       # Runs setup if database does not exist, or runs migrations if it does
rake db:rollback                                                      # Rolls the schema back to the previous version (specify steps w/ STEP=n)
rake db:schema:cache:clear                                            # Clears a db/schema_cache.yml file
rake db:schema:cache:dump                                             # Creates a db/schema_cache.yml file
rake db:schema:dump                                                   # Creates a db/schema.rb file that is portable against any DB supported by Active Record
rake db:schema:load                                                   # Loads a schema.rb file into the database
rake db:seed                                                          # Load the seed data from db/seeds.rb, db/seeds/*.seeds.rb and db/seeds/ENVIRONMENT/*.seeds.rb
rake db:seed:common                                                   # Load the seed data from db/seeds.rb and db/seeds/*.seeds.rb
rake db:seed:development                                              # Load the seed data from db/seeds.rb, db/seeds/*.seeds.rb and db/seeds/development/*.seeds.rb
rake db:seed:development:preferences                                  # Load the seed data from db/seeds/development/preferences.seeds.rb
rake db:seed:original                                                 # Load the seed data from db/seeds.rb
rake db:seed:replant                                                  # Truncates tables of each database for current environment and loads the seeds
rake db:setup                                                         # Creates the database, loads the schema, and initializes with the seed data (use db:reset to also drop the database first)
rake db:structure:dump                                                # Dumps the database structure to db/structure.sql
rake db:structure:load                                                # Recreates the databases from the structure.sql file
rake db:version                                                       # Retrieves the current schema version number
rake default                                                          # Load the seed data from db/seeds.rb, db/seeds/*.seeds.rb and db/seeds/ENVIRONMENT/*.seeds.rb
rake docker_debugging:setup                                           # Setup environment for debugging in docker
rake edu:print[id]                                                    # Given a confirmation number, print a spool file entry
rake education_benefits_submission                                    # update all records in education_benefits_submissions table
rake evss:export_invalid_address_edipis[csv_path]                     # export EDIPIs users with invalid addresss, usage: rake evss:export_invalid_address_edipis[/export/path.csv]
rake evss:export_post_911_not_found[file_path]                        # export post 911 not found users for the last week, usage: rake evss:export_post_911_not_found[/export/path.csv]
rake evss:gibs_not_found[days,limit]                                  # print GIBS not found users in CSV format for last n days with a limit, usage: rake evss:gibs_not_found[7,100]
rake evss:import_dod_facilities                                       # imports DoD facilities into base_facilities table
rake evss_retry_jobs                                                  # retry failed evss jobs
rake form526:errors[start_date,end_date,flag]                         # Get an error report within a given date period
rake form526:retry_corrupted_uploads                                  # Resubmit uploads to EVSS for submitted claims given an array of saved_claim_ids
rake form526:submission                                               # Get one or more submission details given an array of ids (either submission_ids or job_ids)
rake form526:submissions[start_date,end_date]                         # Get all submissions within a date period
rake github_stats:get_open_prs                                        # Hit the Github API and grab data on open PRs
rake id_card_announcement_subscriptions:export_non_va[offset,limit]   # Export distinct email addresses
rake id_card_announcement_subscriptions:export_va[offset,limit]       # Export distinct VA email addresses
rake id_card_announcement_subscriptions:report                        # Export report
rake import_conditions[csv_path]                                      # imports conditions into disability_contentions table
rake jobs:create_daily_spool_files                                    # Create daily spool files
rake jobs:create_daily_year_to_date_report                            # Email daily year to date report
rake jobs:download_facility_access_data                               # Populate facility access-to-care cache
rake jobs:pull_all_facility_location_data                             # Populate/refresh All facility location types to db cache
rake jobs:pull_drive_time_bands                                       # Populate/refresh Drive time bands
rake jobs:pull_facility_dental_service                                # Populate facility dental service cache
rake jobs:pull_facility_mental_health_phone                           # Populate facility mental health data cache
rake jobs:pull_nca_data                                               # Populate/refresh NCA facility location to db cache
rake jobs:pull_vba_data                                               # Populate/refresh VBA facility location to db cache
rake jobs:pull_vc_data                                                # Populate/refresh VC facility location to db cache
rake jobs:pull_vha_data                                               # Populate/refresh VHA facility location to db cache
rake jobs:reload_nca_state_data                                       # Populate/reload NCA state cemetery data to db cache
rake lint                                                             # shortcut to run all linting tools, at the same time
rake load_test:hca_ee[icn]                                            # Load test the HCA Enrollment & Eligibility API
rake load_test:sessions[count,mhv_id]                                 # Create test sessions and output result with a merged curl/locust compatible header
rake load_test:sessions_from_file[sessions_json_file]                 # Create test sessions from json file and output result with a merged curl/locust compatible header
rake log:clear                                                        # Truncates all/specified *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)
rake middleware                                                       # Prints out your Rack middleware stack
rake mvi:find                                                         # Given user attributes, run a find candidate query
rake mvi:migrate_mock_data                                            # Create missing cache files from mock_mvi_responses.yml
rake mvi:mock_database[csvfile]                                       # Build mock MVI yaml database for users in given CSV
rake mvi:update_ids                                                   # Given a ssn update a mocked user's correlation ids
rake pact:verify                                                      # Verifies the pact files configured in the pact_helper.rb against this service provider
rake pact:verify:at[pact_uri]                                         # Verifies the pact at the given URI against this service provider
rake pact:verify:help[reports_dir]                                    # Get help debugging pact:verify failures
rake pension_burial:delete_pre_central_mail                           # Delete old claims
rake pension_burial:retry_jobs                                        # retry failed pension burial jobs
rake preferences:initial_seed                                         # Seed the database with the MVP Preference and associated PreferenceChoices
rake raven:test[dsn]                                                  # Send a test event to the remote Sentry server
rake rebuild_encrypted_fixture                                        # Rebuild encrypted-form.json when valid-submission.json changes
rake redis:audit:emis                                                 # Audit Veteran Status
rake redis:audit:loa                                                  # Audit User LOA
rake redis:audit:mvi                                                  # Audit MHV/MVI User Attributes
rake redis:flush_account_store                                        # Flush RedisStore: Account
rake redis:flush_session                                              # Flush Vets.gov User/Sessions
rake redis:flush_session_store                                        # Flush RedisStore: Session
rake redis:flush_users_store                                          # Flush RedisStore: User
rake restart                                                          # Restart app by touching tmp/restart.txt
rake secret                                                           # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)
rake security                                                         # shortcut to run all linting tools, at the same time
rake spec                                                             # Run RSpec code examples
rake spec:config                                                      # Run the code examples in spec/config
rake spec:controllers                                                 # Run the code examples in spec/controllers
rake spec:jobs                                                        # Run the code examples in spec/jobs
rake spec:lib                                                         # Run the code examples in spec/lib
rake spec:mailers                                                     # Run the code examples in spec/mailers
rake spec:middleware                                                  # Run the code examples in spec/middleware
rake spec:models                                                      # Run the code examples in spec/models
rake spec:policies                                                    # Run the code examples in spec/policies
rake spec:rakelib                                                     # Run the code examples in spec/rakelib
rake spec:request                                                     # Run the code examples in spec/request
rake spec:routing                                                     # Run the code examples in spec/routing
rake spec:serializers                                                 # Run the code examples in spec/serializers
rake spec:services                                                    # Run the code examples in spec/services
rake spec:uploaders                                                   # Run the code examples in spec/uploaders
rake spec:validators                                                  # Run the code examples in spec/validators
rake spec:with_codeclimate_coverage                                   # run rspec tests and report results to CodeClimate
rake spec:workers                                                     # Run the code examples in spec/workers
rake stats                                                            # Report code statistics (KLOCs, etc) from the application or engine
rake swagger:generate_block[json_schema_file]                         # Given a json schema file generates a swagger block: `bundle exec rake swagger:generate_block[letters.json]`
rake temp:vba_documents:one_time_submission_status_update             # An upstream DB is out of sync
rake temp:vba_documents:update_to_vbms_status                         # An upstream DB is out of sync
rake test                                                             # Runs all tests in test folder except system ones
rake test:db                                                          # Run tests quickly, but also reset db
rake test:system                                                      # Run system tests only
rake time:zones[country_or_offset]                                    # List all time zones, list by two-letter country code (`rails time:zones[US]`), or list by UTC offset (`rails time:zones[-8]`)
rake tmp:clear                                                        # Clear cache, socket and screenshot files from tmp/ (narrow w/ tmp:cache:clear, tmp:sockets:clear, tmp:screenshots:clear)
rake tmp:create                                                       # Creates tmp directories for cache, sockets, and pids
rake va_forms:install:migrations                                      # Copy migrations from va_forms to application
rake vbms:initialize_upload                                           # connection testing
rake vet360:get_address_transaction_status[vet360_id,tx_audit_id]     # GET Vet360 address transaction status
rake vet360:get_email_transaction_status[vet360_id,tx_audit_id]       # GET Vet360 email transaction status
rake vet360:get_permission_transaction_status[vet360_id,tx_audit_id]  # GET Vet360 permission transaction status
rake vet360:get_person[vet360_id]                                     # Request Vet360 person contact information
rake vet360:get_telephone_transaction_status[vet360_id,tx_audit_id]   # GET Vet360 telephone transaction status
rake vet360:init_vet360_id[icns]                                      # Initializes a vet360_id for the passed in ICNs
rake vet360:post_address                                              # Create Vet360 address (from VET360_RAKE_DATA)
rake vet360:post_email                                                # Create Vet360 email (from VET360_RAKE_DATA)
rake vet360:post_permission                                           # Create Vet360 permission (from VET360_RAKE_DATA)
rake vet360:post_telephone                                            # Create Vet360 telephone (from VET360_RAKE_DATA)
rake vet360:prep_error_codes                                          # Prep Vet360 error codes for locales.exceptions.en.yml file
rake vet360:put_address                                               # Update Vet360 address (from VET360_RAKE_DATA)
rake vet360:put_email                                                 # Update Vet360 email (from VET360_RAKE_DATA)
rake vet360:put_permission                                            # Update Vet360 permission (from VET360_RAKE_DATA)
rake vet360:put_telephone                                             # Update Vet360 telephone (from VET360_RAKE_DATA)
rake veteran:load_sample_vso_data                                     # Load sample data for VSO Reps and Orgs
rake veteran:reload_vso_data                                          # Reload VSO Information
rake yarn:install                                                     # Install all JavaScript dependencies as specified via Yarn
rake zeitwerk:check                                                   # Checks project structure for Zeitwerk compatibility
