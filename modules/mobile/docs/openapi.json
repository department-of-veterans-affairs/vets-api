{
  "openapi": "3.0.0",
  "info": {
    "version": "0.0.0",
    "title": "VA Mobile API",
    "license": {
      "name": "MIT"
    },
    "description": "The Department of Veterans Affairs mobile API. All paths are relative to https://api.va.gov/mobile.\n"
  },
  "servers": [
    {
      "url": "https://api.va.gov/mobile"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "description": "Returns a welcome message.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointDiscovery"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "/"
      },
      "post": {
        "description": "Returns urls for app use based on app build number, environment, and OS",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscoveryRequest"
              }
            }
          },
          "description": "App build and environment info",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscoveryResponse"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "summary": "/"
      }
    },
    "/v0/appeal/{id}": {
      "get": {
        "description": "Returns info on all user's claims and appeals for mobile overview page. Should be identical to the following docs https://developer.va.gov/explore/api/appeals-status/docs?version=current",
        "parameters": [
          {
            "description": "Appeal Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Docket 1": {
                    "value": {
                      "data": {
                        "type": "appeal",
                        "id": "3294289",
                        "attributes": {
                          "appealIds": [
                            "3294289"
                          ],
                          "active": true,
                          "alerts": [
                            {
                              "type": "form9_needed",
                              "details": "object"
                            }
                          ],
                          "aod": null,
                          "aoj": "vba",
                          "description": "1 insurance issue",
                          "docket": {
                            "month": "2015-10-01",
                            "docketMonth": "2014-11-01",
                            "front": false,
                            "total": 212814,
                            "ahead": 81703,
                            "ready": 17071,
                            "eta": {
                              "directReview": "2020-02-01",
                              "evidenceSubmission": "2024-04-01",
                              "hearingRequest": "2024-04-01"
                            }
                          },
                          "events": [
                            {
                              "type": "sc_request",
                              "date": "2023-02-02"
                            }
                          ],
                          "evidence": null,
                          "incompleteHistory": true,
                          "issues": [
                            {
                              "active": true,
                              "lastAction": null,
                              "description": "Bronicial asthma",
                              "diagnosticCode": "6602"
                            }
                          ],
                          "location": "aoj",
                          "programArea": "insurance",
                          "status": {
                            "details": "object",
                            "type": "pending_certification_ssoc"
                          },
                          "type": "legacyAppeal",
                          "updated": "2018-01-19T10:20:42-05:00"
                        }
                      }
                    }
                  },
                  "Docket 2": {
                    "value": {
                      "data": {
                        "type": "appeal",
                        "id": "3294289",
                        "attributes": {
                          "appealIds": [
                            "3294289"
                          ],
                          "active": true,
                          "alerts": [
                            {
                              "type": "form9_needed",
                              "details": "object"
                            }
                          ],
                          "aod": null,
                          "aoj": "vba",
                          "description": "1 insurance issue",
                          "docket": {
                            "type": "evidenceSubmission",
                            "month": "2019-04-01",
                            "switchDueDate": "2020-03-20",
                            "eligibleToSwitch": true
                          },
                          "events": [
                            {
                              "type": "sc_request",
                              "date": "2023-02-02"
                            }
                          ],
                          "evidence": null,
                          "incompleteHistory": true,
                          "issues": [
                            {
                              "active": true,
                              "lastAction": null,
                              "description": "Bronicial asthma",
                              "diagnosticCode": "6602"
                            }
                          ],
                          "location": "aoj",
                          "programArea": "insurance",
                          "status": {
                            "details": "object",
                            "type": "pending_certification_ssoc"
                          },
                          "type": "legacyAppeal",
                          "updated": "2018-01-19T10:20:42-05:00"
                        }
                      }
                    }
                  },
                  "Empty Docket": {
                    "value": {
                      "data": {
                        "type": "appeal",
                        "id": "3294289",
                        "attributes": {
                          "appealIds": [
                            "3294289"
                          ],
                          "active": true,
                          "alerts": [
                            {
                              "type": "form9_needed",
                              "details": "object"
                            }
                          ],
                          "aod": null,
                          "aoj": "vba",
                          "description": "1 insurance issue",
                          "docket": {},
                          "events": [
                            {
                              "type": "sc_request",
                              "date": "2023-02-02"
                            }
                          ],
                          "evidence": null,
                          "incompleteHistory": true,
                          "issues": [
                            {
                              "active": true,
                              "lastAction": null,
                              "description": "Bronicial asthma",
                              "diagnosticCode": "6602"
                            }
                          ],
                          "location": "aoj",
                          "programArea": "insurance",
                          "status": {
                            "details": "object",
                            "type": "pending_certification_ssoc"
                          },
                          "type": "legacyAppeal",
                          "updated": "2018-01-19T10:20:42-05:00"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Appeal"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/appeal/{id}"
      }
    },
    "/v0/appointments": {
      "get": {
        "description": "Given a date range returns a list of upcoming VA, Community Care, and Express Care appointments. If start and end date ranges are not passed in then it defaults to - 1 year and + 1 year from the beginning of today's UTC date. Requesting a page out of bounds will return an empty list.",
        "parameters": [
          {
            "description": "The start date for the range of appointments in ISO 8601 UTC format",
            "example": "2020-10-29T07:00:00Z",
            "in": "query",
            "name": "startDate",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The end date for the range of appointments in ISO 8601 UTC format",
            "example": "2021-11-29T08:00:00Z",
            "in": "query",
            "name": "endDate",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The page number requested. Defaults to 1.",
            "example": 1,
            "in": "query",
            "name": "page[number]",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of records to return per page. Defaults to 10.",
            "example": 10,
            "in": "query",
            "name": "page[size]",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Whether or not to use this API's cache or fetch records from the upstream service",
            "example": true,
            "in": "query",
            "name": "useCache",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Field to sort the appointments list by. Currently only supports `startDateUtc`. Prefixing `-` reverses the sort.",
            "example": "-startDateUtc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Field to include pending appointments. Currently only supports value `pending`. Redundant with field `included[]` for backwards compatibility but `include` is the correct one to use when following conventions.",
            "example": "pending",
            "in": "query",
            "name": "include[]",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field to include pending appointments. Currently only supports value `pending`. Redundant with field `include[]` for backwards compatibility but `include` is the correct one to use when following conventions.",
            "example": "pending",
            "in": "query",
            "name": "included[]",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Community Care Appointment": {
                    "value": {
                      "data": [
                        {
                          "type": "appointment",
                          "id": "68254",
                          "attributes": {
                            "appointmentType": "COMMUNITY_CARE",
                            "appointmentIen": null,
                            "cancelId": null,
                            "comment": "Please arrive 20 minutes before the start of your appointment",
                            "healthcareProvider": "John Smith",
                            "healthcareService": null,
                            "location": {
                              "name": "Kaiser Shoreline Treatment Center",
                              "address": {
                                "street": "191 Argonne Ave, Ste 3",
                                "city": "Long Beach",
                                "state": "CA",
                                "zipCode": "90803"
                              },
                              "lat": 33.7700504,
                              "long": -118.1937395,
                              "phone": {
                                "areaCode": "562",
                                "number": "434-6008",
                                "extension": null
                              },
                              "url": null,
                              "code": null
                            },
                            "physicalLocation": null,
                            "minutesDuration": 60,
                            "phoneOnly": false,
                            "startDateLocal": "2019-04-20T14:15:00.000-04:00",
                            "startDateUtc": "2019-04-20T18:15:00.000Z",
                            "status": "CANCELLED",
                            "statusDetail": null,
                            "timeZone": "America/Los_Angeles",
                            "vetextId": null,
                            "reason": "Follow-up/Routine: Reason 1",
                            "is_covid_vaccine": false,
                            "is_pending": false,
                            "proposed_times": null,
                            "type_of_care": null,
                            "patient_phone_number": null,
                            "patient_email": null,
                            "best_time_to_call": null,
                            "friendly_location_name": null
                          }
                        }
                      ],
                      "meta": {
                        "upcomingAppointmentsCount": 1,
                        "upcomingDaysLimit": 7
                      }
                    }
                  },
                  "VA Appointment": {
                    "value": {
                      "data": [
                        {
                          "type": "appointment",
                          "id": "167525",
                          "attributes": {
                            "appointmentType": "va",
                            "appointmentIen": "17586",
                            "cancelId": "MzA4OzIwMjAxMTAzLjA5MDAwMDs0NDI7Q0hZIFBDIEtJTFBBVFJJQ0s=",
                            "comment": "Please arrive 20 minutes before the start of your appointment",
                            "healthcareProvider": null,
                            "healthcareService": null,
                            "location": {
                              "name": "VA Long Beach Healthcare System",
                              "address": {
                                "street": "5901 East 7th Street, Building 166",
                                "city": "Long Beach",
                                "state": "CA",
                                "zipCode": "90822"
                              },
                              "lat": 33.7700504,
                              "long": -118.1937395,
                              "phone": {
                                "areaCode": "562",
                                "number": "826-8000",
                                "extension": "5696"
                              },
                              "url": null,
                              "code": null
                            },
                            "physicalLocation": "Blind Rehabilitation Center",
                            "minutesDuration": 60,
                            "phoneOnly": false,
                            "startDateLocal": "2019-04-20T14:15:00.000-04:00",
                            "startDateUtc": "2019-04-20T18:15:00.000Z",
                            "status": "CANCELLED",
                            "statusDetail": "CANCELLED BY PATIENT",
                            "timeZone": "America/Los_Angeles",
                            "vetextId": "308;20210106.140000",
                            "reason": "Follow-up/Routine: Reason 1",
                            "is_covid_vaccine": false,
                            "is_pending": false,
                            "proposed_times": null,
                            "type_of_care": null,
                            "patient_phone_number": null,
                            "patient_email": null,
                            "best_time_to_call": null,
                            "friendly_location_name": null
                          }
                        }
                      ],
                      "meta": {
                        "upcomingAppointmentsCount": 1,
                        "upcomingDaysLimit": 7
                      }
                    }
                  },
                  "VA Video Connect ATLAS Appointment": {
                    "value": {
                      "data": [
                        {
                          "type": "appointment",
                          "id": "167525",
                          "attributes": {
                            "appointmentType": "VA_VIDEO_CONNECT_ATLAS",
                            "appointmentIen": null,
                            "cancelId": "MzA4OzIwMjAxMTAzLjA5MDAwMDs0NDI7Q0hZIFBDIEtJTFBBVFJJQ0s=",
                            "comment": "Please log on 5 minutes before the start of your appointment",
                            "healthcareProvider": null,
                            "healthcareService": null,
                            "location": {
                              "name": "VA Long Beach Healthcare System",
                              "address": {
                                "street": "5901 East 7th Street, Building 165",
                                "city": "Long Beach",
                                "state": "CA",
                                "zipCode": "90822"
                              },
                              "lat": null,
                              "long": null,
                              "phone": {
                                "areaCode": "562",
                                "number": "826-8000",
                                "extension": null
                              },
                              "url": null,
                              "code": "GL45678"
                            },
                            "physicalLocation": null,
                            "minutesDuration": 60,
                            "phoneOnly": false,
                            "startDateLocal": "2019-04-20T14:15:00.000-04:00",
                            "startDateUtc": "2019-04-20T18:15:00.000Z",
                            "status": "BOOKED",
                            "statusDetail": null,
                            "timeZone": "America/Los_Angeles",
                            "vetextId": "308;20210106.140000",
                            "reason": "Follow-up/Routine: Reason 1",
                            "is_covid_vaccine": false,
                            "is_pending": false,
                            "proposed_times": null,
                            "type_of_care": null,
                            "patient_phone_number": null,
                            "patient_email": null,
                            "best_time_to_call": null,
                            "friendly_location_name": null
                          }
                        }
                      ],
                      "meta": {
                        "upcomingAppointmentsCount": 1,
                        "upcomingDaysLimit": 7
                      }
                    }
                  },
                  "VA Video Connect Appointment": {
                    "value": {
                      "data": [
                        {
                          "type": "appointment",
                          "id": "167525",
                          "attributes": {
                            "appointmentType": "VA_VIDEO_CONNECT_HOME",
                            "appointmentIen": "123456",
                            "cancelId": "MzA4OzIwMjAxMTAzLjA5MDAwMDs0NDI7Q0hZIFBDIEtJTFBBVFJJQ0s=",
                            "comment": "Please log on 5 minutes before the start of your appointment",
                            "healthcareProvider": null,
                            "healthcareService": null,
                            "location": {
                              "name": null,
                              "address": null,
                              "lat": null,
                              "long": null,
                              "phone": null,
                              "url": "https://care2.evn.va.gov/vvc-app/?join=1&media=1&escalate=1&conference=VVC8275247@care2.evn.va.gov&pin=3242949390#",
                              "code": null
                            },
                            "physicalLocation": null,
                            "minutesDuration": 60,
                            "phoneOnly": false,
                            "startDateLocal": "2019-04-20T14:15:00.000-04:00",
                            "startDateUtc": "2019-04-20T18:15:00.000Z",
                            "status": "CANCELLED",
                            "statusDetail": "CANCELLED BY PATIENT",
                            "timeZone": "America/Los_Angeles",
                            "vetextId": "308;20210106.140000",
                            "reason": "Follow-up/Routine: Reason 1",
                            "is_covid_vaccine": false,
                            "is_pending": false,
                            "proposed_times": null,
                            "type_of_care": null,
                            "patient_phone_number": null,
                            "patient_email": null,
                            "best_time_to_call": null,
                            "friendly_location_name": null
                          }
                        }
                      ],
                      "meta": {
                        "upcomingAppointmentsCount": 1,
                        "upcomingDaysLimit": 7
                      }
                    }
                  },
                  "Community Care Appointment Request": {
                    "value": {
                      "data": [
                        {
                          "type": "appointment",
                          "id": "68254",
                          "attributes": {
                            "appointmentType": "VA",
                            "appointmentIen": "12384",
                            "cancelId": null,
                            "comment": null,
                            "healthcareProvider": null,
                            "healthcareService": null,
                            "location": {
                              "id": "442",
                              "name": "Cheyenne VA Medical Center",
                              "address": {
                                "street": "2360 East Pershing Boulevard",
                                "city": "Cheyenne",
                                "state": "WY",
                                "zipCode": "82001-5356"
                              },
                              "lat": 41.148027,
                              "long": -104.7862575,
                              "phone": {
                                "areaCode": "307",
                                "number": "778-7550",
                                "extension": null
                              },
                              "url": null,
                              "code": null
                            },
                            "physicalLocation": null,
                            "minutesDuration": null,
                            "phoneOnly": false,
                            "startDateLocal": "2020-11-02T01:00:00.000-07:00",
                            "startDateUtc": "2020-11-02T08:00:00.000Z",
                            "status": "SUBMITTED",
                            "statusDetail": null,
                            "timeZone": "America/Denver",
                            "vetextId": null,
                            "reason": "New Issue",
                            "is_covid_vaccine": null,
                            "is_pending": true,
                            "proposed_times": [
                              {
                                "date": "10/01/2020",
                                "time": "PM"
                              },
                              {
                                "date": "11/03/2020",
                                "time": "AM"
                              },
                              {
                                "date": "11/02/2020",
                                "time": "AM"
                              }
                            ],
                            "type_of_care": "Primary Care",
                            "patient_phone_number": "(666) 666-6666",
                            "patient_email": "Vilasini.reddy@va.gov",
                            "best_time_to_call": [
                              "Morning"
                            ],
                            "friendly_location_name": "DAYTSHR -Dayton VA Medical Center"
                          }
                        }
                      ],
                      "meta": {
                        "upcomingAppointmentsCount": 1,
                        "upcomingDaysLimit": 7
                      }
                    }
                  },
                  "VA Appointment Request": {
                    "value": {
                      "data": [
                        {
                          "type": "appointment",
                          "id": "167525",
                          "attributes": {
                            "appointmentType": "COMMUNITY_CARE",
                            "appointmentIen": null,
                            "cancelId": null,
                            "comment": null,
                            "healthcareProvider": "Vilasini Reddy",
                            "healthcareService": null,
                            "location": {
                              "id": null,
                              "name": "Test clinic 2",
                              "address": {
                                "street": "123 Sesame St.",
                                "city": "Cheyenne",
                                "state": "VA",
                                "zipCode": "20171"
                              },
                              "lat": null,
                              "long": null,
                              "phone": {
                                "areaCode": "703",
                                "number": "652-0000",
                                "extension": null
                              },
                              "url": null,
                              "code": null
                            },
                            "physicalLocation": null,
                            "minutesDuration": null,
                            "phoneOnly": false,
                            "startDateLocal": "2020-10-01T06:00:00.000-06:00",
                            "startDateUtc": "2020-10-01T12:00:00.000Z",
                            "status": "CANCELLED",
                            "statusDetail": "CANCELLED BY CLINIC",
                            "timeZone": "America/Denver",
                            "vetextId": null,
                            "reason": "routine-follow-up",
                            "is_covid_vaccine": null,
                            "is_pending": true,
                            "proposed_times": [
                              {
                                "date": "10/02/2020",
                                "time": "PM"
                              },
                              {
                                "date": "10/01/2020",
                                "time": "PM"
                              },
                              {
                                "date": "nil",
                                "time": "nil"
                              }
                            ],
                            "type_of_care": "Optometry (routine eye exam)",
                            "patient_phone_number": "(703) 652-0000",
                            "patient_email": "samatha.girla@va.gov",
                            "best_time_to_call": [
                              "Afternoon",
                              "Evening",
                              "Morning"
                            ],
                            "friendly_location_name": "CHYSHR-Cheyenne VA Medical Center"
                          }
                        }
                      ],
                      "meta": {
                        "upcomingAppointmentsCount": 1,
                        "upcomingDaysLimit": 7
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Appointments"
                }
              }
            },
            "description": "OK"
          },
          "207": {
            "content": {
              "application/json": {
                "examples": {
                  "Partial Appointments": {
                    "description": "For cases when 1 or more errors are returned from upstream, an error message with source `VA Service` is added within the meta",
                    "value": {
                      "data": [
                        {
                          "type": "appointment",
                          "id": "167525",
                          "attributes": {
                            "appointmentType": "va",
                            "appointmentIen": "17937",
                            "cancelId": "MzA4OzIwMjAxMTAzLjA5MDAwMDs0NDI7Q0hZIFBDIEtJTFBBVFJJQ0s=",
                            "comment": "Please arrive 20 minutes before the start of your appointment",
                            "healthcareProvider": null,
                            "healthcareService": null,
                            "location": {
                              "name": "VA Long Beach Healthcare System",
                              "address": {
                                "street": "5901 East 7th Street, Building 166",
                                "city": "Long Beach",
                                "state": "CA",
                                "zipCode": "90822"
                              },
                              "lat": 33.7700504,
                              "long": -118.1937395,
                              "phone": {
                                "areaCode": "562",
                                "number": "826-8000",
                                "extension": "5696"
                              },
                              "url": null,
                              "code": null
                            },
                            "physicalLocation": "Blind Rehabilitation Center",
                            "minutesDuration": 60,
                            "phoneOnly": false,
                            "startDateLocal": "2019-04-20T14:15:00.000-04:00",
                            "startDateUtc": "2019-04-20T18:15:00.000Z",
                            "status": "CANCELLED",
                            "statusDetail": "CANCELLED BY PATIENT",
                            "timeZone": "America/Los_Angeles",
                            "vetextId": "308;20210106.140000",
                            "reason": "Follow-up/Routine: Reason 1",
                            "is_covid_vaccine": false,
                            "is_pending": false,
                            "proposed_times": null,
                            "type_of_care": null,
                            "patient_phone_number": null,
                            "patient_email": null,
                            "best_time_to_call": null,
                            "friendly_location_name": null
                          }
                        }
                      ],
                      "meta": {
                        "errors": [
                          {
                            "source": "VA Service"
                          }
                        ],
                        "upcomingAppointmentsCount": 1,
                        "upcomingDaysLimit": 7
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Appointments"
                }
              }
            },
            "description": "Multi Status"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "content": {
              "application/json": {
                "examples": {
                  "Missing Facilities": {
                    "value": {
                      "errors": [
                        {
                          "title": "Forbidden",
                          "detail": "No facility associated with user",
                          "code": "403",
                          "status": "403"
                        }
                      ]
                    }
                  },
                  "No VAOS Access": {
                    "value": {
                      "errors": [
                        {
                          "title": "Forbidden",
                          "detail": "You do not have access to online scheduling",
                          "code": "403",
                          "status": "403"
                        }
                      ]
                    }
                  },
                  "No ICN": {
                    "value": {
                      "errors": [
                        {
                          "title": "Forbidden",
                          "detail": "No patient ICN found",
                          "code": "403",
                          "status": "403"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/appointments"
      }
    },
    "/v0/appointments/cancel/{cancelId}": {
      "put": {
        "description": "Cancel an appointment by cancelId. Note only VA appointments can be cancelled online and some VA facilities do not support online cancellation. Only appointments that can be cancelled will have a cancelId.",
        "parameters": [
          {
            "description": "The cancel ID hash from an appointment returned in the GET appointments endpoint.",
            "in": "path",
            "name": "cancelId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/appointments/cancel/{cancelId}"
      }
    },
    "/v0/appointments/check-in": {
      "post": {
        "description": "Check into an appointment.",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "appointmentIEN": {
                    "type": "string"
                  },
                  "locationId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentCheckin"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentCheckinErrors400"
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentCheckinErrors500"
                }
              }
            },
            "description": "An internal API error occurred."
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/appointments/check-in"
      }
    },
    "/v0/appointments/check-in/demographics": {
      "get": {
        "description": "Retrieves demographics confirmation information which includes a field indicating if insurance verification is needed, patient contact information, emergency contact information and next-of-kin contact information.",
        "parameters": [
          {
            "description": "Unique location identifier",
            "in": "query",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentCheckinDemographics"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/appointments/check-in/demographics"
      },
      "patch": {
        "description": "Edit demographics confirmations.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "locationId": {
                    "type": "string"
                  },
                  "demographicConfirmations": {
                    "type": "object",
                    "required": [
                      "contactNeedsUpdate",
                      "emergencyContactNeedsUpdate",
                      "nextOfKinNeedsUpdate"
                    ],
                    "properties": {
                      "contactNeedsUpdate": {
                        "type": "boolean",
                        "example": false
                      },
                      "emergencyContactNeedsUpdate": {
                        "type": "boolean",
                        "example": false
                      },
                      "nextOfKinNeedsUpdate": {
                        "type": "boolean",
                        "example": false
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentCheckinDemographicsPatch"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/appointments/check-in/demographics"
      }
    },
    "/v0/appointments/community_care/eligibility/{service_type}": {
      "get": {
        "description": "Checks if user is eligible to make an appointment with Community Care for a type of service. Checks if user is registered at a site that is marked as accepting community care requests and community care eligibility api says that they're eligible for the type of care they chose",
        "parameters": [
          {
            "description": "Type of service to check eligibility for. Can only be one of following options primaryCare, nutrition, podiatry, optometry, audiology.",
            "in": "path",
            "name": "serviceType",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityCaresEligibility"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/appointments/community_care/eligibility/{service_type}"
      }
    },
    "/v0/appointments/facility/eligibility": {
      "get": {
        "description": "Checks if a list of facilities if they are eligible to create a appointment request to provide the given type of service at the facility.",
        "parameters": [
          {
            "description": "Type of service to check eligibility for.",
            "in": "path",
            "name": "serviceType",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "amputation",
                "audiology",
                "covid",
                "optometry",
                "outpatientMentalHealth",
                "moveProgram",
                "foodAndNutrition",
                "clinicalPharmacyPrimaryCare",
                "primaryCare",
                "homeSleepTesting",
                "socialWork",
                "cpap",
                "ophthalmology"
              ]
            }
          },
          {
            "description": "List of facility ids",
            "in": "path",
            "name": "FacilityIds[]",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "type of appointment. Can either be 'request' or 'direct' but only request will be used until direct scheduling functionality is built out",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The page number requested. Defaults to 1.",
            "example": 2,
            "in": "query",
            "name": "page[number]",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of records to return per page. Defaults to 3.",
            "example": 10,
            "in": "query",
            "name": "page[size]",
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FacilityEligibilities"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/appointments/facility/eligibility"
      }
    },
    "/v0/appointments/facilities/{facility_id}/clinics": {
      "get": {
        "description": "Returns all available clinics at a facility for a given type of service.",
        "parameters": [
          {
            "description": "Facility ID",
            "in": "path",
            "name": "facility_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "436GC"
            }
          },
          {
            "description": "Service Type",
            "in": "query",
            "name": "service_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "amputation",
                "audiology",
                "covid",
                "optometry",
                "outpatientMentalHealth",
                "moveProgram",
                "foodAndNutrition",
                "clinicalPharmacyPrimaryCare",
                "primaryCare",
                "homeSleepTesting",
                "socialWork",
                "cpap",
                "ophthalmology"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FacilityClinics"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/appointments/facilities/{facility_id}/clinics"
      }
    },
    "/v0/appointments/facilities/{facility_id}/clinics/{clinic_id}/slots": {
      "get": {
        "description": "Accepts date range for a clinic at a va facility and returns available slots for a a direct schedule appointment.",
        "parameters": [
          {
            "description": "The start date for the range of appointments slots in ISO 8601 UTC format. If not provided the start date will be considered now.",
            "example": "2020-10-29T07:00:00Z",
            "in": "query",
            "name": "startDate",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The end date for the range of appointments slots in ISO 8601 UTC format. If not provided the end date will be 2 months from today's date",
            "example": "2021-11-29T08:00:00Z",
            "in": "query",
            "name": "endDate",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClinicSlots"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/appointments/facilities/{facility_id}/clinics/{clinic_id}/slots"
      }
    },
    "/v0/appointments/facilities/{facility_id}/slots": {
      "get": {
        "description": "Accepts date range for a va facility and returns available slots for a a direct schedule appointment.",
        "parameters": [
          {
            "description": "The start date for the range of appointments slots in ISO 8601 UTC format. If not provided the start date will be considered now.",
            "example": "2020-10-29T07:00:00Z",
            "in": "query",
            "name": "startDate",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The end date for the range of appointments slots in ISO 8601 UTC format. If not provided the end date will be 2 months from today's date",
            "example": "2021-11-29T08:00:00Z",
            "in": "query",
            "name": "endDate",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The facility division ID",
            "in": "path",
            "required": true,
            "name": "location_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The clinic IEN. Required if clinical_service not provided.",
            "in": "query",
            "required": false,
            "name": "clinic_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The clinical service (type of care) to find appointment slots for. Required if clinic_id not provided.",
            "in": "query",
            "required": false,
            "name": "clinical_service",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClinicSlots"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/appointments/facilities/{facility_id}/clinics/{clinic_id}/slots"
      }
    },
    "/v0/appointments/preferences": {
      "get": {
        "description": "Returns VAOS appointment contact preferences",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentPreferences"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/appointments/preferences"
      },
      "put": {
        "description": "updates VAOS appointment preferences",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentPreferencesRequest"
              }
            }
          },
          "description": "Preferences data to update",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentPreferences"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/appointments/preferences"
      }
    },
    "/v0/appointments/va/eligibility": {
      "get": {
        "description": "Lists types of service. For each type of service, lists users registered facilities that support request and direct appointments.",
        "parameters": [
          {
            "description": "Array of facilities to be checked for service eligibility",
            "in": "query",
            "name": "FacilityIds[]",
            "required": true,
            "schema": {
              "type": "array"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceEligibilities"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/appointments/va/eligibility"
      }
    },
    "/v0/appointment": {
      "post": {
        "description": "Creates a new appointment or appointment request.",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateAppointmentCC"
                  },
                  {
                    "$ref": "#/components/schemas/CreateAppointmentRequest"
                  },
                  {
                    "$ref": "#/components/schemas/CreateAppointmentDirect"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "required": [
                        "id",
                        "type",
                        "attributes"
                      ],
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Upstream identifier. Appointment id."
                        },
                        "type": {
                          "type": "string"
                        },
                        "attributes": {
                          "$ref": "#/components/schemas/NewAppointment"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/appointment"
      }
    },
    "/v0/awards": {
      "get": {
        "description": "Get current awards overview",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Awards"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/awards"
      }
    },
    "/v0/claim/{id}": {
      "get": {
        "description": "Returns info on all user's claims and appeals for mobile overview page",
        "parameters": [
          {
            "description": "Claim Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Claim"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/claim/{id}"
      }
    },
    "/v0/claim/{id}/documents": {
      "post": {
        "description": "Post tracked item document for upload, returns jobId for upload process",
        "parameters": [
          {
            "description": "Claim Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "encoding": {
                "file": {
                  "contentType": "image/png, image/jpeg, image/gif, image/jpg, image/bmp, text/plain, application/pdf"
                }
              },
              "schema": {
                "properties": {
                  "documentType": {
                    "type": "string"
                  },
                  "file": {
                    "format": "binary",
                    "type": "string"
                  },
                  "password": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "trackedItemId": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimDocUpload"
                }
              }
            },
            "description": "Accepted"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/claim/{id}/documents"
      }
    },
    "/v0/claim/{id}/documents/multi-image": {
      "post": {
        "description": "Post multiple images to be combined into one pdf for upload, returns jobId for upload process",
        "parameters": [
          {
            "description": "Claim Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimUploadRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimDocUpload"
                }
              }
            },
            "description": "Accepted"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/claim/{id}/documents/multi-image"
      }
    },
    "/v0/claim/{id}/request-decision": {
      "post": {
        "description": "Request decision on a given claim, returns job id",
        "parameters": [
          {
            "description": "Claim Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimDocUpload"
                }
              }
            },
            "description": "Accepted"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/claim/{id}/request-decision"
      }
    },
    "/v0/claims/decision-letters": {
      "get": {
        "description": "Returns the list of claim decision letters for given user",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecisionLetters"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/claims/decision-letters"
      }
    },
    "/v0/claims/decision-letters/{document_id}/download": {
      "get": {
        "description": "Downloads a decision letter",
        "parameters": [
          {
            "description": "id of the document being downloaded",
            "in": "path",
            "name": "document_id",
            "required": true
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/claims/decision-letters/{document_id}/download"
      }
    },
    "/v0/claims/pre-need-burial": {
      "post": {
        "description": "Submits a new Preneeds Burial application.",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePreneedBurial"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePreneedBurialResponse"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/claims/pre-need-burial"
      }
    },
    "/v0/claims/pre-need-burial/cemeteries": {
      "get": {
        "description": "Returns info on all cemeteries for preneed burial",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreneedBurial"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/claims/pre-need-burial/cemeteries"
      }
    },
    "/v0/claims-and-appeals-overview": {
      "get": {
        "description": "Returns info on all user's claims and appeals for mobile overview page",
        "parameters": [
          {
            "description": "The start date for the range of appointments in ISO 8601 UTC format. If not provided the start date will be considered Jan. 1st 1700.",
            "example": "2020-10-29T07:00:00Z",
            "in": "query",
            "name": "startDate",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The end date for the range of appointments in ISO 8601 UTC format. If not provided the end date will be 1 year from today's date",
            "example": "2021-11-29T08:00:00Z",
            "in": "query",
            "name": "endDate",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The page number requested. Defaults to 1.",
            "example": 2,
            "in": "query",
            "name": "page[number]",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of records to return per page. Defaults to 10.",
            "example": 10,
            "in": "query",
            "name": "page[size]",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "true will return only completed records, false will show only open records, not including the parameter will return all records regardless of completed status",
            "example": true,
            "in": "query",
            "name": "showCompleted",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Whether or not to use this API's cache or fetch records from the upstream service",
            "example": true,
            "in": "query",
            "name": "useCache",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Appeal": {
                    "value": {
                      "data": [
                        {
                          "type": "appeal",
                          "id": "1196201",
                          "attributes": {
                            "subtype": "legacyAppeal",
                            "completed": true,
                            "dateFiled": "2003-01-06",
                            "updatedAt": "2003-09-30",
                            "displayTitle": "disability compensation appeal",
                            "decisionLetterSent": false,
                            "phase": null,
                            "documentsNeeded": null,
                            "developmentLetterSent": null,
                            "claimTypeCode": null
                          }
                        }
                      ],
                      "meta": {
                        "errors": [],
                        "pagination": {
                          "currentPage": 1,
                          "perPage": 60,
                          "totalPages": 1,
                          "totalEntries": 11
                        },
                        "activeClaimsCount": 7
                      }
                    }
                  },
                  "Claim": {
                    "value": {
                      "data": [
                        {
                          "type": "claim",
                          "id": "600117255",
                          "attributes": {
                            "subtype": "Compensation",
                            "completed": false,
                            "dateFiled": "2020-01-01",
                            "updatedAt": "2020-01-01",
                            "displayTitle": "Compensation",
                            "decisionLetterSent": false,
                            "phase": 1,
                            "documentsNeeded": true,
                            "developmentLetterSent": false,
                            "claimTypeCode": "020NEW"
                          }
                        }
                      ],
                      "meta": {
                        "errors": [],
                        "pagination": {
                          "currentPage": 1,
                          "perPage": 60,
                          "totalPages": 1,
                          "totalEntries": 11
                        },
                        "activeClaimsCount": 7
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ClaimsAndAppealsOverview"
                }
              }
            },
            "description": "OK"
          },
          "207": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ClaimsAndAppealsOverviewClaimsError"
                    },
                    {
                      "$ref": "#/components/schemas/ClaimsAndAppealsOverviewAppealsError"
                    }
                  ]
                }
              }
            },
            "description": "One of the two upstream services failed"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/claims-and-appeals-overview"
      }
    },
    "/v0/community-care-providers": {
      "get": {
        "description": "Returns a list of community care providers who provide the requested medical specialty within a certain radius of the user (default) or facility (if facility id is provided in query params).",
        "parameters": [
          {
            "description": "The medical specialty the user is searching for formatted in camel case. Must be one of primaryCare, foodAndNutrition, podiatry, optometry, audiologyRoutineExam, audiologyHearingAidSupport.",
            "example": "primaryCare",
            "in": "query",
            "name": "serviceType",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Optional facility id. When provided, we search for CC providers near the facility. When omitted, we search for CC providers near the user's home address.",
            "example": "978",
            "in": "query",
            "name": "facilityId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The page number requested. Defaults to 1.",
            "example": 1,
            "in": "query",
            "name": "page[number]",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of records to return per page. Defaults to 10.",
            "example": 10,
            "in": "query",
            "name": "page[size]",
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityCareProviders"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "103",
                      "detail": "\"whatever you entered\" is not a valid value for \"serviceType\"",
                      "status": "400",
                      "title": "Invalid field value"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/community-care-providers"
      }
    },
    "/v0/debts": {
      "get": {
        "description": "Returns a list of user's debts.",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Debts"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/debts"
      }
    },
    "/v0/debts/{id}": {
      "get": {
        "description": "Returns a users debt by id.",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Debt"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/debts/{id}"
      }
    },
    "/v0/dependents": {
      "get": {
        "description": "Returns a list of user's dependents. Dependent SSN is also available but is removed to limit PII exposure.",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dependents"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/dependents"
      },
      "post": {
        "description": "Submit a supplemental claim for compensation (21-686C & 21-674).",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDependents"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDependentsResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/dependents"
      }
    },
    "/v0/dependents/request-decisions": {
      "get": {
        "description": "Returns the list of dependents verifications and diaries",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DependentsRequestDecisions"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/dependents/request-decisions"
      }
    },
    "/v0/disability-rating": {
      "get": {
        "description": "Returns the list of disability ratings for given user",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisabilityRating"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "timestamp": "2023-02-13T17:38:36.551+00:00",
                      "status": "400",
                      "error": "Bad Request",
                      "path": "/veteran_verification/v2/disability_rating",
                      "code": "400",
                      "title": "Common::Exceptions::BadRequest",
                      "detail": "Bad Request"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/LighthouseErrors"
                }
              }
            },
            "description": "Bad request. Server can't understand request."
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "status": "401",
                      "error": "Invalid Token.",
                      "path": "/veteran_verification/v2/disability_rating",
                      "code": "401",
                      "title": "Common::Exceptions::Unauthorized",
                      "detail": "Invalid Token."
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/LighthouseErrors"
                }
              }
            },
            "description": "Authentication is possible but has failed or not yet been provided."
          },
          "403": {
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "status": "403",
                      "error": "Token not granted requested scope.",
                      "path": "/veteran_verification/v2/disability_rating",
                      "code": "403",
                      "title": "Common::Exceptions::Forbidden",
                      "detail": "Token not granted requested scope."
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/LighthouseErrors"
                }
              }
            },
            "description": "Client was forbidden from upstream resource."
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "title": "Veteran not identifiable.",
                      "detail": "No data found for ICN.",
                      "code": "404",
                      "status": "404"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/LighthouseErrors"
                }
              }
            },
            "description": "The requested resource could not be found."
          },
          "405": {
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "status": "405",
                      "error": "Unknown.",
                      "path": "/veteran_verification/v2/disability_rating",
                      "code": "405",
                      "title": "Common::Exceptions::ServiceError",
                      "detail": "Unknown."
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/LighthouseErrors"
                }
              }
            },
            "description": "Failure in processing entity"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "413": {
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "message": "Request size limit exceeded",
                      "status": "413.",
                      "code": "413",
                      "title": "Common::Exceptions::PayloadTooLarge",
                      "detail": "Request size limit exceeded"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/LighthouseErrors"
                }
              }
            },
            "description": "Failure in processing entity"
          },
          "429": {
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "title": "Too Many Requests",
                      "detail": "The user has sent too many requests in a given amount of time",
                      "code": "429",
                      "status": "429"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/LighthouseErrors"
                }
              }
            },
            "description": "Too Many Requests"
          },
          "500": {
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "timestamp": "2023-02-13T17:38:36.551+00:00",
                      "status": "500",
                      "error": "Internal Server Error",
                      "path": "/veteran_verification/v2/disability_rating",
                      "code": "500",
                      "title": "Common::Exceptions::ExternalServerInternalServerError",
                      "detail": "Internal Server Error"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/LighthouseErrors"
                }
              }
            },
            "description": "An internal API error occurred."
          },
          "502": {
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "title": "Unexpected Response Body",
                      "detail": "EMIS service responded with something other than veteran status information.",
                      "code": "EMIS_STATUS502",
                      "status": "502"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/LighthouseErrors"
                }
              }
            },
            "description": "An upstream service the API depends on returned an error."
          },
          "503": {
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "title": "Error title",
                      "detail": "Detailed error message",
                      "code": "503",
                      "status": "503"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/LighthouseErrors"
                }
              }
            },
            "description": "An upstream service is unavailable, or its circuit breaker may have been tripped."
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/disability-rating"
      }
    },
    "/v0/efolder/documents": {
      "get": {
        "description": "Returns the user's list of documents in efolder",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Efolder"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/efolder/documents"
      }
    },
    "/v0/efolder/documents/{documentId}/download": {
      "post": {
        "description": "returns requested document",
        "parameters": [
          {
            "description": "File name of the document to be returned.",
            "in": "query",
            "name": "file_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the document to be returned.",
            "in": "path",
            "name": "document_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "{93631483-E9F9-44AA-BB55-3552376400D8}"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/efolder/documents/{documentId}/download"
      }
    },
    "/v0/enrollment-status": {
      "get": {
        "description": "Returns the user's VA enrollment status.",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrollmentStatus"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/enrollment-status"
      }
    },
    "/v0/facilities-info": {
      "get": {
        "description": "Retrieves facilities info for a user's va treatment facilities",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FacilitiesInfo"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/facilities-info"
      }
    },
    "/v0/facilities-info/{sort_method}": {
      "get": {
        "description": "Retrieves facilities info for all facilities a given user has the ability to schedule appointments at",
        "parameters": [
          {
            "description": "Sort method (Closest to home or current location, alphabetical, or by most recent appointment location) Note - When most recent appointment is selected any facility that doesn't appear in the user's appointments will be sorted alphabetically after those that do appear in the appointments list",
            "in": "path",
            "name": "sort_method",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "current",
                "home",
                "alphabetical",
                "appointments"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "description": "Lat Long for user's current location. Only required if sort method is current, but can be supplied anyway",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FacilitiesInfoRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FacilitiesInfo"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/facilities-info/{sort_method}"
      }
    },
    "/v0/financial-status-reports/download": {
      "post": {
        "description": "Returns financial status report PDF",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "413": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "Payload too large."
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/financial-status-reports/download"
      }
    },
    "/v0/health/immunizations": {
      "get": {
        "description": "Returns the list of immunization records for given user",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Immunizations"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/health/immunizations"
      }
    },
    "/v0/health/allergy-intolerances": {
      "get": {
        "description": "Retrieves a list of the user's known allergies related to medication, food, or other substances\n",
        "operationId": "list_allergy_intolerances",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllergyIntolerances"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "summary": "/v0/health/allergy-intolerances"
      }
    },
    "/v0/health/labs-and-tests": {
      "get": {
        "description": "List patient labs and tests. Each report contains a list of which tests were a part of the report, along with links to get the results for those tests.\n",
        "operationId": "list_labs_and_tests",
        "parameters": [
          {
            "description": "The category classifies the clinical discipline, department, or diagnostic service that created the report",
            "in": "query",
            "name": "category",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A code that indicates the type of information contained within the diagnostic report. Supported values are from the LOINC diagnostic report codes.",
            "in": "query",
            "name": "code",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A date or range of dates (maximum of 2) that describe the date that the diagnostic report was recorded. Supported formats are: YYYY, YYYY-MM, YYYY-MM-DD, YYYY-MM-DD'T'HH:MM:SSZ",
            "in": "query",
            "name": "date",
            "required": false,
            "schema": {
              "type": "datetime"
            }
          },
          {
            "description": "The status of the report.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "type": "datetime"
            }
          },
          {
            "description": "The date when the record was last updated. Supported formats are: YYYY, YYYY-MM, YYYY-MM-DD, YYYY-MM-DD'T'HH:MM:SSZ",
            "in": "query",
            "name": "lastUpdated",
            "required": false,
            "schema": {
              "type": "datetime"
            }
          },
          {
            "description": "The page number being requested.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of resources that should be returned in a single page. The maximum count size is 100. Defaults to 30.",
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LabsAndTests"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "summary": "/v0/health/labs-and-tests"
      }
    },
    "/v0/health/observations/{id}": {
      "get": {
        "description": "Gets an observation from a user's diagnostic report\n",
        "operationId": "get_observation",
        "parameters": [
          {
            "description": "id of observation",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Observation"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "summary": "/v0/health/observations/{id}"
      }
    },
    "/v0/health/locations/{id}": {
      "get": {
        "description": "Returns location info based on location id from vaccine record",
        "parameters": [
          {
            "description": "location id from immunization info",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Locations"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/health/locations/{id}"
      }
    },
    "/v0/health/rx/prescriptions": {
      "get": {
        "description": "Returns the users prescriptions.",
        "parameters": [
          {
            "description": "what field to sort array of prescriptions by. fields that can be sorted: prescription_id, refill_status, refill_submit_date, refill_date, facility_name, ordered_date, prescription_name, dispensed_date. date fields sort by DESC by default while all others default to ASC. To get the opposite sort direction negate the field with a '-'. EX: -prescription_id\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by field values. Syntax: ?filter[refill_status][eq]=refillinprocess. fields that can be filtered: prescription_id, refill_status, refill_submit_date, facility_name. eq can be switched out with not_eq. to filter by multiple values of the same field, deliminate the parameter value with commas. Syntax: ?filter[refill_status][eq]=refillinprocess,active\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The page number requested. Defaults to 1.",
            "example": 1,
            "in": "query",
            "name": "page[number]",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of records to return per page. Defaults to 10.",
            "example": 10,
            "in": "query",
            "name": "page[size]",
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Prescriptions"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "Record is locked by upstream server."
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/health/rx/prescriptions"
      }
    },
    "/v0/health/rx/prescriptions/refill": {
      "put": {
        "description": "Requests refill for prescriptions.",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefillPayload"
              }
            }
          },
          "description": "array of prescription ids to request refill",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrescriptionsRefill"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "Record is locked by upstream server."
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/health/rx/prescriptions/refill"
      }
    },
    "/v0/health/rx/prescriptions/{id}/tracking": {
      "get": {
        "description": "Requests list of tracking data for a prescription id",
        "parameters": [
          {
            "description": "id of the prescription tracking data is being requested for",
            "example": 13650545,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrescriptionTracking"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "Record is locked by upstream server."
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/health/rx/prescriptions/{id}/tracking"
      }
    },
    "/v0/letters": {
      "get": {
        "description": "Returns the list of letter names and types for the given user",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Letters"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "406": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "Not acceptable."
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "413": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "Payload too large."
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/letters"
      }
    },
    "/v0/letters/beneficiary": {
      "get": {
        "description": "Returns benefit info and options for the given user with or without a dependent",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LettersBeneficiaryInfo"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "406": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "Not acceptable."
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "413": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "Payload too large."
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/letters/beneficiary"
      }
    },
    "/v0/letters/{type}/download": {
      "post": {
        "description": "Returns requested letter for download. Downloads as either PDF or JSON, dependent upon format param. Defaults to PDF when format is not specified.",
        "parameters": [
          {
            "description": "letter type",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "benefit_summary",
                "benefit_summary_dependent",
                "benefit_verification",
                "certificate_of_eligibility",
                "civil_service",
                "commissary",
                "medicare_partd",
                "minimum_essential_coverage",
                "proof_of_service",
                "service_verification"
              ]
            }
          },
          {
            "description": "format",
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "pdf",
                "json"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LetterOptions"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Letter"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "413": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "Payload too large."
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/letters/{type}/download"
      }
    },
    "/v0/maintenance_windows": {
      "get": {
        "description": "List maintenance windows",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindows"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/maintenance_windows"
      }
    },
    "/v0/messaging/health/folders": {
      "get": {
        "description": "List available secure messaging folders",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          },
          {
            "description": "The page number requested",
            "example": 1,
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of records to return per page. Defaults to 100",
            "example": 10,
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Whether or not to use this API's cache or fetch records from the upstream service. Defaults to true.",
            "example": true,
            "in": "query",
            "name": "useCache",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecureMessagingFolders"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/messaging/health/folders"
      },
      "post": {
        "description": "Create a new secure messaging folder",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSecureMessagingFolder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSecureMessagingFolderResponse"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/messaging/health/folder"
      }
    },
    "/v0/messaging/health/folders/{id}": {
      "get": {
        "description": "Get a secure messaging folder",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecureMessagingFolder"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/messaging/health/folders/{id}"
      }
    },
    "/v0/messaging/health/folders/{id}/messages": {
      "get": {
        "description": "List messages in a secure messaging folder.\n\nWhen listing messages, the response for each message will include most but not all of the message attributes.\nSpecifically, the message body and attachment information is not included. Those attributes can be obtained by\ngetting the specific message resource.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          },
          {
            "description": "what field to sort array of messages by. fields that can be sorted:  sent_date, subject, sender_name, recipient_name. The date field sorts by descending order by default while all others default to ASC. To get the opposite sort direction negate the field with a '-'. EX: -recipient_name. Default sort field is sent_date.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by field values. Syntax: ?filter[sender_name][eq]=JOHN DEER. fields that can be filtered: sent_date, subject, sender_name, recipient_name. Available operators include 'eq' and 'not_eq'. Date fields can use operators 'lteq' and 'gteq' (less/greater than or equal). string fields can use 'match' operator for partial matching. String fields can also be filtered by multiple values of the same field, deliminate the parameter value with commas. Syntax: ?filter[sender_name][eq]=John Deer,John Smith\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The page number requested",
            "example": 1,
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of records to return per page. Defaults to 100",
            "example": 10,
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Whether or not to use this API's cache or fetch records from the upstream service. Defaults to true.",
            "example": true,
            "in": "query",
            "name": "useCache",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecureMessageList"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/messaging/health/folders/{id}/messages"
      }
    },
    "/v0/messaging/health/folders/{id}/threads": {
      "get": {
        "description": "List of threads in a secure messaging folder",
        "parameters": [
          {
            "description": "The id of the folder that threads are being retrieved from",
            "in": "path",
            "name": "folderId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The size of the pagination you want. Defaults to 10",
            "in": "query",
            "name": "pageSize,",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The page number to get based on your page size",
            "in": "query",
            "name": "page,",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The field to sort the results by",
            "in": "query",
            "name": "sortField,",
            "schema": {
              "type": "string",
              "enum": [
                "SENDER_NAME",
                "RECIPIENT_NAME",
                "SENT_DATE",
                "DRAFT_DATE"
              ]
            }
          },
          {
            "description": "The order to sort the results by",
            "in": "query",
            "name": "sortOrder,",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecureMessageThreadList"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "VA900",
                      "detail": "Operation failed",
                      "status": "400",
                      "title": "Operation failed"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "Folder does not exist"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/messaging/health/folders/{id}/threads"
      }
    },
    "/v0/messaging/health/message_drafts": {
      "post": {
        "description": "Save a new draft message",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecureMessageNewMessageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecureMessageNewMessageRequest"
                }
              }
            },
            "description": "Created"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/messaging/health/message_drafts"
      }
    },
    "/v0/messaging/health/message_drafts/{id}": {
      "put": {
        "description": "Update an existing draft message",
        "parameters": [
          {
            "description": "The id of the draft that is to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "body": "the updated message"
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/messaging/health/message_drafts/{id}"
      }
    },
    "/v0/messaging/health/message_drafts/{reply_id}/replydraft": {
      "post": {
        "description": "Save a new draft message as a reply to an existing message",
        "parameters": [
          {
            "description": "The id of the message that will be replied to",
            "in": "path",
            "name": "reply_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecureMessageNewMessageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecureMessageNewMessageRequest"
                }
              }
            },
            "description": "Created"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/messaging/health/message_drafts/{reply_id}/replydraft"
      }
    },
    "/v0/messaging/health/message_drafts/{reply_id}/replydraft/{draft_id}": {
      "post": {
        "description": "Edit a draft message that was a reply to an existing message",
        "parameters": [
          {
            "description": "The id of the message that will be replied to",
            "in": "path",
            "name": "reply_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of the draft that is to be updated",
            "in": "path",
            "name": "draft_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "body": "the updated message"
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/messaging/health/message_drafts/{reply_id}/replydraft/{draft_id}"
      }
    },
    "/v0/messaging/health/messages": {
      "post": {
        "description": "Send a new secure message",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecureMessageNewMessageRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "message": {
                    "description": "Stringified JSON with same parameters as if this was an application/json request (e.g. '{'category\":\"OTHER\",\"recipient_id\":1763526,\"body\":\"test message\"}')",
                    "type": "string"
                  },
                  "uploads[]": {
                    "description": "One or more message attachments.\n\n<strong>NOTES:</strong>\n<ul>\n<li>A single message may have a maximum of 4 attachments.</li>\n<li>A single attachment cannot exceed 3 MB</li>\n<li>All attachments combined cannot exceed 6 MB</li>\n<li>Supported file types/extensions: doc, docx, gif, jpg, pdf, png, rtf, txt, xls, xlsx.</li>\n</ul>\n",
                    "items": {
                      "format": "binary",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "New message body.\n\n<strong>NOTES:</strong>\n<ul>\n  <li>If a subject isn't included, default subject will be \"{{Category}} Inquiry\" (e.g. Medication Inquiry)</li>\n  <li>Messages can only be replied to for 120 days.  After that, the message is considered \"expired\"</li>\n  <li>If sending a draft, include the draft's ID in the request body as `draft_id`. Draft will be deleted once sent. Any fields included in request body will overwrite original draft contents.\n  <li>If including file attachments, this request must be sent as <i>multipart/form-data</i></li>\n  <li>\n    File attachment restrictions (as imposed by MHV):\n    <ul>\n      <li>User may attach up to 4 files</li>\n      <li>Accepted formats: doc, docx, jpg, pdf, png, rtf, txt, xls, xlsx</li>\n      <li>Single attachment cannot exceed 3 MB</li>\n      <li>Total attachment cannot exceed 6 MB</li>\n    </ul>\n  </li>\n</ul>\n",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostSecureMessageDetail"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/messaging/health/messages"
      }
    },
    "/v0/messaging/health/messages/categories": {
      "get": {
        "description": "List available message categories",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecureMessageCategories"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/messaging/health/messages/categories"
      }
    },
    "/v0/messaging/health/messages/signature": {
      "get": {
        "description": "Gets user message signature preferences",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecureMessageSignature"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/messaging/health/messages/signature"
      }
    },
    "/v0/messaging/health/messages/{id}": {
      "delete": {
        "description": "Moves a secure message to the \"Deleted\" folder",
        "parameters": [
          {
            "description": "The id of the message that is to be deleted",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "204": {
            "description": "The message was deleted successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "errors": [
                    {
                      "code": "SM114",
                      "detail": "Unable to move message",
                      "status": "400",
                      "title": "Operation failed"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/messaging/health/messages/{id}"
      },
      "get": {
        "description": "Get a secure message <strong>and mark the message as read</strong>.\n\n<strong>NOTES:</strong>\n<ul>\n  <li>Unlike listing messages in a folder, the message resource returned from this operation will include\nthe message body and attachment information.</li>\n  <li>This GET operation is not fully idempotent and will set readReceipt field as 'READ'</li>\n  <li>If message has an attachment included, attachmentSize is displayed in bytes</li>\n</ul>\n",
        "parameters": [
          {
            "description": "Whether or not to use this API's cache or fetch records from upstream when getting triage team information to determine if user is in triage team. See meta field 'user_in_triage_team'.",
            "example": true,
            "in": "query",
            "name": "useCache",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSecureMessageDetail"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/messaging/health/messages/{id}"
      },
      "patch": {
        "description": "Moves a secure message to a specified folder",
        "parameters": [
          {
            "description": "The id of the message that is to be moved",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of the folder that the message is to be moved to",
            "in": "query",
            "name": "folder_id,",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "204": {
            "description": "The message was moved successfully"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/messaging/health/messages/{id}/move"
      }
    },
    "/v0/messaging/health/messages/{id}/attachments/{attachment_id}": {
      "get": {
        "description": "Get a secure message attachment content as a direct binary download. Secure messaging supports the following file types/extensions: doc, docx, gif, jpg, pdf, png, rtf, txt, xls, xlsx.\n",
        "parameters": [
          {
            "description": "ID of the message that we are retrieving attachments of",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "OK",
            "headers": {
              "Content-Disposition": {
                "description": "This header will have the value of \"attachment\", and a \"filename\" parameter containing the original filename of the attached content.\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/messaging/health/messages/{id}/attachments/{attachment_id}"
      }
    },
    "/v0/messaging/health/messages/{id}/reply": {
      "post": {
        "description": "Send reply to a secure message\n\n<strong>NOTE:</strong> If including file attachments, this request must be sent as <i>multipart/form-data</i>\n\nFile attachment restrictions (as imposed by MHV):\n<ul>\n  <li>User may attach up to 4 files</li>\n  <li>Accepted formats: doc, docx, jpg, pdf, png, rtf, txt, xls, xlsx</li>\n  <li>Single attachment cannot exceed 3 MB</li>\n  <li>Total attachment cannot exceed 6 MB</li>\n</ul>\n",
        "parameters": [
          {
            "description": "ID of the message that is being replied to",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecureMessageReplyRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "message": {
                    "description": "Stringified JSON with same parameters as if this was an application/json request (e.g. '{\"body\":\"test body with attachment\"}')",
                    "type": "string"
                  },
                  "uploads[]": {
                    "description": "One or more message attachments.\n\n<strong>NOTES:</strong>\n<ul>\n<li>A single message may have a maximum of 4 attachments.</li>\n<li>A single attachment cannot exceed 3 MB</li>\n<li>All attachments combined cannot exceed 6 MB</li>\n<li>Supported file types/extensions: doc, docx, gif, jpg, pdf, png, rtf, txt, xls, xlsx.</li>\n</ul>\n",
                    "items": {
                      "format": "binary",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Reply message body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostSecureMessageDetail"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/messaging/health/messages/{id}/reply"
      }
    },
    "/v0/messaging/health/messages/{id}/thread": {
      "get": {
        "description": "Gets a list of message summaries that are related to the message of the passed id and older than the message of \nthe id provided. Does <strong>not</strong> include the message of the passed id itself.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecureMessageList"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/messaging/health/messages/{id}/thread"
      }
    },
    "/v1/messaging/health/messages/{id}/thread": {
      "get": {
        "description": "Gets a list of message summaries that are related to the message of the passed id regardless of their age in \nrelation to the message of the id provided. Unless specified in the query parameters, this <strong>does</strong> \ninclude the message of the passed id itself.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          },
          {
            "description": "Excludes the message with the provided message id",
            "in": "query",
            "name": "excludeProvidedMessage",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecureMessageListV1"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v1/messaging/health/messages/{id}/thread"
      }
    },
    "/v0/messaging/health/recipients": {
      "get": {
        "description": "List available recipients to which messages may be sent",
        "parameters": [
          {
            "description": "Whether or not to use this API's cache or fetch records from the upstream service. Defaults to true.",
            "example": true,
            "in": "query",
            "name": "useCache",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecureMessagingRecipients"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/messaging/health/recipients"
      }
    },
    "/v0/military-service-history": {
      "get": {
        "description": "Returns user's service history",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MilitaryHistory"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/military-service-history"
      }
    },
    "/v0/payment-history": {
      "get": {
        "description": "Returns user's payment history",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          },
          {
            "description": "The start date for the range of payments in ISO 8601 UTC format. Defaults to the beginning of the year of the most recent payment.",
            "example": "2020-10-29T07:00:00Z",
            "in": "query",
            "name": "startDate",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The end date for the range of appointments in ISO 8601 UTC format. Defaults to the end of the year of the most recent payment.",
            "example": "2021-11-29T08:00:00Z",
            "in": "query",
            "name": "endDate",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The page number requested. Defaults to 1.",
            "example": 1,
            "in": "query",
            "name": "page[number]",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of records to return per page. Defaults to 10.",
            "example": 10,
            "in": "query",
            "name": "page[size]",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentHistory"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/payment-history"
      }
    },
    "/v0/payment-information/benefits": {
      "get": {
        "description": "Returns direct deposit payment info",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentInfo"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/payment-information/benefits"
      },
      "put": {
        "description": "Returns updated direct deposit payment info",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentInfoRequest"
              }
            }
          },
          "description": "New direct deposit info",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentInfo"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/payment-information/benefits"
      }
    },
    "/v0/pensions": {
      "get": {
        "description": "Get current pensions overview",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pensions"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/pensions"
      }
    },
    "/v0/push/prefs/{endpointSid}": {
      "get": {
        "description": "Get the user's push notification preferences",
        "parameters": [
          {
            "description": "device endpointSid provided by the register endpoint",
            "in": "path",
            "name": "endpointSid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PushGetPreferences"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/push/prefs/{endpointSid}"
      },
      "put": {
        "description": "Set the user's push notification preferences",
        "parameters": [
          {
            "description": "device endpointSid provided by the register endpoint",
            "in": "path",
            "name": "endpointSid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PushPreferences"
              }
            }
          },
          "description": "Push notification preferences",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/push/prefs/{endpointSid}"
      }
    },
    "/v0/push/register": {
      "put": {
        "description": "Allows a new app install to register to receive push notifications",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PushRegistration"
              }
            }
          },
          "description": "Device information",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PushRegistrationResponse"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/push/register"
      }
    },
    "/v0/push/send": {
      "post": {
        "description": "Allows client to trigger specified push notification to be sent to specified endpoint",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PushSendRequestBody"
              }
            }
          },
          "description": "Template id, endpoint sid, and personalization for template",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/push/send"
      }
    },
    "/v0/translations/download": {
      "get": {
        "description": "Downloads translations file.",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          },
          {
            "description": "When this endpoint responds with a 200, it includes a Content-Version header. The frontend is expected to store that value and include it as the `current_version` query param. When the `current_version` is omited or does not match the server's current version, the server responds with a 200 status, the newest version of the translations file, and the header including the newest version id. If the `current_version` matches the server's current version, the server responds with 204 and no content.\n",
            "in": "query",
            "name": "current_version",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "headers": {
              "Content-Disposition": {
                "description": "This header will have the value of \"attachment\", and a \"filename\" parameter containing the original filename of the attached content.\n",
                "schema": {
                  "type": "string"
                }
              },
              "Content-Type": {
                "description": "Describes the file format.",
                "schema": {
                  "type": "string",
                  "enum": [
                    "application/json"
                  ]
                }
              },
              "Content-Version": {
                "description": "Current version of the file being downloaded.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "204": {
            "description": "No Content."
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "summary": "/v0/translations/download"
      }
    },
    "/v0/user": {
      "get": {
        "description": "Returns the user profile, including the user's addresses and the services the user has the requisite ids to access. Meta data for this endpoint returns all the services available in the API.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/User"
                    },
                    "meta": {
                      "properties": {
                        "availableServices": {
                          "description": "All services available through the mobile API. See authorizedServices for a list of services available to the user.",
                          "example": [
                            "appeals",
                            "appointments",
                            "claims",
                            "directDepositBenefits",
                            "disabilityRating",
                            "lettersAndDocuments",
                            "militaryServiceHistory",
                            "paymentHistory",
                            "userProfileUpdate",
                            "secureMessaging",
                            "scheduleAppointments",
                            "prescriptions"
                          ],
                          "type": "array"
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/user"
      }
    },
    "/v0/user/authorized-services": {
      "get": {
        "description": "Returns a hash of all available services, and a boolean value of whether the user has access to that service.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/UserAuthorizedServices"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/user/authorized-services"
      }
    },
    "/v0/user/contact-info": {
      "get": {
        "description": "Returns the user contact info. If the user does not have a vet360 id, the contact info will be null.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/UserContactInfo"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/user/contact-info"
      }
    },
    "/v1/user": {
      "get": {
        "description": "Returns the user profile, including the user's addresses and the services the user has the requisite ids to access. Meta data for this endpoint returns all the services available in the API. v1 includes LOGINGOV as login type.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/UserV1"
                    },
                    "meta": {
                      "properties": {
                        "availableServices": {
                          "description": "All services available through the mobile API. See authorizedServices for a list of services available to the user.",
                          "example": [
                            "appeals",
                            "appointments",
                            "claims",
                            "directDepositBenefits",
                            "disabilityRating",
                            "lettersAndDocuments",
                            "militaryServiceHistory",
                            "paymentHistory",
                            "userProfileUpdate",
                            "secureMessaging",
                            "scheduleAppointments",
                            "prescriptions"
                          ],
                          "type": "array"
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v1/user"
      }
    },
    "/v2/user": {
      "get": {
        "description": "Returns basic user information\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/UserV2"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v2/user"
      }
    },
    "/v0/user/addresses": {
      "delete": {
        "description": "Deletes a user's address",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            }
          },
          "description": "A domestic, internation, or military address",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressTransaction"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/user/addresses"
      },
      "post": {
        "description": "Creates a new residential or mailing address for a user. Calling this endpoint is the second step in adding a new address for a user. The first step is to call the address validation endpoint to check if an address is valid. If it is valid you'll receive a 'addressMetaData' object back with the addresses confidence score. This object should then be included along with the new address in the request body. If the user wishes to continue with an 'invalid' address then the 'validationKey' should be passed along with the new address in the request body. This lets the underlying service know that an invalid address be passed through.",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Using Overridden Address": {
                  "value": {
                    "addressLine1": "1493 Martin Luther King Rd",
                    "addressPou": "RESIDENCE/CHOICE",
                    "addressType": "DOMESTIC",
                    "city": "Fulton",
                    "countryCodeIso3": "USA",
                    "countryName": "United States",
                    "stateCode": "MS",
                    "validationKey": -1206619807,
                    "zipCode": "38843"
                  }
                },
                "Using Suggested Address": {
                  "value": {
                    "addressLine1": "1493 Martin Luther King Rd",
                    "addressMetaData": {
                      "addressType": "Domestic",
                      "confidenceScore": 100,
                      "deliveryPointValidation": "CONFIRMED",
                      "residentialDeliveryIndicator": "RESIDENTIAL"
                    },
                    "addressPou": "RESIDENCE/CHOICE",
                    "addressType": "DOMESTIC",
                    "city": "Fulton",
                    "countryCodeIso3": "USA",
                    "countryName": "United States",
                    "stateCode": "MS",
                    "zipCode": "38843"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/AddressCreate"
              }
            }
          },
          "description": "A domestic, internation, or military address",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressTransaction"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/user/addresses"
      },
      "put": {
        "description": "Updates a user's residential or mailing address. Calling this endpoint is the second step in adding a new address for a user. The first step is to call the address validation endpoint to check if an address is valid. If it is valid you'll receive a 'addressMetaData' object back with the addresses confidence score. This object should then be included along with the new address in the request body. If the user wishes to continue with an 'invalid' address then the 'validationKey' should be passed along with the new address in the request body. This lets the underlying service know that an invalid address be passed through.",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Using Overridden Address": {
                  "value": {
                    "addressLine1": "1493 Martin Luther King Rd",
                    "addressPou": "RESIDENCE/CHOICE",
                    "addressType": "DOMESTIC",
                    "city": "Fulton",
                    "countryCodeIso3": "USA",
                    "countryName": "United States",
                    "id": 181513,
                    "stateCode": "MS",
                    "validationKey": -1206619807,
                    "zipCode": "38843"
                  }
                },
                "Using Suggested Address": {
                  "value": {
                    "addressLine1": "1493 Martin Luther King Rd",
                    "addressMetaData": {
                      "addressType": "Domestic",
                      "confidenceScore": 100,
                      "deliveryPointValidation": "CONFIRMED",
                      "residentialDeliveryIndicator": "RESIDENTIAL"
                    },
                    "addressPou": "RESIDENCE/CHOICE",
                    "addressType": "DOMESTIC",
                    "city": "Fulton",
                    "countryCodeIso3": "USA",
                    "countryName": "United States",
                    "id": 181513,
                    "stateCode": "MS",
                    "zipCode": "38843"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/AddressUpdate"
              }
            }
          },
          "description": "A domestic, internation, or military address",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressTransaction"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/user/addresses"
      }
    },
    "/v0/user/addresses/validate": {
      "post": {
        "description": "Validates a residential or mailing address for a user. Calling this endpoint is the first step in adding a new address for a user. If the address is valid you'll receive a 'addressMetaData' object back with the addresses confidence score. This object should then be included along with the new address in the request body. If the user wishes to continue with an 'invalid' address then the 'validationKey' should be passed along with the new address in the request body. This lets the underlying service know that an invalid address be passed through.",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "addressLine1": "51 W Weber Rd",
                "addressPou": "CORRESPONDENCE",
                "addressType": "DOMESTIC",
                "city": "Columbus",
                "countryCodeIso3": "USA",
                "countryName": "United States",
                "stateCode": "OH",
                "type": "DOMESTIC",
                "zipCode": "43202"
              },
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            }
          },
          "description": "A domestic, internation, or military address",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Multiple matches": {
                    "value": {
                      "data": [
                        {
                          "id": "8e07b8ff-6b36-4110-9225-a1a9e785ee13",
                          "type": "suggested_address",
                          "attributes": {
                            "addressLine1": "37 N 1st St",
                            "addressLine2": null,
                            "addressLine3": null,
                            "addressPou": "CORRESPONDENCE",
                            "addressType": "DOMESTIC",
                            "city": "Brooklyn",
                            "countryCodeIso3": "USA",
                            "internationalPostalCode": null,
                            "province": null,
                            "stateCode": "NY",
                            "zipCode": "11249",
                            "zipCodeSuffix": "3939"
                          },
                          "meta": {
                            "address": {
                              "confidenceScore": 100,
                              "addressType": "Domestic",
                              "deliveryPointValidation": "UNDELIVERABLE"
                            },
                            "validationKey": -73046298
                          }
                        },
                        {
                          "id": "a5a3b737-a31b-4c66-83b3-b98556b12072",
                          "type": "suggested_address",
                          "attributes": {
                            "addressLine1": "37 S 1st St",
                            "addressLine2": null,
                            "addressLine3": null,
                            "addressPou": "CORRESPONDENCE",
                            "addressType": "DOMESTIC",
                            "city": "Brooklyn",
                            "countryCodeIso3": "USA",
                            "internationalPostalCode": null,
                            "province": null,
                            "stateCode": "NY",
                            "zipCode": "11249",
                            "zipCodeSuffix": "4101"
                          },
                          "meta": {
                            "address": {
                              "confidenceScore": 100,
                              "addressType": "Domestic",
                              "deliveryPointValidation": "CONFIRMED",
                              "residentialDeliveryIndicator": "MIXED"
                            },
                            "validationKey": -73046298
                          }
                        }
                      ]
                    }
                  },
                  "Single match": {
                    "value": {
                      "data": [
                        {
                          "id": "6344ba4e-ff9e-436d-97ae-8511e381c11d",
                          "type": "suggested_address",
                          "attributes": {
                            "addressLine1": "51 Walhalla Rd",
                            "addressLine2": null,
                            "addressLine3": null,
                            "addressPou": "CORRESPONDENCE",
                            "addressType": "DOMESTIC",
                            "city": "Columbus",
                            "countryCodeIso3": "USA",
                            "internationalPostalCode": null,
                            "province": null,
                            "stateCode": "OH",
                            "zipCode": "43202",
                            "zipCodeSuffix": "1463"
                          },
                          "meta": {
                            "address": {
                              "confidenceScore\"": 100,
                              "addressType\"": "Domestic",
                              "deliveryPointValidation\"": "UNDELIVERABLE",
                              "residentialDeliveryIndicator": "RESIDENTIAL"
                            },
                            "validationKey\"": -1398777841
                          }
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AddressResponse"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/user/addresses/validate"
      }
    },
    "/v0/user/demographics": {
      "get": {
        "description": "Returns the users demographics info",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/UserDemographics"
                    }
                  }
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/user/demographics"
      }
    },
    "/v0/user/emails": {
      "delete": {
        "description": "Deletes a user's email address",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "emailAddress": "person42@example.com",
                "id": "42,"
              },
              "schema": {
                "$ref": "#/components/schemas/EmailUpdate"
              }
            }
          },
          "description": "The email address to delete",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTransaction"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/user/emails"
      },
      "post": {
        "description": "Creates a new email address",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "emailAddress": "person42@example.com"
              },
              "schema": {
                "$ref": "#/components/schemas/Email"
              }
            }
          },
          "description": "The new email address",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTransaction"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/user/emails"
      },
      "put": {
        "description": "Updates a user's email address",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "emailAddress": "person42@example.com",
                "id": "42,"
              },
              "schema": {
                "$ref": "#/components/schemas/EmailUpdate"
              }
            }
          },
          "description": "The new email address",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTransaction"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/user/emails"
      }
    },
    "/v0/user/gender_identity": {
      "put": {
        "description": "Updates a user's gender identity. Only users with id.me or login.gov accounts may use this",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "code": "B"
              },
              "schema": {
                "$ref": "#/components/schemas/GenderIdentityUpdate"
              }
            }
          },
          "description": "The new gender identity key",
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/user/gender_identity"
      }
    },
    "/v0/user/gender_identity/edit": {
      "get": {
        "description": "Retrieves a list of valid gender identity keys. Note that this endpoint does not use the camel case key inflection header like most other mobile endpoints to keep the keys upcase.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenderIdentityEdit"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/user/gender_identity/edit"
      }
    },
    "/v0/user/logout": {
      "get": {
        "description": "Logs the user out by revoking their access token from the IAM SSOe OAuth service and destroying the IAM user, user identity, and session objects from Redis.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/user/logout"
      }
    },
    "/v0/user/logged-in": {
      "post": {
        "description": "Called by the mobile app after successful login to perform any actions needed to start a session.",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/user/logged-in"
      }
    },
    "/v0/user/preferred_name": {
      "put": {
        "description": "Updates a user's preferred name. Only users with id.me or login.gov accounts may use this",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "text": "New Preferred Name"
              },
              "schema": {
                "$ref": "#/components/schemas/PreferredNameUpdate"
              }
            }
          },
          "description": "The new preferred name",
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/user/preferred_name"
      }
    },
    "/v0/user/phones": {
      "delete": {
        "description": "Deletes one of a user's phone numbers",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneUpdate"
              }
            }
          },
          "description": "The phone number to delete",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneTransaction"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/user/phones"
      },
      "post": {
        "description": "Creates a phone number for a user",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Phone"
              }
            }
          },
          "description": "The new phone number",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneTransaction"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/user/phones"
      },
      "put": {
        "description": "Updates a user's phone number",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneUpdate"
              }
            }
          },
          "description": "The new phone number",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneTransaction"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v0/user/phones"
      }
    },
    "/v1/health/immunizations": {
      "get": {
        "description": "Returns a paginated list of immunization records for given user",
        "parameters": [
          {
            "$ref": "#/components/parameters/InflectionHeader"
          },
          {
            "description": "The page number requested. Defaults to 1.",
            "example": 1,
            "in": "query",
            "name": "page[number]",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of records to return per page. Defaults to 10.",
            "example": 10,
            "in": "query",
            "name": "page[size]",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Whether or not to use this API's cache or fetch records from the upstream service. Defaults to true.",
            "example": true,
            "in": "query",
            "name": "useCache",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImmunizationsV1"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "408": {
            "$ref": "#/components/responses/408"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "503": {
            "$ref": "#/components/responses/503"
          },
          "504": {
            "$ref": "#/components/responses/504"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "/v1/health/immunizations"
      }
    }
  },
  "components": {
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "description": "Authentication is via an access token returned from IAM's SSOe service. Pass the access token in the 'Authorization' Header in the format 'Bearer {accessToken}'. e.g. 'Bearer abcdefg1234567'."
      }
    },
    "parameters": {
      "InflectionHeader": {
        "in": "header",
        "name": "X-Key-Inflection",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "camel",
            "snake"
          ],
          "default": "snake"
        },
        "description": "Allows the API to return camelCase keys rather than snake_case"
      }
    },
    "responses": {
      "400": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        },
        "description": "Bad request."
      },
      "401": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        },
        "description": "Authentication is possible but has failed or not yet been provided."
      },
      "403": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        },
        "description": "Client was forbidden from upstream resource."
      },
      "404": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        },
        "description": "The requested resource could not be found."
      },
      "408": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        },
        "description": "The response from this API timed out."
      },
      "418": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CustomErrors"
            }
          }
        },
        "description": "Custom Error Message"
      },
      "422": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        },
        "description": "Failure in processing entity"
      },
      "429": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        },
        "description": "Too many requests."
      },
      "500": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        },
        "description": "An internal API error occurred."
      },
      "502": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        },
        "description": "An upstream service the API depends on returned an error."
      },
      "503": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        },
        "description": "An upstream service is unavailable, or its circuit breaker may have been tripped."
      },
      "504": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Errors"
            }
          }
        },
        "description": "A response from an upstream service timed out."
      }
    },
    "schemas": {
      "EndpointDiscovery": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "id",
              "type",
              "attributes"
            ],
            "properties": {
              "id": {
                "type": "string",
                "example": "welcome"
              },
              "type": {
                "type": "string",
                "example": "welcome"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "message",
                  "endpoints"
                ],
                "properties": {
                  "message": {
                    "type": "string",
                    "example": "Welcome to the mobile API"
                  },
                  "endpoints": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "mobile/v0/appointments"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "DiscoveryRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "environment",
          "buildNumber",
          "os"
        ],
        "properties": {
          "environment": {
            "type": "string",
            "enum": [
              "dev",
              "staging",
              "prod"
            ]
          },
          "buildNumber": {
            "type": "string",
            "example": "10"
          },
          "os": {
            "type": "string",
            "enum": [
              "android",
              "ios"
            ]
          }
        }
      },
      "DiscoveryResponse": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "id",
              "type",
              "attributes"
            ],
            "properties": {
              "id": {
                "type": "string",
                "example": "1.0",
                "description": "API Version number"
              },
              "type": {
                "type": "string",
                "example": "discovery"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "endpoints",
                  "authBaseUrl",
                  "apiRootUrl",
                  "webviews",
                  "appAccess",
                  "displayMessage"
                ],
                "properties": {
                  "endpoints": {
                    "type": "object",
                    "additionalProperties": false,
                    "example": {
                      "appointments": {
                        "url": "/v0/appointments",
                        "method": "GET"
                      },
                      "uploadClaimDocuments": {
                        "url": "/claim/:id/documents",
                        "method": "POST"
                      },
                      "createUserPhone": {
                        "url": "/user/phones",
                        "method": "POST"
                      },
                      "updateUserPhone": {
                        "url": "/user/phones",
                        "method": "PUT"
                      }
                    }
                  },
                  "authBaseUrl": {
                    "type": "string",
                    "example": "https://sqa.fed.eauth.va.gov/oauthe/sps/oauth/oauth20/"
                  },
                  "apiRootUrl": {
                    "type": "string",
                    "example": "https://staging-api.va.gov/mobile"
                  },
                  "webviews": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "example": {
                      "coronaFAQ": "https://www.va.gov/coronavirus-veteran-frequently-asked-questions",
                      "facilityLocator": "https://www.va.gov/find-locations/"
                    }
                  },
                  "appAccess": {
                    "type": "boolean"
                  },
                  "displayMessage": {
                    "type": "string",
                    "example": "Please update the app to continue"
                  }
                }
              }
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "title",
          "detail",
          "code",
          "status"
        ],
        "properties": {
          "title": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "meta": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "messages"
            ],
            "properties": {
              "messages": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "key",
                    "severity",
                    "text"
                  ],
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "severity": {
                      "type": "string"
                    },
                    "text": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Errors": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "errors"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "AppealAlert": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "form9_needed",
              "scheduled_hearing",
              "hearing_no_show",
              "held_for_evidence",
              "cavc_option",
              "ramp_eligible",
              "ramp_ineligible",
              "decision_soon",
              "blocked_by_vso",
              "scheduled_dro_hearing",
              "dro_hearing_no_show",
              "evidentiary_period",
              "ama_post_decision"
            ]
          },
          "details": {
            "type": "object"
          }
        }
      },
      "AppealEvent": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "claim_decision",
              "nod",
              "soc",
              "form9",
              "ssoc",
              "certified",
              "hearing_held",
              "hearing_no_show",
              "bva_decision",
              "field_grant",
              "withdrawn",
              "ftr",
              "ramp",
              "death",
              "merged",
              "record_designation",
              "reconsideration",
              "vacated",
              "other_close",
              "cavc_decision",
              "ramp_notice",
              "transcript",
              "remand_return",
              "ama_nod",
              "docket_change",
              "distributed_to_vlj",
              "bva_decision_effectuation",
              "dta_decision",
              "sc_request",
              "sc_decision",
              "sc_other_close",
              "hlr_request",
              "hlr_decision",
              "hlr_dta_error",
              "hlr_other_close",
              "statutory_opt_in"
            ]
          }
        }
      },
      "AppealEvidence": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "data": {
            "type": "string"
          }
        }
      },
      "AppealIssue": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "diagnosticCode": {
            "type": "string, null",
            "example": 8100
          },
          "lastAction": {
            "type": "string",
            "enum": [
              "field_grant",
              "withdrawn",
              "allowed",
              "denied",
              "remand",
              "cavc_remand",
              "Granted",
              "dismissed_matter_of_law",
              "Dismissed",
              "Deferred"
            ]
          },
          "date": {
            "type": "string"
          }
        }
      },
      "Appeal": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string"
              },
              "id": {
                "type": "string",
                "description": "Upstream identifier. Same as provided id."
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "appealIds",
                  "active",
                  "alerts",
                  "aod",
                  "aoj",
                  "description",
                  "docket",
                  "events",
                  "evidence",
                  "incompleteHistory",
                  "issues",
                  "location",
                  "programArea",
                  "status",
                  "type",
                  "updated"
                ],
                "properties": {
                  "appealsIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "alerts": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AppealAlert"
                    }
                  },
                  "aod": {
                    "type": "boolean"
                  },
                  "aoj": {
                    "type": "string",
                    "enum": [
                      "vba",
                      "vha",
                      "nca",
                      "other"
                    ]
                  },
                  "description": {
                    "type": "string"
                  },
                  "docket": {
                    "type": "object"
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AppealEvent"
                    }
                  },
                  "evidence": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AppealEvidence"
                    }
                  },
                  "incompleteHistory": {
                    "type": "boolean"
                  },
                  "issues": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AppealIssue"
                    }
                  },
                  "location": {
                    "type": "string",
                    "enum": [
                      "aoj",
                      "bva"
                    ]
                  },
                  "programArea": {
                    "type": "string",
                    "enum": [
                      "compensation",
                      "pension",
                      "insurance",
                      "loan_guaranty",
                      "education",
                      "vre",
                      "medical",
                      "burial",
                      "bva",
                      "fiduciary",
                      "other",
                      "multiple",
                      "vha",
                      "voc_rehub"
                    ]
                  },
                  "status": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "details": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "lastSocDate": {
                            "type": "string"
                          },
                          "certificationTimeliness": {
                            "items": {
                              "type": "Integer"
                            }
                          },
                          "ssocTimeliness": {
                            "items": {
                              "type": "Integer"
                            }
                          },
                          "decisionTimeliness": {
                            "items": {
                              "type": "Integer"
                            }
                          },
                          "remandTimeliness": {
                            "items": {
                              "type": "Integer"
                            }
                          },
                          "socTimeliness": {
                            "items": {
                              "type": "Integer"
                            }
                          },
                          "remandSsocTimeliness": {
                            "items": {
                              "type": "Integer"
                            }
                          },
                          "returnTimeliness": {
                            "items": {
                              "type": "Integer"
                            }
                          }
                        }
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "scheduled_hearing",
                          "pending_hearing_scheduling",
                          "on_docket",
                          "pending_certification_ssoc",
                          "pending_certification",
                          "pending_form9",
                          "pending_soc",
                          "stayed",
                          "at_vso",
                          "bva_development",
                          "decision_in_progress",
                          "bva_decision",
                          "field_grant",
                          "withdrawn",
                          "ftr",
                          "ramp",
                          "death",
                          "reconsideration",
                          "other_close",
                          "remand_ssoc",
                          "remand",
                          "merged",
                          "evidentiary_period",
                          "ama_remand",
                          "post_bva_dta_decision",
                          "bva_decision_effectuation",
                          "sc_received",
                          "sc_decision",
                          "sc_closed",
                          "hlr_received",
                          "hlr_dta_error",
                          "hlr_decision",
                          "hlr_closed",
                          "statutory_opt_in",
                          "motion",
                          "pre_docketed"
                        ]
                      }
                    }
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "legacyAppeal",
                      "appeal",
                      "supplementalClaim",
                      "higherLevelReview"
                    ]
                  },
                  "updated": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "Appointment": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "example": "appointment"
          },
          "id": {
            "type": "string",
            "example": "23fe358d-6e82-4541-804c-ce7562ba28f4",
            "description": "Upstream identifier"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "appointmentType",
              "appointmentIen",
              "cancelId",
              "comment",
              "healthcareProvider",
              "healthcareService",
              "location",
              "physicalLocation",
              "minutesDuration",
              "phoneOnly",
              "startDateLocal",
              "startDateUtc",
              "status",
              "statusDetail",
              "timeZone",
              "vetextId",
              "reason",
              "isCovidVaccine"
            ],
            "properties": {
              "appointmentType": {
                "type": "string",
                "enum": [
                  "COMMUNITY_CARE",
                  "VA",
                  "VA_VIDEO_CONNECT_ATLAS",
                  "VA_VIDEO_CONNECT_HOME",
                  "VA_VIDEO_CONNECT_GFE",
                  "VA_VIDEO_CONNECT_ONSITE"
                ],
                "example": "VA"
              },
              "appointmentIen": {
                "type": "string",
                "nullable": true,
                "example": 19648
              },
              "cancelId": {
                "type": "string",
                "nullable": true,
                "example": "MzA4OzIwMjAxMTAzLjA5MDAwMDs0NDI7Q0hZIFBDIEtJTFBBVFJJQ0s="
              },
              "comment": {
                "type": "string",
                "nullable": true,
                "example": "Please arrive 20 minutes before the start of your appointment"
              },
              "healthcareProvider": {
                "type": "string",
                "nullable": true,
                "example": "John Smith"
              },
              "healthcareService": {
                "type": "string",
                "nullable": true,
                "example": null,
                "description": "This is deprecated and will always return null. It is still included for backwards compatibility."
              },
              "location": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "id",
                  "name",
                  "address",
                  "lat",
                  "long",
                  "phone",
                  "url",
                  "code"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "nullable": true,
                    "example": 442
                  },
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "example": "VA Long Beach Healthcare System"
                  },
                  "address": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "street",
                      "city",
                      "state",
                      "zipCode"
                    ],
                    "properties": {
                      "street": {
                        "type": "string",
                        "nullable": true,
                        "example": "5901 East 7th Street, Building 166"
                      },
                      "city": {
                        "type": "string",
                        "nullable": true,
                        "example": "Long Beach"
                      },
                      "state": {
                        "type": "string",
                        "nullable": true,
                        "example": "CA"
                      },
                      "zipCode": {
                        "type": "string",
                        "nullable": true,
                        "example": 90822
                      }
                    }
                  },
                  "lat": {
                    "type": "float",
                    "nullable": true,
                    "example": 33.77005
                  },
                  "long": {
                    "type": "float",
                    "nullable": true,
                    "example": -118.193741
                  },
                  "phone": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "areaCode",
                      "number",
                      "extension"
                    ],
                    "properties": {
                      "areaCode": {
                        "type": "string",
                        "nullable": true,
                        "example": 562
                      },
                      "number": {
                        "type": "string",
                        "nullable": true,
                        "example": "434-6008"
                      },
                      "extension": {
                        "type": "string",
                        "nullable": true,
                        "example": 1001
                      }
                    }
                  },
                  "url": {
                    "type": "string",
                    "nullable": true,
                    "example": "https://care2.evn.va.gov/vvc-app/?join=1&media=1&escalate=1&conference=VVC8275247@care2.evn.va.gov&pin=3242949390#"
                  },
                  "code": {
                    "type": "string",
                    "nullable": true,
                    "example": "GL32C"
                  }
                }
              },
              "physicalLocation": {
                "type": "string",
                "nullable": true,
                "example": "Blind Rehabilitation Center"
              },
              "minutesDuration": {
                "type": "integer",
                "nullable": true,
                "example": 60
              },
              "phoneOnly": {
                "type": "boolean",
                "example": true
              },
              "startDateLocal": {
                "type": "datetime",
                "example": "2019-04-20T14:15:00.000-04:00"
              },
              "startDateUtc": {
                "type": "datetime",
                "example": "2019-04-20T18:15:00.000Z"
              },
              "status": {
                "type": "string",
                "description": "Booking status of the appointment. Note that 'HIDDEN' means that the status should be hidden, the appointment should still be visible.",
                "enum": [
                  "BOOKED",
                  "CANCELLED",
                  "HIDDEN",
                  "SUBMITTED"
                ],
                "example": "BOOKED"
              },
              "statusDetail": {
                "type": "string",
                "nullable": true,
                "description": "For a cancelled appointment return details about who or why it was cancelled.",
                "enum": [
                  "CANCELLED BY CLINIC & AUTO RE-BOOK",
                  "CANCELLED BY CLINIC",
                  "CANCELLED BY PATIENT & AUTO-REBOOK",
                  "CANCELLED BY PATIENT",
                  "CANCELLED - OTHER"
                ],
                "example": "BOOKED"
              },
              "timeZone": {
                "type": "string",
                "nullable": true,
                "example": "America/Los_Angeles"
              },
              "vetextId": {
                "type": "string",
                "example": "308;20210106.140000"
              },
              "reason": {
                "type": "string",
                "nullable": true,
                "example": "Follow-up/Routine: Reason 1"
              },
              "isCovidVaccine": {
                "type": "boolean",
                "example": false
              },
              "isPending": {
                "type": "boolean",
                "example": false
              },
              "proposedTimes": {
                "type": "array",
                "nullable": true,
                "example": [
                  {
                    "date": "10/01/2020",
                    "time": "AM"
                  },
                  {
                    "date": "10/01/2020",
                    "time": "PM"
                  },
                  {
                    "date": null,
                    "time": null
                  }
                ]
              },
              "typeOfCare": {
                "type": "string",
                "nullable": true,
                "example": "Primary Care"
              },
              "patientPhoneNumber": {
                "type": "string",
                "nullable": true,
                "example": "123-456-7890"
              },
              "patientEmail": {
                "type": "string",
                "nullable": true,
                "example": "someone@example.com"
              },
              "bestTimeToCall": {
                "type": "array",
                "nullable": true,
                "example": [
                  "Morning",
                  "Afternoon",
                  "Evening"
                ]
              },
              "friendlyLocationName": {
                "type": "string",
                "nullable": true,
                "example": "CHYSHR-Cheyenne VA Medical Center"
              },
              "serviceCategoryName": {
                "type": "string",
                "nullable": true,
                "example": "COMPENSATION & PENSION"
              }
            }
          }
        }
      },
      "Appointments": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data",
          "meta"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Appointment"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "upcomingAppointmentsCount",
              "upcomingDaysLimit",
              "pagination"
            ],
            "properties": {
              "errors": {
                "type": [
                  "array",
                  null
                ]
              },
              "upcomingAppointmentsCount": {
                "type": "number",
                "description": "The number of BOOKED, non-pending appointments in the next upcomingDaysLimit number of days."
              },
              "upcomingDaysLimit": {
                "type": "number",
                "description": "The number of days into the future used for calculating upcomingAppointmentsCount. The current value is 7."
              },
              "pagination": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "currentPage",
                  "perPage",
                  "totalPages",
                  "totalEntries"
                ],
                "properties": {
                  "currentPage": {
                    "type": "number",
                    "example": 1
                  },
                  "perPage": {
                    "type": "number",
                    "example": 10
                  },
                  "totalPages": {
                    "type": "number",
                    "example": 2
                  },
                  "totalEntries": {
                    "type": "number",
                    "example": 15
                  }
                }
              }
            }
          }
        }
      },
      "CustomErrors": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "errors"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "title",
                "body",
                "source",
                "telephone",
                "refreshable"
              ],
              "properties": {
                "title": {
                  "type": "string"
                },
                "body": {
                  "type": "string"
                },
                "source": {
                  "type": "string"
                },
                "telephone": {
                  "type": "string"
                },
                "refreshable": {
                  "type": "boolean"
                },
                "status": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "AppointmentCheckin": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "example": "check-in-success"
          },
          "message": {
            "type": "string",
            "example": "Check-In successful"
          }
        }
      },
      "AppointmentCheckinErrors400": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "errors"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "title",
                "detail",
                "code",
                "status"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Unsuccessful Operation"
                },
                "detail": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "12345"
                      },
                      "errors": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "status": {
                              "type": "string",
                              "enum": [
                                "400"
                              ]
                            },
                            "title": {
                              "type": "string",
                              "enum": [
                                "patient-contact-info-needs-update",
                                "patient-emergency-contact-needs-update",
                                "patient-next-of-kin-needs-update",
                                "patient-insurance-needs-update",
                                "appointment-check-in-too-late"
                              ]
                            }
                          }
                        }
                      },
                      "message": {
                        "type": "string",
                        "example": "Check-in unsuccessful with appointmentIen: 38846, patientDfn: 366, stationNo: 530"
                      },
                      "type": {
                        "type": "string",
                        "example": "AuthenticatedCheckinResponse"
                      }
                    }
                  }
                },
                "code": {
                  "type": "string",
                  "example": "CHIP_400"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "400"
                  ]
                }
              }
            }
          }
        }
      },
      "AppointmentCheckinErrors500": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "errors"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "title",
                "detail",
                "code",
                "status"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Internal Server Error"
                },
                "detail": {
                  "type": "array",
                  "description": "Detail status and title can be found at either errors[0]['detail'][0] or errors[0]['detail'][0]['errors'][0].",
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "errors": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "status": {
                              "type": "string",
                              "enum": [
                                "500"
                              ]
                            },
                            "title": {
                              "type": "string",
                              "example": "Authenticated Check-in vista error"
                            }
                          }
                        }
                      },
                      "status": {
                        "type": "string",
                        "enum": [
                          "500"
                        ]
                      },
                      "title": {
                        "type": "string",
                        "example": "Authenticated Check-in vista error"
                      }
                    }
                  }
                },
                "code": {
                  "type": "string",
                  "example": "CHIP_500"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "500"
                  ]
                }
              }
            }
          }
        }
      },
      "AppointmentCheckinDemographics": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "insuranceVerificationNeeded",
          "needsConfirmation",
          "mailingAddress",
          "residentialAddress",
          "homePhone",
          "officePhone",
          "cellPhone",
          "email",
          "emergencyContact",
          "nextOfKin"
        ],
        "properties": {
          "insuranceVerificationNeeded": {
            "type": "boolean",
            "example": true
          },
          "needsConfirmation": {
            "type": "boolean",
            "example": true
          },
          "mailingAddress": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "street1",
              "street2",
              "street3",
              "city",
              "county",
              "state",
              "zip",
              "zip4",
              "country"
            ],
            "properties": {
              "street1": {
                "type": "string"
              },
              "street2": {
                "type": "string"
              },
              "street3": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "county": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "zip": {
                "type": "string"
              },
              "zip4": {
                "type": "string"
              },
              "country": {
                "type": "string"
              }
            }
          },
          "residentialAddress": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "street1",
              "street2",
              "street3",
              "city",
              "county",
              "state",
              "zip",
              "zip4",
              "country"
            ],
            "properties": {
              "street1": {
                "type": "string"
              },
              "street2": {
                "type": "string"
              },
              "street3": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "county": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "zip": {
                "type": "string"
              },
              "zip4": {
                "type": "string"
              },
              "country": {
                "type": "string"
              }
            }
          },
          "homePhone": {
            "type": "string"
          },
          "officePhone": {
            "type": "string"
          },
          "cellPhone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "emergencyContact": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "needsConfirmation",
              "name",
              "relationship",
              "phone",
              "workPhone",
              "address"
            ],
            "properties": {
              "needsConfirmation": {
                "type": "boolean"
              },
              "name": {
                "type": "string"
              },
              "relationship": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "workPhone": {
                "type": "string"
              },
              "address": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "street1",
                  "street2",
                  "street3",
                  "city",
                  "county",
                  "state",
                  "zip",
                  "zip4",
                  "country"
                ],
                "properties": {
                  "street1": {
                    "type": "string"
                  },
                  "street2": {
                    "type": "string"
                  },
                  "street3": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "county": {
                    "type": "string"
                  },
                  "state": {
                    "type": "string"
                  },
                  "zip": {
                    "type": "string"
                  },
                  "zip4": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "nextOfKin": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "needsConfirmation",
              "name",
              "relationship",
              "phone",
              "workPhone",
              "address"
            ],
            "properties": {
              "needsConfirmation": {
                "type": "boolean"
              },
              "name": {
                "type": "string"
              },
              "relationship": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "workPhone": {
                "type": "string"
              },
              "address": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "street1",
                  "street2",
                  "street3",
                  "city",
                  "county",
                  "state",
                  "zip",
                  "zip4",
                  "country"
                ],
                "properties": {
                  "street1": {
                    "type": "string"
                  },
                  "street2": {
                    "type": "string"
                  },
                  "street3": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "county": {
                    "type": "string"
                  },
                  "state": {
                    "type": "string"
                  },
                  "zip": {
                    "type": "string"
                  },
                  "zip4": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "AppointmentCheckinDemographicsPatch": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "contactNeedsUpdate",
          "emergencyContactNeedsUpdate",
          "nextOfKinNeedsUpdate"
        ],
        "properties": {
          "contactNeedsUpdate": {
            "type": "boolean",
            "example": false
          },
          "emergencyContactNeedsUpdate": {
            "type": "boolean",
            "example": false
          },
          "nextOfKinNeedsUpdate": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "CommunityCaresEligibility": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "example": "community_care_eligibility"
              },
              "id": {
                "type": "string",
                "example": "PrimaryCare",
                "description": "Service Type"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "eligible"
                ],
                "properties": {
                  "eligible": {
                    "type": "bool",
                    "example": true
                  }
                }
              }
            }
          }
        }
      },
      "FacilityEligibility": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "example": "facility_eligibility"
          },
          "id": {
            "type": "string",
            "example": "100",
            "description": "Facility Id"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "facility_id",
              "eligible",
              "reason"
            ],
            "properties": {
              "facilityId": {
                "type": "string",
                "example": "100"
              },
              "eligible": {
                "type": "boolean",
                "example": false
              },
              "reason": {
                "type": "string",
                "example": "Non-primary facility with no visit within 12-24 months"
              }
            }
          }
        }
      },
      "FacilityEligibilities": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "$ref": "#/components/schemas/FacilityEligibility"
            }
          }
        }
      },
      "FacilityClinic": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "example": "facility_clinic"
          },
          "id": {
            "type": "string",
            "example": "12345",
            "description": "Upstream identifier"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "C&P Optometry"
              }
            }
          }
        }
      },
      "FacilityClinics": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "$ref": "#/components/schemas/FacilityClinic"
            }
          }
        }
      },
      "Slot": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "example": "clinic_slot"
          },
          "id": {
            "type": "string",
            "example": "3230323230383032313833303A323032323038303231393030",
            "description": "Upstream identifier"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "start_date",
              "end_date"
            ],
            "properties": {
              "start_date": {
                "type": "string",
                "example": "2022-08-05T12:00:00Z"
              },
              "end_date": {
                "type": "string",
                "example": "2022-08-5T12:30:00Z"
              },
              "locationId": {
                "type": "string",
                "example": "757GC"
              },
              "practitionerName": {
                "type": "string",
                "example": "Doe, John D, MD"
              },
              "clinicIen": {
                "type": "string",
                "example": "32216049"
              }
            }
          }
        }
      },
      "ClinicSlots": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "$ref": "#/components/schemas/Slot"
            }
          }
        }
      },
      "AppointmentPreferences": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "example": "appointment_preferences"
              },
              "id": {
                "type": "string",
                "example": "6260ab13-177f-583d-b2dc-1b350404abb7",
                "description": "user UUID"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "notificationFrequency",
                  "emailAllowed",
                  "textMsgAllowed"
                ],
                "properties": {
                  "notificationFrequency": {
                    "type": "string",
                    "example": "Never"
                  },
                  "emailAllowed": {
                    "type": "boolean",
                    "example": true
                  },
                  "emailAddress": {
                    "type": "string",
                    "description": "omitted if not allowed",
                    "example": "abraham.lincoln@va.gov"
                  },
                  "textMsgAllowed": {
                    "type": "boolean",
                    "example": false
                  },
                  "TextMsgPhNumber": {
                    "type": "string",
                    "description": "omitted if not allowed",
                    "example": "480-278-2515"
                  }
                }
              }
            }
          }
        }
      },
      "AppointmentPreferencesRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "notification_frequency"
        ],
        "properties": {
          "notification_frequency": {
            "type": "string",
            "example": "Each new message"
          },
          "email_allowed": {
            "type": "boolean",
            "example": true
          },
          "email_address": {
            "type": "string",
            "example": "abraham.lincoln@va.gov"
          },
          "text_msg_allowed": {
            "type": "boolean",
            "example": false
          },
          "text_msg_ph_number": {
            "type": "string",
            "example": "480-278-2515"
          }
        }
      },
      "ServiceEligibilities": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "example": "va_eligibility"
              },
              "id": {
                "type": "string",
                "example": "6260ab13-177f-583d-b2dc-1b350404abb7",
                "description": "user UUID"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "ccSupported",
                  "services"
                ],
                "properties": {
                  "ccSupported": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "942"
                    ]
                  },
                  "services": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    },
                    "additionalProperties": false,
                    "example": [
                      {
                        "name": "amputation",
                        "requestEligibleFacilities": [
                          "942",
                          "123"
                        ],
                        "directEligibleFacilities": [
                          "945",
                          "342"
                        ]
                      },
                      {
                        "name": "audiology",
                        "requestEligibleFacilities": [
                          "942",
                          "123"
                        ],
                        "directEligibleFacilities": [
                          "945",
                          "342"
                        ]
                      },
                      {
                        "name": "covid",
                        "requestEligibleFacilities": [
                          "942",
                          "123"
                        ],
                        "directEligibleFacilities": [
                          "945",
                          "342"
                        ]
                      },
                      {
                        "name": "optometry",
                        "requestEligibleFacilities": [
                          "942",
                          "123"
                        ],
                        "directEligibleFacilities": [
                          "945",
                          "342"
                        ]
                      },
                      {
                        "name": "outpatientMentalHealth",
                        "requestEligibleFacilities": [
                          "942",
                          "123"
                        ],
                        "directEligibleFacilities": [
                          "945",
                          "342"
                        ]
                      },
                      {
                        "name": "moveProgram",
                        "requestEligibleFacilities": [
                          "942",
                          "123"
                        ],
                        "directEligibleFacilities": [
                          "945",
                          "342"
                        ]
                      },
                      {
                        "name": "foodAndNutrition",
                        "requestEligibleFacilities": [
                          "942",
                          "123"
                        ],
                        "directEligibleFacilities": [
                          "945",
                          "342"
                        ]
                      },
                      {
                        "name": "clinicalPharmacyPrimaryCare",
                        "requestEligibleFacilities": [
                          "942",
                          "123"
                        ],
                        "directEligibleFacilities": [
                          "945",
                          "342"
                        ]
                      },
                      {
                        "name": "podiatry",
                        "requestEligibleFacilities": [
                          "942",
                          "123"
                        ],
                        "directEligibleFacilities": [
                          "945",
                          "342"
                        ]
                      },
                      {
                        "name": "primaryCare",
                        "requestEligibleFacilities": [
                          "942",
                          "123"
                        ],
                        "directEligibleFacilities": [
                          "945",
                          "342"
                        ]
                      },
                      {
                        "name": "homeSleepTesting",
                        "requestEligibleFacilities": [
                          "942",
                          "123"
                        ],
                        "directEligibleFacilities": [
                          "945",
                          "342"
                        ]
                      },
                      {
                        "name": "socialWork",
                        "requestEligibleFacilities": [
                          "942",
                          "123"
                        ],
                        "directEligibleFacilities": [
                          "945",
                          "342"
                        ]
                      },
                      {
                        "name": "cpap",
                        "requestEligibleFacilities": [
                          "942",
                          "123"
                        ],
                        "directEligibleFacilities": [
                          "945",
                          "342"
                        ]
                      },
                      {
                        "name": "ophthalmology",
                        "requestEligibleFacilities": [
                          "942",
                          "123"
                        ],
                        "directEligibleFacilities": [
                          "945",
                          "342"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "AppointmentKind": {
        "type": "string",
        "enum": [
          "clinic",
          "cc",
          "telehealth",
          "phone"
        ],
        "description": "The kind of appointment:\n * clinic - A clinic (in-person) appointment\n * cc - A community-care appointment\n * telehealth - A virtual appointment\n"
      },
      "Practitioner": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "identifier",
          "address"
        ],
        "properties": {
          "identifier": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "system",
                "value"
              ],
              "properties": {
                "system": {
                  "type": "string",
                  "example": "http://hl7.org/fhir/sid/us-npi"
                },
                "value": {
                  "type": "string",
                  "example": 1407938061
                }
              }
            }
          },
          "address": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "line",
              "city",
              "state",
              "postal_code"
            ],
            "properties": {
              "type": {
                "type": "string",
                "example": "postal"
              },
              "line": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "38143 Martha Ave"
                }
              },
              "city": {
                "type": "string",
                "example": "Fremont"
              },
              "state": {
                "type": "string",
                "example": "CA"
              },
              "postal_code": {
                "type": "string",
                "example": 94536
              },
              "country": {
                "type": "string",
                "example": "USA"
              },
              "text": {
                "type": "string",
                "example": "test"
              }
            }
          }
        }
      },
      "Period": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "start",
          "end"
        ],
        "properties": {
          "start": {
            "type": "string",
            "description": "start time of period",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "description": "end time of period",
            "format": "date-time"
          }
        }
      },
      "ContactPoint": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "value"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "email",
              "phone"
            ],
            "nullable": false,
            "example": "phone"
          },
          "value": {
            "type": "string",
            "nullable": false,
            "example": "7036753607"
          }
        }
      },
      "PatientContact": {
        "description": "Patient contact information",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "telecom"
        ],
        "properties": {
          "telecom": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactPoint"
            }
          }
        }
      },
      "PreferredLocation": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "city",
          "state"
        ],
        "properties": {
          "city": {
            "maxLength": 64,
            "type": "string",
            "example": "Helena"
          },
          "state": {
            "maxLength": 32,
            "type": "string",
            "example": "MT"
          }
        },
        "description": "The location that the veteran requested the appointment to be scheduled in."
      },
      "CreateAppointmentCC": {
        "description": "A request to create a new appointment.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "kind",
          "status",
          "serviceType",
          "locationId",
          "requestedPeriods",
          "contact",
          "preferredTimesForPhoneCall",
          "comment",
          "preferredLocation",
          "preferredLanguage"
        ],
        "properties": {
          "kind": {
            "$ref": "#/components/schemas/AppointmentKind",
            "example": "clinic"
          },
          "status": {
            "type": "string",
            "description": "Always 'proposed' for requests",
            "enum": [
              "proposed"
            ],
            "example": "proposed"
          },
          "serviceType": {
            "type": "string",
            "description": "The care type for the appointment",
            "enum": [
              "amputation",
              "audiology-hearing aid support",
              "audiology-routine exam",
              "covid",
              "optometry",
              "outpatientMentalHealth",
              "moveProgram",
              "foodAndNutrition",
              "clinicalPharmacyPrimaryCare",
              "podiatry",
              "primaryCare",
              "homeSleepTesting",
              "socialWork",
              "cpap",
              "ophthalmology"
            ],
            "example": "optometry"
          },
          "practitioners": {
            "description": "practitioners",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Practitioner"
            }
          },
          "locationId": {
            "description": "The sta6aid for the VAfacility where the appointment is registered.",
            "type": "string",
            "example": "983GC"
          },
          "requestedPeriods": {
            "type": "array",
            "description": "A list of requested periods for appointment.",
            "items": {
              "$ref": "#/components/schemas/Period"
            },
            "example": [
              {
                "start": "2022-03-17T00:00:00Z",
                "end": "2022-03-17T11:59:00Z"
              }
            ]
          },
          "contact": {
            "$ref": "#/components/schemas/PatientContact"
          },
          "preferredTimesForPhoneCall": {
            "type": "array",
            "description": "A list of times the patient prefers to be contacted by phone.",
            "items": {
              "type": "string",
              "enum": [
                "Morning",
                "Afternoon",
                "Evening"
              ]
            },
            "example": [
              "Morning"
            ]
          },
          "preferredLocation": {
            "description": "A list of times the patient prefers to be contacted by phone.",
            "$ref": "#/components/schemas/PreferredLocation"
          },
          "comment": {
            "description": "Free-form comment section to provide additional information about an appointment request.",
            "type": "string",
            "example": "free form comment here"
          },
          "preferredLanguage": {
            "description": "Preferred Language",
            "type": "string",
            "example": "English"
          }
        }
      },
      "ReasonCode": {
        "type": "object",
        "description": "Reason for appointment. A reason will be selected, along with a required free form response. If no reason was provided ('My reason isn't listed' option) then no 'coding' field array will be provided and text field will be populated with the free form comment",
        "required": [
          "coding",
          "text"
        ],
        "properties": {
          "coding": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "code": {
                  "type": "string",
                  "enum": [
                    "Routine Follow-up",
                    "Medication Concern",
                    "New Problem"
                  ],
                  "example": "Routine Follow-up"
                }
              }
            }
          },
          "text": {
            "type": "string",
            "example": "free form comment here",
            "maxLength": 100
          }
        }
      },
      "CreateAppointmentRequest": {
        "description": "A request to create a new appointment.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "kind",
          "status",
          "serviceType",
          "reasonCode",
          "locationId",
          "requestedPeriods",
          "contact",
          "preferredTimesForPhoneCall"
        ],
        "properties": {
          "kind": {
            "$ref": "#/components/schemas/AppointmentKind",
            "example": "clinic"
          },
          "status": {
            "type": "string",
            "description": "Always 'proposed' for requests",
            "enum": [
              "proposed"
            ],
            "example": "proposed"
          },
          "preferredTimesForPhoneCall": {
            "type": "array",
            "description": "A list of times the patient prefers to be contacted by phone.",
            "items": {
              "type": "string",
              "enum": [
                "Morning",
                "Afternoon",
                "Evening"
              ]
            },
            "example": [
              "Morning"
            ]
          },
          "serviceType": {
            "type": "string",
            "description": "the care type for the appointment",
            "enum": [
              "amputation",
              "audiology-hearing aid support",
              "audiology-routine exam",
              "covid",
              "optometry",
              "outpatientMentalHealth",
              "moveProgram",
              "foodAndNutrition",
              "clinicalPharmacyPrimaryCare",
              "podiatry",
              "primaryCare",
              "homeSleepTesting",
              "socialWork",
              "cpap",
              "ophthalmology"
            ],
            "example": "optometry"
          },
          "reasonCode": {
            "type": "object",
            "additionalProperties": false,
            "$ref": "#/components/schemas/ReasonCode"
          },
          "locationId": {
            "description": "The sta6aid for the VAfacility where the appointment is registered.",
            "type": "string",
            "example": "983GC"
          },
          "requestedPeriods": {
            "type": "array",
            "description": "A list of requested periods for appointment.",
            "items": {
              "$ref": "#/components/schemas/Period"
            },
            "example": [
              {
                "start": "2022-03-17T00:00:00Z",
                "end": "2022-03-17T11:59:00Z"
              }
            ]
          },
          "contact": {
            "$ref": "#/components/schemas/PatientContact"
          }
        }
      },
      "CreateAppointmentDirect": {
        "description": "Direct schedule new appointment",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "kind",
          "clinic",
          "status",
          "reasonCode",
          "slot",
          "extension",
          "locationId"
        ],
        "properties": {
          "kind": {
            "enum": [
              "clinic"
            ],
            "example": "clinic"
          },
          "clinic": {
            "description": "Clinic Id",
            "type": "string",
            "example": "1184"
          },
          "status": {
            "type": "string",
            "description": "Always 'booked' for direct schedule",
            "enum": [
              "booked"
            ],
            "example": "booked"
          },
          "reasonCode": {
            "type": "object",
            "additionalProperties": false,
            "$ref": "#/components/schemas/ReasonCode"
          },
          "slot": {
            "type": "object",
            "additionalProperties": false,
            "description": "Id of direct schedule time slot",
            "example": {
              "id": "3230323230383032313833303A323032323038303231393030"
            }
          },
          "extension": {
            "type": "object",
            "additionalProperties": false,
            "description": "date of direct schedule time slot",
            "example": {
              "desiredDate": "2022-08-02T00:00:00+00:00"
            }
          },
          "locationId": {
            "description": "The sta6aid for the VAfacility where the appointment is registered.",
            "type": "string",
            "example": "983GC"
          }
        }
      },
      "AppointmentIdentifier": {
        "required": [
          "system",
          "value"
        ],
        "type": "object",
        "properties": {
          "system": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "AppointmentStatus": {
        "type": "string",
        "description": "Required for VA and CC Requests. Documentation at https://hl7.org/fhir/R4/valueset-appointmentstatus.html",
        "enum": [
          "proposed",
          "cancelled",
          "pending",
          "booked",
          "arrived",
          "noshow",
          "fulfilled"
        ]
      },
      "Coding": {
        "properties": {
          "system": {
            "type": "string",
            "description": "Identity of the terminology system"
          },
          "code": {
            "type": "string",
            "description": "Symbol in syntax defined by the system"
          },
          "display": {
            "type": "string",
            "description": "A human-readable representation defined by the system."
          }
        },
        "description": "A Coding is a representation of a defined concept using a symbol from a defined \"code system\". FHIR reference: https://www.hl7.org/fhir/datatypes.html#Coding"
      },
      "CodeableConcept": {
        "properties": {
          "coding": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coding"
            }
          },
          "text": {
            "type": "string",
            "description": "Plain text representation of the concept"
          }
        },
        "description": "A CodeableConcept represents a value that is usually supplied by providing a reference to one or more terminologies or ontologies. FHIR reference: https://www.hl7.org/fhir/datatypes.html#CodeableConcept"
      },
      "TasAddress": {
        "type": "object",
        "properties": {
          "streetAddress": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "zipCode": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "latitutde": {
            "description": "Latitude of the site",
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "description": "Longitude of the site",
            "type": "number",
            "format": "double"
          },
          "additionalDetails": {
            "description": "AdditionalDetails of the site",
            "type": "string"
          }
        }
      },
      "TasInfo": {
        "type": "object",
        "properties": {
          "siteCode": {
            "description": "The telehealth access site (TAS) site ID.",
            "type": "string"
          },
          "confirmationCode": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/TasAddress"
          }
        }
      },
      "TelehealthInfo": {
        "description": "Details about a telehealth (virtual) meeting.",
        "type": "object",
        "properties": {
          "url": {
            "description": "The meeting URL.",
            "type": "string"
          },
          "atlas": {
            "$ref": "#/components/schemas/TasInfo"
          }
        }
      },
      "AppointmentRequestAddress": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "postal",
              "physical",
              "both"
            ]
          },
          "line": {
            "type": "array",
            "description": "Street name, number, direction & P.O. Box etc. The order of the items is order in which lines should appear in an address label.",
            "items": {
              "type": "string"
            }
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        }
      },
      "CommunityCareLocation": {
        "type": "object",
        "properties": {
          "practiceName": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/AppointmentRequestAddress"
          }
        },
        "description": "Information about the location of a community care appointment."
      },
      "AppointmentExtensions": {
        "type": "object",
        "properties": {
          "desiredDate": {
            "type": "string",
            "description": "Optional field indicating the date and time that the patient originally desired to have the appointment. Used for reporting with VistA appointments.",
            "format": "date-time"
          },
          "ccLocation": {
            "$ref": "#/components/schemas/CommunityCareLocation"
          },
          "ccRequestedCancellation": {
            "type": "boolean",
            "description": "Indicates if a cancellation request has been submitted for an appointment request."
          }
        },
        "description": "Non-standard FHIR Appointment attributes."
      },
      "NewAppointment": {
        "description": "Information about a future or past meeting.",
        "type": "object",
        "properties": {
          "id": {
            "description": "A unique identifier for this appointment.",
            "type": "string",
            "maxLength": 64
          },
          "identifier": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppointmentIdentifier"
            }
          },
          "kind": {
            "$ref": "#/components/schemas/AppointmentKind"
          },
          "status": {
            "$ref": "#/components/schemas/AppointmentStatus"
          },
          "serviceType": {
            "description": "the care type for the appointment",
            "type": "string"
          },
          "reasonCode": {
            "$ref": "#/components/schemas/CodeableConcept"
          },
          "priority": {
            "minimum": 0,
            "type": "number",
            "format": "int32"
          },
          "patientIcn": {
            "description": "The patient ICN",
            "type": "string",
            "nullable": false
          },
          "locationId": {
            "description": "The sta6aid for the VAfacility where the appointment is registered.",
            "type": "string"
          },
          "clinic": {
            "description": "The clinic ID for the Appointment",
            "type": "string"
          },
          "clinicName": {
            "description": "The clinic name for the Appointment",
            "type": "string"
          },
          "practitioners": {
            "description": "The practitioners participating in this appointment.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Practitioner"
            }
          },
          "start": {
            "description": "The start time of the appointment.",
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "description": "The end time of the appointment.",
            "type": "string",
            "format": "date-time"
          },
          "minutesDuration": {
            "type": "integer",
            "description": "The duration of the meeting, in minutes."
          },
          "slot": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
                "type": "string",
                "description": "The slot ID"
              },
              "start": {
                "type": "string",
                "description": "Date/Time that the slot is to begin.",
                "format": "date-time"
              },
              "end": {
                "type": "string",
                "description": "Date/Time that the slot is to end.",
                "format": "date-time"
              }
            }
          },
          "created": {
            "type": "string",
            "description": "The date this appointment was initially created.",
            "format": "date-time"
          },
          "preferredLocation": {
            "$ref": "#/components/schemas/PreferredLocation"
          },
          "requestedPeriods": {
            "type": "array",
            "description": "a list of requested periods for appointment",
            "items": {
              "$ref": "#/components/schemas/Period"
            }
          },
          "contact": {
            "$ref": "#/components/schemas/PatientContact"
          },
          "preferredTimesForPhoneCall": {
            "type": "array",
            "description": "a list of times the patient prefers to be contacted by phone",
            "items": {
              "type": "string",
              "enum": [
                "Morning",
                "Afternoon",
                "Evening"
              ]
            }
          },
          "cancelationReason": {
            "$ref": "#/components/schemas/CodeableConcept"
          },
          "description": {
            "description": "Not used.",
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "preferredLanguage": {
            "type": "string"
          },
          "cancellable": {
            "type": "boolean",
            "description": "If true then this logical appointment can be cancelled."
          },
          "patientInstruction": {
            "type": "string",
            "description": "Detailed information and instructions for the patient. See: https://www.hl7.org/fhir/appointment-definitions.html#Appointment.patientInstruction"
          },
          "telehealth": {
            "$ref": "#/components/schemas/TelehealthInfo"
          },
          "extension": {
            "$ref": "#/components/schemas/AppointmentExtensions"
          }
        }
      },
      "Awards": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "example": "awards"
              },
              "id": {
                "type": "string",
                "example": "f26bc1f0-c389-4f3c-86e0-7712fb08fbe6"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "id",
                  "aportnRecipId",
                  "awardAmt",
                  "awardCmpsitId",
                  "awardCurntStatusCd",
                  "awardEventId",
                  "awardLineReportId",
                  "awardLineTypeCd",
                  "awardStnNbr",
                  "awardTypeCd",
                  "combndDegreePct",
                  "depHlplsThisNbr",
                  "depHlplsTotalNbr",
                  "depSchoolThisNbr",
                  "depSchoolTotalNbr",
                  "depThisNbr",
                  "depTotalNbr",
                  "efctvDt",
                  "entlmtTypeCd",
                  "fileNbr",
                  "futureEfctvDt",
                  "grossAdjsmtAmt",
                  "grossAmt",
                  "ivapAmt",
                  "jrnDt",
                  "jrnLctnId",
                  "jrnObjId",
                  "jrnStatusTypeCd",
                  "jrnUserId",
                  "netAmt",
                  "payeeTypeCd",
                  "priorEfctvDt",
                  "ptcptBeneId",
                  "ptcptVetId",
                  "reasonOneTxt",
                  "spouseTxt"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "f26bc1f0-c389-4f3c-86e0-7712fb08fbe6",
                    "description": "user UUID"
                  },
                  "aportnRecipId": {
                    "type": "integer",
                    "example": 2810777
                  },
                  "awardAmt": {
                    "type": "decimal",
                    "example": 541.83
                  },
                  "awardCmpsitId": {
                    "type": "string",
                    "example": "10976"
                  },
                  "awardCurntStatusCd": {
                    "type": "string",
                    "example": "A"
                  },
                  "awardEventId": {
                    "type": "string",
                    "example": "13724"
                  },
                  "awardLineReportId": {
                    "type": "string",
                    "example": "37898"
                  },
                  "awardLineTypeCd": {
                    "type": "string",
                    "example": "C"
                  },
                  "awardStnNbr": {
                    "type": "string",
                    "example": "317"
                  },
                  "awardTypeCd": {
                    "type": "string",
                    "example": "CPL"
                  },
                  "combndDegreePct": {
                    "type": "string",
                    "example": "30"
                  },
                  "depHlplsThisNbr": {
                    "type": "integer",
                    "example": 0
                  },
                  "depHlplsTotalNbr": {
                    "type": "integer",
                    "example": 0
                  },
                  "depSchoolThisNbr": {
                    "type": "integer",
                    "example": 0
                  },
                  "depSchoolTotalNbr": {
                    "type": "integer",
                    "example": 0
                  },
                  "depThisNbr": {
                    "type": "integer",
                    "example": 12
                  },
                  "depTotalNbr": {
                    "type": "integer",
                    "example": 12
                  },
                  "efctvDt": {
                    "type": "date",
                    "example": "2020-08-01T00:00:00.000-05:00"
                  },
                  "entlmtTypeCd": {
                    "type": "string",
                    "example": "41"
                  },
                  "fileNbr": {
                    "type": "integer",
                    "example": 796121200
                  },
                  "futureEfctvDt": {
                    "type": "string",
                    "example": "2021-07-15T00:00:00.000-05:00"
                  },
                  "grossAdjsmtAmt": {
                    "type": "decimal",
                    "example": 0
                  },
                  "grossAmt": {
                    "type": "decimal",
                    "example": 541.83
                  },
                  "ivapAmt": {
                    "type": "decimal",
                    "example": 0
                  },
                  "jrnDt": {
                    "type": "string",
                    "example": "2020-08-03T18:15:02.000-05:00"
                  },
                  "jrnLctnId": {
                    "type": "string",
                    "example": "281"
                  },
                  "jrnObjId": {
                    "type": "string",
                    "example": "AWARD COMPOSITE"
                  },
                  "jrnStatusTypeCd": {
                    "type": "string",
                    "example": "I"
                  },
                  "jrnUserId": {
                    "type": "string",
                    "example": "BATCH"
                  },
                  "netAmt": {
                    "type": "decimal",
                    "example": 541.83
                  },
                  "payeeTypeCd": {
                    "type": "string",
                    "example": "00"
                  },
                  "priorEfctvDt": {
                    "type": "string",
                    "example": "2020-07-01T00:00:00.000"
                  },
                  "ptcptBeneId": {
                    "type": "string",
                    "example": "2810777"
                  },
                  "ptcptVetId": {
                    "type": "string",
                    "example": "2810777"
                  },
                  "reasonOneTxt": {
                    "type": "string",
                    "example": "21"
                  },
                  "spouseTxt": {
                    "type": "string",
                    "example": "Spouse"
                  }
                }
              }
            }
          }
        }
      },
      "claimDocument": {
        "type": "object",
        "properties": {
          "tracked_item_id": {
            "type": "integer",
            "example": 360052
          },
          "file_type": {
            "type": "integer",
            "example": "Civilian Police Reports"
          },
          "document_type": {
            "type": null,
            "example": null
          },
          "filename": {
            "type": "string",
            "example": "7B434B58-477C-4379-816F-05E6D3A10487.pdf"
          },
          "upload_date": {
            "type": "string",
            "example": "2023-03-01"
          }
        }
      },
      "claimEventTimeline": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "received_from_you_list"
          },
          "tracked_item_id": {
            "type": "integer",
            "example": 360052
          },
          "description": {
            "type": "string",
            "example": "The information provided concerning your prior marital history is inconsistent. In order to resolve these inconsistencies you should submit certified copies of the public record of the termination (death, divorce or annulment) for each of your prior marriages."
          },
          "display_name": {
            "type": "string",
            "example": "Claimant marital history inconsistent - need proof"
          },
          "overdue": {
            "type": "boolean",
            "example": true
          },
          "status": {
            "type": "string",
            "example": "NEEDED"
          },
          "uploaded": {
            "type": "boolean",
            "example": true
          },
          "uploads_allowed": {
            "type": "boolean",
            "example": true
          },
          "opened_date": {
            "type": "string",
            "example": "2022-09-30"
          },
          "requested_date": {
            "type": "string",
            "example": "2022-09-30"
          },
          "received_date": {
            "type": "string",
            "example": "2023-10-30"
          },
          "closed_date": {
            "type": "string",
            "example": "2023-11-30"
          },
          "suspense_date": {
            "type": "string",
            "example": "2023-05-30"
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/claimDocument"
            }
          },
          "upload_date": {
            "type": "string",
            "example": "2023-05-30"
          },
          "date": {
            "type": "string",
            "example": "2023-05-30"
          },
          "file_type": {
            "type": "integer",
            "example": "Civilian Police Reports"
          },
          "document_type": {
            "type": null,
            "example": null
          },
          "filename": {
            "type": "string",
            "example": "7B434B58-477C-4379-816F-05E6D3A10487.pdf"
          }
        }
      },
      "Claim": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "example": "claim"
              },
              "id": {
                "type": "string",
                "example": "600117255",
                "description": "Upstream identifier. Same as provided id."
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "dateFiled",
                  "minEstDate",
                  "maxEstDate",
                  "open",
                  "waiverSubmitted",
                  "requestedDecision",
                  "contentionList",
                  "eventsTimeline",
                  "phaseChangeDate",
                  "vaRepresentative",
                  "documentsNeeded",
                  "developmentLetterSent",
                  "decisionLetterSent",
                  "updatedAt",
                  "phase",
                  "claimType",
                  "everPhaseBack",
                  "currentPhaseBack",
                  "claimTypeCode"
                ],
                "properties": {
                  "dateFiled": {
                    "type": "string",
                    "example": "2017-12-08"
                  },
                  "minEstDate": {
                    "type": "string, null",
                    "example": "2017-12-08"
                  },
                  "maxEstDate": {
                    "type": "string, null",
                    "example": "2017-12-08"
                  },
                  "open": {
                    "type": "boolean"
                  },
                  "waiverSubmitted": {
                    "type": "boolean"
                  },
                  "requestedDecision": {
                    "type": "boolean"
                  },
                  "contentionList": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "Abdominal pain, etiology unknown (New)"
                    }
                  },
                  "eventsTimeline": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/claimEventTimeline"
                    }
                  },
                  "phaseChangeDate": {
                    "type": "string, null",
                    "example": "2017-12-08"
                  },
                  "vaRepresentative": {
                    "type": "string",
                    "example": "DALE M BOETTCHER"
                  },
                  "documentsNeeded": {
                    "type": "boolean"
                  },
                  "developmentLetterSent": {
                    "type": "boolean"
                  },
                  "decisionLetterSent": {
                    "type": "boolean"
                  },
                  "updatedAt": {
                    "type": "string",
                    "example": "2017-12-13T03:28:23+00:00"
                  },
                  "phase": {
                    "type": "integer",
                    "description": "The phase of processing the claim is in. The integers used map to the phases as `1 => CLAIM_RECEIVED, 2 => UNDER_REVIEW, 3 => GATHERING_OF_EVIDENCE, 4 => REVIEW_OF_EVIDENCE, 5 => PREPARATION_FOR_DECISION, 6 => PENDING_DECISION_APPROVAL, 7 => PREPARATION_FOR_NOTIFICATION, 8 => COMPLETE`",
                    "example": 2
                  },
                  "claimType": {
                    "type": "string",
                    "example": "Compensation"
                  },
                  "everPhaseBack": {
                    "type": "boolean"
                  },
                  "currentPhaseBack": {
                    "type": "boolean"
                  },
                  "claimTypeCode": {
                    "type": "string",
                    "example": "020NEW"
                  }
                }
              }
            }
          }
        }
      },
      "ClaimDocUpload": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "jobId"
            ],
            "properties": {
              "jobId": {
                "type": "string",
                "enum": [
                  "success",
                  "failure"
                ],
                "example": "success",
                "description": "job status"
              }
            }
          }
        }
      },
      "ClaimUploadRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "files",
          "trackedItemId",
          "documentType"
        ],
        "properties": {
          "files": {
            "type": "array",
            "description": "base64 strings of images to upload together",
            "items": {
              "type": "string"
            }
          },
          "trackedItemId": {
            "type": "string",
            "description": "item id from claim eventsTimeline"
          },
          "documentType": {
            "type": "string",
            "example": "L827"
          }
        }
      },
      "DecisionLetterRecord": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "{87B6DE5D-CD79-4D15-B6DC-A5F9A324DC3E}",
            "description": "Document id"
          },
          "type": {
            "type": "string",
            "example": "decisionLetter"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "seriesId",
              "version",
              "typeDescription",
              "typeId",
              "docType",
              "subject",
              "receivedAt",
              "source",
              "mimeType",
              "altDocTypes",
              "restricted",
              "uploadDate"
            ],
            "properties": {
              "seriesId": {
                "type": "string, null",
                "example": "{EC1B5F0C-E3FB-4A41-B93F-E1A88D549CDF}"
              },
              "version": {
                "type": "string, null",
                "example": "1"
              },
              "typeDescription": {
                "type": "string, null",
                "example": "Notification Letter (e.g. VA 20-8993, VA 21-0290, PCGL)"
              },
              "typeId": {
                "type": "string, null",
                "example": "184"
              },
              "docType": {
                "type": "string, null",
                "example": "184"
              },
              "subject": {
                "type": "string, null",
                "example": null
              },
              "receivedAt": {
                "type": "date",
                "example": "2022-09-22"
              },
              "source": {
                "type": "string, null",
                "example": "VBMS"
              },
              "mimeType": {
                "type": "string, null",
                "example": "application/pdf"
              },
              "altDocTypes": {
                "type": "string, null",
                "example": ""
              },
              "restricted": {
                "type": "boolean",
                "example": false
              },
              "uploadDate": {
                "type": "date, null",
                "example": "2022-09-23"
              }
            }
          }
        }
      },
      "DecisionLetters": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "$ref": "#/components/schemas/DecisionLetterRecord"
            }
          }
        }
      },
      "phone": {
        "type": "string",
        "minLength": 10,
        "maxLength": 20,
        "pattern": "^(?:\\D*\\d){10,15}\\D*$"
      },
      "address": {
        "type": "object",
        "oneOf": [
          {
            "properties": {
              "country": {
                "type": "string",
                "enum": [
                  "CAN"
                ]
              },
              "state": {
                "type": "string",
                "enum": [
                  "AB",
                  "BC",
                  "MB",
                  "NB",
                  "NF",
                  "NT",
                  "NV",
                  "NU",
                  "ON",
                  "PE",
                  "QC",
                  "SK",
                  "YT"
                ],
                "maxLength": 3
              },
              "postalCode": {
                "type": "string",
                "maxLength": 10
              }
            }
          },
          {
            "properties": {
              "country": {
                "type": "string",
                "enum": [
                  "MEX"
                ]
              },
              "state": {
                "type": "string",
                "enum": [
                  "aguascalientes",
                  "baja-california-norte",
                  "baja-california-sur",
                  "campeche",
                  "chiapas",
                  "chihuahua",
                  "coahuila",
                  "colima",
                  "distrito-federal",
                  "durango",
                  "guanajuato",
                  "guerrero",
                  "hidalgo",
                  "jalisco",
                  "mexico",
                  "michoacan",
                  "morelos",
                  "nayarit",
                  "nuevo-leon",
                  "oaxaca",
                  "puebla",
                  "queretaro",
                  "quintana-roo",
                  "san-luis-potosi",
                  "sinaloa",
                  "sonora",
                  "tabasco",
                  "tamaulipas",
                  "tlaxcala",
                  "veracruz",
                  "yucatan",
                  "zacatecas"
                ],
                "maxLength": 3
              },
              "postalCode": {
                "type": "string",
                "maxLength": 10
              }
            }
          },
          {
            "properties": {
              "country": {
                "type": "string",
                "enum": [
                  "USA"
                ]
              },
              "state": {
                "type": "string",
                "enum": [
                  "AL",
                  "AK",
                  "AS",
                  "AZ",
                  "AR",
                  "AA",
                  "AE",
                  "AP",
                  "CA",
                  "CO",
                  "CT",
                  "DE",
                  "DC",
                  "FM",
                  "FL",
                  "GA",
                  "GU",
                  "HI",
                  "ID",
                  "IL",
                  "IN",
                  "IA",
                  "KS",
                  "KY",
                  "LA",
                  "ME",
                  "MH",
                  "MD",
                  "MA",
                  "MI",
                  "MN",
                  "MS",
                  "MO",
                  "MT",
                  "NE",
                  "NV",
                  "NH",
                  "NJ",
                  "NM",
                  "NY",
                  "NC",
                  "ND",
                  "MP",
                  "OH",
                  "OK",
                  "OR",
                  "PW",
                  "PA",
                  "PR",
                  "RI",
                  "SC",
                  "SD",
                  "TN",
                  "TX",
                  "UT",
                  "VT",
                  "VI",
                  "VA",
                  "WA",
                  "WV",
                  "WI",
                  "WY"
                ],
                "maxLength": 3
              },
              "postalCode": {
                "type": "string",
                "maxLength": 10
              }
            }
          },
          {
            "properties": {
              "country": {
                "not": {
                  "type": "string",
                  "enum": [
                    "CAN",
                    "MEX",
                    "USA"
                  ]
                }
              },
              "state": {
                "type": "string",
                "maxLength": 3
              },
              "postalCode": {
                "type": "string",
                "maxLength": 10
              }
            }
          }
        ],
        "properties": {
          "street": {
            "type": "string",
            "minLength": 1,
            "maxLength": 20
          },
          "street2": {
            "type": "string",
            "minLength": 1,
            "maxLength": 20
          },
          "city": {
            "type": "string",
            "minLength": 1,
            "maxLength": 20
          }
        },
        "required": [
          "street",
          "city",
          "state",
          "postalCode"
        ]
      },
      "fullName": {
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "minLength": 1,
            "maxLength": 15
          },
          "middle": {
            "type": "string",
            "maxLength": 15
          },
          "last": {
            "type": "string",
            "minLength": 1,
            "maxLength": 25
          },
          "suffix": {
            "type": "string",
            "enum": [
              "Jr.",
              "Sr.",
              "II",
              "III",
              "IV"
            ],
            "maxLength": 3
          }
        },
        "required": [
          "first",
          "last"
        ]
      },
      "date": {
        "type": "string",
        "format": "date"
      },
      "ssn": {
        "type": "string",
        "pattern": "^\\d{3}-\\d{2}-\\d{4}$"
      },
      "race": {
        "type": "object",
        "properties": {
          "isAmericanIndianOrAlaskanNative": {
            "type": "boolean"
          },
          "isAsian": {
            "type": "boolean"
          },
          "isBlackOrAfricanAmerican": {
            "type": "boolean"
          },
          "isSpanishHispanicLatino": {
            "type": "boolean"
          },
          "notSpanishHispanicLatino": {
            "type": "boolean"
          },
          "isNativeHawaiianOrOtherPacificIslander": {
            "type": "boolean"
          },
          "isWhite": {
            "type": "boolean"
          }
        }
      },
      "dateRange": {
        "type": "object",
        "properties": {
          "from": {
            "$ref": "#/components/schemas/date"
          },
          "to": {
            "$ref": "#/components/schemas/date"
          }
        }
      },
      "centralMailVaFile": {
        "type": "string",
        "pattern": "^\\d{8,9}$"
      },
      "CreatePreneedBurial": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "APPLICATION FOR PRE-NEED DETERMINATION OF ELIGIBILITY IN A VA NATIONAL CEMETERY",
        "type": "object",
        "additionalProperties": false,
        "definitions": {
          "address": {
            "type": "object",
            "oneOf": [
              {
                "properties": {
                  "country": {
                    "type": "string",
                    "enum": [
                      "CAN"
                    ]
                  },
                  "state": {
                    "type": "string",
                    "enum": [
                      "AB",
                      "BC",
                      "MB",
                      "NB",
                      "NF",
                      "NT",
                      "NV",
                      "NU",
                      "ON",
                      "PE",
                      "QC",
                      "SK",
                      "YT"
                    ],
                    "maxLength": 3
                  },
                  "postalCode": {
                    "type": "string",
                    "maxLength": 10
                  }
                }
              },
              {
                "properties": {
                  "country": {
                    "type": "string",
                    "enum": [
                      "MEX"
                    ]
                  },
                  "state": {
                    "type": "string",
                    "enum": [
                      "aguascalientes",
                      "baja-california-norte",
                      "baja-california-sur",
                      "campeche",
                      "chiapas",
                      "chihuahua",
                      "coahuila",
                      "colima",
                      "distrito-federal",
                      "durango",
                      "guanajuato",
                      "guerrero",
                      "hidalgo",
                      "jalisco",
                      "mexico",
                      "michoacan",
                      "morelos",
                      "nayarit",
                      "nuevo-leon",
                      "oaxaca",
                      "puebla",
                      "queretaro",
                      "quintana-roo",
                      "san-luis-potosi",
                      "sinaloa",
                      "sonora",
                      "tabasco",
                      "tamaulipas",
                      "tlaxcala",
                      "veracruz",
                      "yucatan",
                      "zacatecas"
                    ],
                    "maxLength": 3
                  },
                  "postalCode": {
                    "type": "string",
                    "maxLength": 10
                  }
                }
              },
              {
                "properties": {
                  "country": {
                    "type": "string",
                    "enum": [
                      "USA"
                    ]
                  },
                  "state": {
                    "type": "string",
                    "enum": [
                      "AL",
                      "AK",
                      "AS",
                      "AZ",
                      "AR",
                      "AA",
                      "AE",
                      "AP",
                      "CA",
                      "CO",
                      "CT",
                      "DE",
                      "DC",
                      "FM",
                      "FL",
                      "GA",
                      "GU",
                      "HI",
                      "ID",
                      "IL",
                      "IN",
                      "IA",
                      "KS",
                      "KY",
                      "LA",
                      "ME",
                      "MH",
                      "MD",
                      "MA",
                      "MI",
                      "MN",
                      "MS",
                      "MO",
                      "MT",
                      "NE",
                      "NV",
                      "NH",
                      "NJ",
                      "NM",
                      "NY",
                      "NC",
                      "ND",
                      "MP",
                      "OH",
                      "OK",
                      "OR",
                      "PW",
                      "PA",
                      "PR",
                      "RI",
                      "SC",
                      "SD",
                      "TN",
                      "TX",
                      "UT",
                      "VT",
                      "VI",
                      "VA",
                      "WA",
                      "WV",
                      "WI",
                      "WY"
                    ],
                    "maxLength": 3
                  },
                  "postalCode": {
                    "type": "string",
                    "maxLength": 10
                  }
                }
              },
              {
                "properties": {
                  "country": {
                    "not": {
                      "type": "string",
                      "enum": [
                        "CAN",
                        "MEX",
                        "USA"
                      ]
                    }
                  },
                  "state": {
                    "type": "string",
                    "maxLength": 3
                  },
                  "postalCode": {
                    "type": "string",
                    "maxLength": 10
                  }
                }
              }
            ],
            "properties": {
              "street": {
                "type": "string",
                "minLength": 1,
                "maxLength": 20
              },
              "street2": {
                "type": "string",
                "minLength": 1,
                "maxLength": 20
              },
              "city": {
                "type": "string",
                "minLength": 1,
                "maxLength": 20
              }
            },
            "required": [
              "street",
              "city",
              "state",
              "postalCode"
            ]
          },
          "dateRange": {
            "type": "object",
            "properties": {
              "from": {
                "$ref": "#/components/schemas/date"
              },
              "to": {
                "$ref": "#/components/schemas/date"
              }
            }
          },
          "files": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "size": {
                  "type": "integer"
                },
                "confirmationCode": {
                  "type": "string"
                }
              }
            }
          },
          "fullName": {
            "type": "object",
            "properties": {
              "first": {
                "type": "string",
                "minLength": 1,
                "maxLength": 15
              },
              "middle": {
                "type": "string",
                "maxLength": 15
              },
              "last": {
                "type": "string",
                "minLength": 1,
                "maxLength": 25
              },
              "suffix": {
                "type": "string",
                "enum": [
                  "Jr.",
                  "Sr.",
                  "II",
                  "III",
                  "IV"
                ],
                "maxLength": 3
              }
            },
            "required": [
              "first",
              "last"
            ]
          },
          "phone": {
            "type": "string",
            "minLength": 10,
            "maxLength": 20,
            "pattern": "^(?:\\D*\\d){10,15}\\D*$"
          },
          "ssn": {
            "type": "string",
            "pattern": "^\\d{3}-\\d{2}-\\d{4}$"
          },
          "centralMailVaFile": {
            "type": "string",
            "pattern": "^\\d{8,9}$"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "race": {
            "type": "object",
            "properties": {
              "isAmericanIndianOrAlaskanNative": {
                "type": "boolean"
              },
              "isAsian": {
                "type": "boolean"
              },
              "isBlackOrAfricanAmerican": {
                "type": "boolean"
              },
              "isSpanishHispanicLatino": {
                "type": "boolean"
              },
              "notSpanishHispanicLatino": {
                "type": "boolean"
              },
              "isNativeHawaiianOrOtherPacificIslander": {
                "type": "boolean"
              },
              "isWhite": {
                "type": "boolean"
              }
            }
          }
        },
        "properties": {
          "application": {
            "type": "object",
            "required": [
              "applicant",
              "claimant",
              "hasCurrentlyBuried",
              "veteran"
            ],
            "properties": {
              "applicant": {
                "type": "object",
                "required": [
                  "applicantRelationshipToClaimant",
                  "applicantEmail",
                  "applicantPhoneNumber",
                  "mailingAddress",
                  "name"
                ],
                "properties": {
                  "applicantEmail": {
                    "type": "string",
                    "maxLength": 50,
                    "format": "email"
                  },
                  "applicantPhoneNumber": {
                    "$ref": "#/components/schemas/phone"
                  },
                  "applicantRelationshipToClaimant": {
                    "type": "string",
                    "enum": [
                      "Self",
                      "Authorized Agent/Rep"
                    ]
                  },
                  "completingReason": {
                    "type": "string",
                    "maxLength": 256
                  },
                  "mailingAddress": {
                    "$ref": "#/components/schemas/address"
                  },
                  "name": {
                    "$ref": "#/components/schemas/fullName"
                  }
                }
              },
              "claimant": {
                "type": "object",
                "required": [
                  "address",
                  "dateOfBirth",
                  "name",
                  "relationshipToVet",
                  "ssn"
                ],
                "properties": {
                  "address": {
                    "$ref": "#/components/schemas/address"
                  },
                  "dateOfBirth": {
                    "$ref": "#/components/schemas/date"
                  },
                  "desiredCemetery": {
                    "type": "string",
                    "pattern": "^\\d{3}$"
                  },
                  "email": {
                    "type": "string",
                    "maxLength": 50,
                    "format": "email"
                  },
                  "name": {
                    "type": "object",
                    "properties": {
                      "first": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 15
                      },
                      "middle": {
                        "type": "string",
                        "maxLength": 15
                      },
                      "last": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 25
                      },
                      "suffix": {
                        "type": "string",
                        "enum": [
                          "Jr.",
                          "Sr.",
                          "II",
                          "III",
                          "IV"
                        ],
                        "maxLength": 3
                      },
                      "maiden": {
                        "type": "string",
                        "maxLength": 15
                      }
                    },
                    "required": [
                      "first",
                      "last"
                    ]
                  },
                  "phoneNumber": {
                    "$ref": "#/components/schemas/phone"
                  },
                  "relationshipToVet": {
                    "type": "string",
                    "enum": [
                      "1",
                      "2",
                      "3",
                      "4"
                    ]
                  },
                  "ssn": {
                    "$ref": "#/components/schemas/ssn"
                  }
                }
              },
              "veteran": {
                "type": "object",
                "required": [
                  "currentName",
                  "gender",
                  "isDeceased",
                  "maritalStatus",
                  "serviceName",
                  "serviceRecords",
                  "ssn",
                  "militaryStatus"
                ],
                "properties": {
                  "address": {
                    "$ref": "#/components/schemas/address"
                  },
                  "currentName": {
                    "type": "object",
                    "properties": {
                      "first": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 15
                      },
                      "middle": {
                        "type": "string",
                        "maxLength": 15
                      },
                      "last": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 25
                      },
                      "suffix": {
                        "type": "string",
                        "enum": [
                          "Jr.",
                          "Sr.",
                          "II",
                          "III",
                          "IV"
                        ],
                        "maxLength": 3
                      },
                      "maiden": {
                        "type": "string",
                        "maxLength": 15
                      }
                    },
                    "required": [
                      "first",
                      "last"
                    ]
                  },
                  "dateOfBirth": {
                    "$ref": "#/components/schemas/date"
                  },
                  "dateOfDeath": {
                    "$ref": "#/components/schemas/date"
                  },
                  "gender": {
                    "type": "string",
                    "enum": [
                      "Female",
                      "Male"
                    ]
                  },
                  "race": {
                    "$ref": "#/components/schemas/race"
                  },
                  "isDeceased": {
                    "type": "string",
                    "enum": [
                      "yes",
                      "no",
                      "unsure"
                    ]
                  },
                  "maritalStatus": {
                    "type": "string",
                    "enum": [
                      "Single",
                      "Separated",
                      "Married",
                      "Divorced",
                      "Widowed"
                    ]
                  },
                  "militaryServiceNumber": {
                    "type": "string",
                    "maxLength": 9,
                    "pattern": "^[A-Za-z0-9]{4,9}$"
                  },
                  "militaryStatus": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1,
                    "enum": [
                      "A",
                      "I",
                      "D",
                      "S",
                      "R",
                      "E",
                      "O",
                      "V",
                      "X"
                    ]
                  },
                  "placeOfBirth": {
                    "type": "string",
                    "maxLength": 100
                  },
                  "serviceName": {
                    "$ref": "#/components/schemas/fullName"
                  },
                  "serviceRecords": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "dateRange": {
                          "$ref": "#/components/schemas/dateRange"
                        },
                        "serviceBranch": {
                          "type": "string",
                          "enum": [
                            "AL",
                            "FS",
                            "FT",
                            "ES",
                            "CM",
                            "C3",
                            "C2",
                            "C4",
                            "C7",
                            "C5",
                            "GS",
                            "CI",
                            "FP",
                            "CS",
                            "CV",
                            "XG",
                            "CB",
                            "FF",
                            "GP",
                            "MO",
                            "NO",
                            "NN",
                            "NM",
                            "PA",
                            "PG",
                            "KC",
                            "PS",
                            "RO",
                            "CF",
                            "CE",
                            "AF",
                            "XF",
                            "AG",
                            "AR",
                            "AC",
                            "AA",
                            "AT",
                            "NG",
                            "XR",
                            "CO",
                            "CA",
                            "CC",
                            "GC",
                            "CG",
                            "XC",
                            "MC",
                            "MM",
                            "NA",
                            "XA",
                            "CD",
                            "PH",
                            "GU",
                            "WP",
                            "WA",
                            "WS",
                            "WR"
                          ]
                        },
                        "dischargeType": {
                          "type": "string",
                          "enum": [
                            "1",
                            "2",
                            "3",
                            "4",
                            "5",
                            "6",
                            "7"
                          ]
                        },
                        "highestRank": {
                          "type": "string",
                          "maxLength": 20
                        },
                        "nationalGuardState": {
                          "type": "string",
                          "maxLength": 3,
                          "enum": [
                            "AL",
                            "AK",
                            "AZ",
                            "AR",
                            "CA",
                            "CO",
                            "CT",
                            "DE",
                            "DC",
                            "FL",
                            "GA",
                            "GU",
                            "HI",
                            "ID",
                            "IL",
                            "IN",
                            "IA",
                            "KS",
                            "KY",
                            "LA",
                            "ME",
                            "MD",
                            "MA",
                            "MI",
                            "MN",
                            "MS",
                            "MO",
                            "MT",
                            "NE",
                            "NV",
                            "NH",
                            "NJ",
                            "NM",
                            "NY",
                            "NC",
                            "ND",
                            "OH",
                            "OK",
                            "OR",
                            "PA",
                            "PR",
                            "RI",
                            "SC",
                            "SD",
                            "TN",
                            "TX",
                            "UT",
                            "VT",
                            "VI",
                            "VA",
                            "WA",
                            "WV",
                            "WI",
                            "WY"
                          ],
                          "enumNames": [
                            "Alabama",
                            "Alaska",
                            "Arizona",
                            "Arkansas",
                            "California",
                            "Colorado",
                            "Connecticut",
                            "Delaware",
                            "District Of Columbia",
                            "Florida",
                            "Georgia",
                            "Guam",
                            "Hawaii",
                            "Idaho",
                            "Illinois",
                            "Indiana",
                            "Iowa",
                            "Kansas",
                            "Kentucky",
                            "Louisiana",
                            "Maine",
                            "Maryland",
                            "Massachusetts",
                            "Michigan",
                            "Minnesota",
                            "Mississippi",
                            "Missouri",
                            "Montana",
                            "Nebraska",
                            "Nevada",
                            "New Hampshire",
                            "New Jersey",
                            "New Mexico",
                            "New York",
                            "North Carolina",
                            "North Dakota",
                            "Ohio",
                            "Oklahoma",
                            "Oregon",
                            "Pennsylvania",
                            "Puerto Rico",
                            "Rhode Island",
                            "South Carolina",
                            "South Dakota",
                            "Tennessee",
                            "Texas",
                            "Utah",
                            "Vermont",
                            "Virgin Islands",
                            "Virginia",
                            "Washington",
                            "West Virginia",
                            "Wisconsin",
                            "Wyoming"
                          ]
                        }
                      },
                      "required": [
                        "serviceBranch"
                      ]
                    },
                    "minItems": 1
                  },
                  "ssn": {
                    "$ref": "#/components/schemas/ssn"
                  },
                  "vaClaimNumber": {
                    "$ref": "#/components/schemas/centralMailVaFile"
                  }
                }
              },
              "hasCurrentlyBuried": {
                "type": "string",
                "enum": [
                  "1",
                  "2",
                  "3"
                ]
              },
              "currentlyBuriedPersons": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "$ref": "#/components/schemas/fullName"
                    },
                    "cemeteryNumber": {
                      "type": "string",
                      "pattern": "^\\d{3}$"
                    }
                  }
                }
              },
              "preneedAttachments": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "maxLength": 50
                    },
                    "size": {
                      "type": "integer"
                    },
                    "confirmationCode": {
                      "type": "string"
                    },
                    "attachmentId": {
                      "type": "string",
                      "enum": [
                        "1",
                        "2",
                        "3",
                        "5",
                        "6"
                      ],
                      "enumNames": [
                        "Discharge",
                        "Marriage related",
                        "Dependent related",
                        "Letter",
                        "Other"
                      ]
                    }
                  },
                  "required": [
                    "attachmentId",
                    "confirmationCode",
                    "name"
                  ]
                }
              }
            }
          }
        }
      },
      "CreatePreneedBurialResponse": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "id",
                "type",
                "attributes"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "example": "9E68GA6Q3NBTx8mxT3VG",
                  "description": "upstream receive_application_id"
                },
                "type": {
                  "type": "string",
                  "example": "preneeds_receive_applications"
                },
                "attributes": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "receiveApplicationId",
                    "trackingNumber",
                    "returnCode",
                    "applicationUuid",
                    "returnDescription",
                    "submittedAt"
                  ],
                  "properties": {
                    "receiveApplicationId": {
                      "type": "string",
                      "example": "9E68GA6Q3NBTx8mxT3VG"
                    },
                    "trackingNumber": {
                      "type": "string",
                      "example": "9E68GA6Q3NBTx8mxT3VG"
                    },
                    "returnCode": {
                      "type": "integer",
                      "example": 0
                    },
                    "applicationUuid": {
                      "type": "string",
                      "example": "29d0af3b-4929-418a-89c8-fa1d696a3886"
                    },
                    "returnDescription": {
                      "type": "boolean",
                      "example": "PreNeed Application Received Successfully."
                    },
                    "submittedAt": {
                      "type": "string",
                      "example": "2023-11-09T17:43:19.534Z"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PreneedBurial": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "id",
                "type",
                "attributes"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "example": "915",
                  "description": "upstream identifier. Cemetery id"
                },
                "type": {
                  "type": "string",
                  "example": "cemetery"
                },
                "attributes": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "name",
                    "type"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "ABRAHAM LINCOLN NATIONAL CEMETERY"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "N",
                        "S",
                        "I",
                        "A",
                        "M"
                      ],
                      "description": "N=NATIONAL, S=STATE, I=INTERIOR, A=ARMY, P=PRIVATE, M=MILITARY",
                      "example": "N"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ClaimsAndAppeals": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "600117255",
            "description": "Claim or Appeal Id"
          },
          "type": {
            "type": "string",
            "example": "claim",
            "enum": [
              "claim",
              "appeal"
            ]
          },
          "attributes": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "subtype",
              "completed",
              "dateFiled",
              "updatedAt",
              "displayTitle",
              "decisionLetterSent",
              "phase",
              "documentsNeeded",
              "developmentLetterSent",
              "claimTypeCode"
            ],
            "properties": {
              "subtype": {
                "type": "string",
                "example": "Compensation",
                "description": "Human readable string for claim or appeal subtype"
              },
              "completed": {
                "type": "boolean"
              },
              "dateFiled": {
                "type": "string",
                "format": "date",
                "example": "2020-01-01"
              },
              "updatedAt": {
                "type": "string",
                "format": "date",
                "example": "2020-01-01"
              },
              "displayTitle": {
                "type": "string",
                "description": "Formatted title for display in mobile overview list",
                "example": "disability compensation appeal"
              },
              "decisionLetterSent": {
                "type": "boolean",
                "description": "decision letter will be available from endpoint /v0/claims/decision-letters if true",
                "example": "true"
              },
              "phase": {
                "type": "integer, null",
                "description": "The phase of processing the claim is in. This does not apply to appeals. The integers used map to the phases as `1 => CLAIM_RECEIVED, 2 => UNDER_REVIEW, 3 => GATHERING_OF_EVIDENCE, 4 => REVIEW_OF_EVIDENCE, 5 => PREPARATION_FOR_DECISION, 6 => PENDING_DECISION_APPROVAL, 7 => PREPARATION_FOR_NOTIFICATION, 8 => COMPLETE`",
                "example": 1
              },
              "documentsNeeded": {
                "type": "boolean, null",
                "description": "Documents are still needed.",
                "example": "true"
              },
              "developmentLetterSent": {
                "type": "boolean, null",
                "description": "Development letter has been sent.",
                "example": "true"
              },
              "claimTypeCode": {
                "type": "string",
                "description": "Type of claim",
                "example": "020NEW"
              }
            }
          }
        }
      },
      "ClaimsAndAppealsOverviewErrors": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "service",
          "errorDetails"
        ],
        "properties": {
          "service": {
            "type": "string",
            "enum": [
              "claims",
              "appeals"
            ]
          },
          "errorDetails": {
            "type": "string",
            "description": "List of errors encountered concatenated with semicolon delimiter.",
            "example": "Error 1 details; Error 2 details"
          }
        }
      },
      "ClaimsAndAppealsOverview": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data",
          "meta"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "$ref": "#/components/schemas/ClaimsAndAppeals"
            }
          },
          "meta": {
            "properties": {
              "errors": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "$ref": "#/components/schemas/ClaimsAndAppealsOverviewErrors",
                    "description": "Array info about failing upstream services"
                  }
                }
              },
              "pagination": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "currentPage",
                  "perPage",
                  "totalPages",
                  "totalEntries"
                ],
                "properties": {
                  "currentPage": {
                    "type": "number",
                    "example": 1
                  },
                  "perPage": {
                    "type": "number",
                    "example": 10
                  },
                  "totalPages": {
                    "type": "number",
                    "example": 2
                  },
                  "totalEntries": {
                    "type": "number",
                    "example": 15
                  }
                }
              },
              "activeClaimsCount": {
                "type": "number",
                "example": 3,
                "description": "Count of claims with `completed` set to false"
              }
            }
          }
        }
      },
      "ClaimsAndAppealsOverviewClaimsError": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data",
          "meta"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "id": {
                  "type": "string",
                  "example": "600117255",
                  "description": "Appeal Id"
                },
                "type": {
                  "type": "string",
                  "example": "appeal",
                  "enum": [
                    "appeal"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "subtype",
                    "completed",
                    "dateFiled",
                    "updatedAt",
                    "displayTitle"
                  ],
                  "properties": {
                    "subtype": {
                      "type": "string",
                      "example": "legacyAppeal",
                      "description": "Human readable string for appeal subtype"
                    },
                    "completed": {
                      "type": "boolean"
                    },
                    "dateFiled": {
                      "type": "string",
                      "format": "date",
                      "example": "2020-01-01"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date",
                      "example": "2020-01-01"
                    },
                    "displayTitle": {
                      "type": "string",
                      "description": "Formatted title for display in mobile overview list",
                      "example": "disability compensation appeal"
                    }
                  }
                }
              }
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "errors": {
                "type": "array",
                "description": "Array of objects of failing upstream services. Used for debugging only.",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "service",
                    "errorDetails"
                  ],
                  "properties": {
                    "service": {
                      "type": "string",
                      "example": "claims",
                      "enum": [
                        "claims"
                      ]
                    },
                    "errorDetails": {
                      "type": "string",
                      "description": "List of errors encountered concatenated with semicolon delimiter.",
                      "example": "Please define your custom text for this error in claims-webparts/ErrorCodeMessages.properties. [Unique ID: 1522946240935]"
                    }
                  }
                }
              },
              "pagination": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "currentPage",
                  "perPage",
                  "totalPages",
                  "totalEntries"
                ],
                "properties": {
                  "currentPage": {
                    "type": "number",
                    "example": 1
                  },
                  "perPage": {
                    "type": "number",
                    "example": 10
                  },
                  "totalPages": {
                    "type": "number",
                    "example": 2
                  },
                  "totalEntries": {
                    "type": "number",
                    "example": 15
                  }
                }
              }
            }
          }
        }
      },
      "ClaimsAndAppealsOverviewAppealsError": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data",
          "meta"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "id": {
                  "type": "string",
                  "example": "600117255",
                  "description": "Claim Id"
                },
                "type": {
                  "type": "string",
                  "example": "claim",
                  "enum": [
                    "claim"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "subtype",
                    "completed",
                    "dateFiled",
                    "updatedAt",
                    "displayTitle"
                  ],
                  "properties": {
                    "subtype": {
                      "type": "string",
                      "example": "Compensation",
                      "description": "Human readable string for claim or appeal subtype"
                    },
                    "completed": {
                      "type": "boolean"
                    },
                    "dateFiled": {
                      "type": "string",
                      "format": "date",
                      "example": "2020-01-01"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date",
                      "example": "2020-01-01"
                    },
                    "displayTitle": {
                      "type": "string",
                      "description": "Formatted title for display in mobile overview list",
                      "example": "disability compensation appeal"
                    }
                  }
                }
              }
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "errors": {
                "type": "array",
                "description": "Array of objects of failing upstream services. Used for debugging only.",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "service",
                    "errorDetails"
                  ],
                  "properties": {
                    "service": {
                      "type": "string",
                      "example": "appeals",
                      "enum": [
                        "appeals"
                      ]
                    },
                    "errorDetails": {
                      "type": "string",
                      "description": "List of errors encountered concatenated with semicolon delimiter.",
                      "example": "Received a 500 response from the upstream server"
                    }
                  }
                }
              },
              "pagination": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "currentPage",
                  "perPage",
                  "totalPages",
                  "totalEntries"
                ],
                "properties": {
                  "currentPage": {
                    "type": "number",
                    "example": 1
                  },
                  "perPage": {
                    "type": "number",
                    "example": 10
                  },
                  "totalPages": {
                    "type": "number",
                    "example": 2
                  },
                  "totalEntries": {
                    "type": "number",
                    "example": 15
                  }
                }
              }
            }
          }
        }
      },
      "FacilityAddress": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "street",
          "city",
          "state",
          "zipCode"
        ],
        "properties": {
          "street": {
            "type": "string",
            "example": "2360 East Pershing Boulevard"
          },
          "city": {
            "type": "string",
            "example": "Columbus"
          },
          "state": {
            "type": "string",
            "example": "OH"
          },
          "zipCode": {
            "type": "string",
            "example": "82001-5356"
          }
        }
      },
      "CommunityCareProvider": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "example": "community_care_provider"
          },
          "id": {
            "type": "string",
            "example": "23fe358d-6e82-4541-804c-ce7562ba28f4",
            "description": "Upstream identifier. provider id."
          },
          "attributes": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "name",
              "address",
              "distance"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "Dr. Smith"
              },
              "address": {
                "type": "object",
                "additionalProperties": false,
                "$ref": "#/components/schemas/FacilityAddress"
              },
              "distance": {
                "type": "float",
                "example": 1.234
              }
            }
          }
        }
      },
      "CommunityCareProviders": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "$ref": "#/components/schemas/CommunityCareProvider"
            }
          }
        }
      },
      "Debts": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data",
          "meta"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "example": "fe1776a8-3908-4efe-8e20-8dd31440ccb9",
                  "description": "User UUID"
                },
                "type": {
                  "type": "string",
                  "example": "debts"
                },
                "attributes": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "fileNumber",
                    "payeeNumber",
                    "personEntitled",
                    "deductionCode",
                    "benefitType",
                    "diaryCode",
                    "diaryCodeDescription",
                    "amountOverpaid",
                    "amountWithheld",
                    "originalAr",
                    "currentAr",
                    "debtHistory"
                  ],
                  "properties": {
                    "fileNumber": {
                      "type": "string",
                      "example": "796043735"
                    },
                    "payeeNumber": {
                      "type": "string",
                      "example": "00"
                    },
                    "personEntitled": {
                      "type": "string",
                      "example": null
                    },
                    "deductionCode": {
                      "type": "string",
                      "example": "30"
                    },
                    "benefitType": {
                      "type": "string",
                      "example": "Comp & Pen"
                    },
                    "diaryCode": {
                      "type": "string",
                      "example": "914"
                    },
                    "diaryCodeDescription": {
                      "type": "string",
                      "example": "Paid In Full"
                    },
                    "amountOverpaid": {
                      "type": "float",
                      "example": 123.34
                    },
                    "amountWithheld": {
                      "type": "float",
                      "example": 50
                    },
                    "originalAr": {
                      "type": "float",
                      "example": 1177
                    },
                    "currentAr": {
                      "type": "float",
                      "example": 123.34
                    },
                    "debtHistory": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "date": {
                            "type": "string",
                            "example": "09/12/1998"
                          },
                          "letterCode": {
                            "type": "string",
                            "example": "123"
                          },
                          "description": {
                            "type": "string",
                            "example": "Third Demand Letter - Potential Treasury Referral"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "hasDependentDebts"
            ],
            "properties": {
              "hasDependentDebts": {
                "type": "boolean",
                "example": false
              }
            }
          }
        }
      },
      "Debt": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data",
          "meta"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "id": {
                "type": "string",
                "example": "fe1776a8-3908-4efe-8e20-8dd31440ccb9",
                "description": "Upstream identifier"
              },
              "type": {
                "type": "string",
                "example": "debts"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "fileNumber",
                  "payeeNumber",
                  "personEntitled",
                  "deductionCode",
                  "benefitType",
                  "diaryCode",
                  "diaryCodeDescription",
                  "amountOverpaid",
                  "amountWithheld",
                  "originalAr",
                  "currentAr",
                  "debtHistory"
                ],
                "properties": {
                  "fileNumber": {
                    "type": "string",
                    "example": "796043735"
                  },
                  "payeeNumber": {
                    "type": "string",
                    "example": "00"
                  },
                  "personEntitled": {
                    "type": "string",
                    "example": null
                  },
                  "deductionCode": {
                    "type": "string",
                    "example": "30"
                  },
                  "benefitType": {
                    "type": "string",
                    "example": "Comp & Pen"
                  },
                  "diaryCode": {
                    "type": "string",
                    "example": "914"
                  },
                  "diaryCodeDescription": {
                    "type": "string",
                    "example": "Paid In Full"
                  },
                  "amountOverpaid": {
                    "type": "float",
                    "example": 123.34
                  },
                  "amountWithheld": {
                    "type": "float",
                    "example": 50
                  },
                  "originalAr": {
                    "type": "float",
                    "example": 1177
                  },
                  "currentAr": {
                    "type": "float",
                    "example": 123.34
                  },
                  "debtHistory": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "date": {
                          "type": "string",
                          "example": "09/12/1998"
                        },
                        "letterCode": {
                          "type": "string",
                          "example": "123"
                        },
                        "description": {
                          "type": "string",
                          "example": "Third Demand Letter - Potential Treasury Referral"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "hasDependentDebts"
            ],
            "properties": {
              "hasDependentDebts": {
                "type": "boolean",
                "example": false
              }
            }
          }
        }
      },
      "Dependents": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "example": "dependent"
                },
                "id": {
                  "type": "string",
                  "example": "23fe358d-6e82-4541-804c-ce7562ba28f4",
                  "description": "Randomly generated UUID"
                },
                "attributes": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "awardIndicator",
                    "dateOfBirth",
                    "emailAddress",
                    "firstName",
                    "lastName",
                    "middleName",
                    "proofOfDependency",
                    "ptcpntId",
                    "relatedToVet",
                    "relationship",
                    "veteranIndicator"
                  ],
                  "properties": {
                    "awardIndicator": {
                      "type": [
                        "string",
                        null
                      ],
                      "example": "N"
                    },
                    "dateOfBirth": {
                      "type": [
                        "string",
                        null
                      ],
                      "example": "01/02/1960"
                    },
                    "emailAddress": {
                      "type": [
                        "string",
                        null
                      ],
                      "example": "emailAddress"
                    },
                    "firstName": {
                      "type": [
                        "string",
                        null
                      ],
                      "example": "JANE"
                    },
                    "lastName": {
                      "type": [
                        "string",
                        null
                      ],
                      "example": "WEBB"
                    },
                    "middleName": {
                      "type": [
                        "string",
                        null
                      ],
                      "example": "M"
                    },
                    "proofOfDependency": {
                      "type": [
                        "string",
                        null
                      ],
                      "example": "N"
                    },
                    "ptcpntId": {
                      "type": [
                        "string",
                        null
                      ],
                      "example": "600280661"
                    },
                    "relatedToVet": {
                      "type": [
                        "string",
                        null
                      ],
                      "example": "Y"
                    },
                    "relationship": {
                      "type": [
                        "string",
                        null
                      ],
                      "example": "Spouse"
                    },
                    "veteranIndicator": {
                      "type": [
                        "string",
                        null
                      ],
                      "example": "N"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "genericTrueFalse": {
        "type": "boolean"
      },
      "addressSchema": {
        "type": "object",
        "properties": {
          "view:editMailingAddressSubheader": {
            "type": "object",
            "properties": {}
          },
          "view:livesOnMilitaryBase": {
            "$ref": "#/components/schemas/genericTrueFalse"
          },
          "view:livesOnMilitaryBaseInfo": {
            "type": "object",
            "properties": {}
          },
          "countryName": {
            "type": "string",
            "enum": [
              "USA",
              "AFG",
              "ALB",
              "DZA",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "KHM",
              "CMR",
              "CAN",
              "CPV",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GTM",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "ANT",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "NOR",
              "OMN",
              "PAK",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "SHN",
              "KNA",
              "LCA",
              "SPM",
              "VCT",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SCG",
              "SYC",
              "SLE",
              "SGP",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "URY",
              "UZB",
              "VUT",
              "VAT",
              "VEN",
              "VNM",
              "VGB",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE"
            ],
            "enumNames": [
              "United States",
              "Afghanistan",
              "Albania",
              "Algeria",
              "Andorra",
              "Angola",
              "Anguilla",
              "Antarctica",
              "Antigua",
              "Argentina",
              "Armenia",
              "Aruba",
              "Australia",
              "Austria",
              "Azerbaijan",
              "Bahamas",
              "Bahrain",
              "Bangladesh",
              "Barbados",
              "Belarus",
              "Belgium",
              "Belize",
              "Benin",
              "Bermuda",
              "Bhutan",
              "Bolivia",
              "Bosnia",
              "Botswana",
              "Bouvet Island",
              "Brazil",
              "British Indian Ocean Territories",
              "Brunei Darussalam",
              "Bulgaria",
              "Burkina Faso",
              "Burundi",
              "Cambodia",
              "Cameroon",
              "Canada",
              "Cape Verde",
              "Cayman",
              "Central African Republic",
              "Chad",
              "Chile",
              "China",
              "Christmas Island",
              "Cocos Islands",
              "Colombia",
              "Comoros",
              "Congo",
              "Democratic Republic of the Congo",
              "Cook Islands",
              "Costa Rica",
              "Ivory Coast",
              "Croatia",
              "Cuba",
              "Cyprus",
              "Czech Republic",
              "Denmark",
              "Djibouti",
              "Dominica",
              "Dominican Republic",
              "Ecuador",
              "Egypt",
              "El Salvador",
              "Equatorial Guinea",
              "Eritrea",
              "Estonia",
              "Ethiopia",
              "Falkland Islands",
              "Faroe Islands",
              "Fiji",
              "Finland",
              "France",
              "French Guiana",
              "French Polynesia",
              "French Southern Territories",
              "Gabon",
              "Gambia",
              "Georgia",
              "Germany",
              "Ghana",
              "Gibraltar",
              "Greece",
              "Greenland",
              "Grenada",
              "Guadeloupe",
              "Guatemala",
              "Guinea",
              "Guinea-Bissau",
              "Guyana",
              "Haiti",
              "Heard Island",
              "Honduras",
              "Hong Kong",
              "Hungary",
              "Iceland",
              "India",
              "Indonesia",
              "Iran",
              "Iraq",
              "Ireland",
              "Israel",
              "Italy",
              "Jamaica",
              "Japan",
              "Jordan",
              "Kazakhstan",
              "Kenya",
              "Kiribati",
              "North Korea",
              "South Korea",
              "Kuwait",
              "Kyrgyzstan",
              "Laos",
              "Latvia",
              "Lebanon",
              "Lesotho",
              "Liberia",
              "Libya",
              "Liechtenstein",
              "Lithuania",
              "Luxembourg",
              "Macao",
              "Macedonia",
              "Madagascar",
              "Malawi",
              "Malaysia",
              "Maldives",
              "Mali",
              "Malta",
              "Martinique",
              "Mauritania",
              "Mauritius",
              "Mayotte",
              "Mexico",
              "Micronesia",
              "Moldova",
              "Monaco",
              "Mongolia",
              "Montserrat",
              "Morocco",
              "Mozambique",
              "Myanmar",
              "Namibia",
              "Nauru",
              "Nepal",
              "Netherlands Antilles",
              "Netherlands",
              "New Caledonia",
              "New Zealand",
              "Nicaragua",
              "Niger",
              "Nigeria",
              "Niue",
              "Norfolk",
              "Norway",
              "Oman",
              "Pakistan",
              "Panama",
              "Papua New Guinea",
              "Paraguay",
              "Peru",
              "Philippines",
              "Pitcairn",
              "Poland",
              "Portugal",
              "Qatar",
              "Reunion",
              "Romania",
              "Russia",
              "Rwanda",
              "Saint Helena",
              "Saint Kitts and Nevis",
              "Saint Lucia",
              "Saint Pierre and Miquelon",
              "Saint Vincent and the Grenadines",
              "San Marino",
              "Sao Tome and Principe",
              "Saudi Arabia",
              "Senegal",
              "Serbia",
              "Seychelles",
              "Sierra Leone",
              "Singapore",
              "Slovakia",
              "Slovenia",
              "Solomon Islands",
              "Somalia",
              "South Africa",
              "South Georgia and the South Sandwich Islands",
              "Spain",
              "Sri Lanka",
              "Sudan",
              "Suriname",
              "Swaziland",
              "Sweden",
              "Switzerland",
              "Syrian Arab Republic",
              "Taiwan",
              "Tajikistan",
              "Tanzania",
              "Thailand",
              "Timor-Leste",
              "Togo",
              "Tokelau",
              "Tonga",
              "Trinidad and Tobago",
              "Tunisia",
              "Turkey",
              "Turkmenistan",
              "Turks and Caicos Islands",
              "Tuvalu",
              "Uganda",
              "Ukraine",
              "United Arab Emirates",
              "United Kingdom",
              "Uruguay",
              "Uzbekistan",
              "Vanuatu",
              "Vatican",
              "Venezuela",
              "Vietnam",
              "British Virgin Islands",
              "Wallis and Futuna",
              "Western Sahara",
              "Yemen",
              "Zambia",
              "Zimbabwe"
            ]
          },
          "addressLine1": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "pattern": "^.*\\S.*"
          },
          "addressLine2": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "pattern": "^.*\\S.*"
          },
          "addressLine3": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "pattern": "^.*\\S.*"
          },
          "city": {
            "type": "string"
          },
          "stateCode": {
            "type": "string",
            "enum": [
              "AL",
              "AK",
              "AS",
              "AZ",
              "AR",
              "CA",
              "CO",
              "CT",
              "DE",
              "DC",
              "FM",
              "FL",
              "GA",
              "GU",
              "HI",
              "ID",
              "IL",
              "IN",
              "IA",
              "KS",
              "KY",
              "LA",
              "ME",
              "MH",
              "MD",
              "MA",
              "MI",
              "MN",
              "MS",
              "MO",
              "MT",
              "NE",
              "NV",
              "NH",
              "NJ",
              "NM",
              "NY",
              "NC",
              "ND",
              "MP",
              "OH",
              "OK",
              "OR",
              "PW",
              "PA",
              "PR",
              "RI",
              "SC",
              "SD",
              "TN",
              "TX",
              "UT",
              "VT",
              "VI",
              "VA",
              "WA",
              "WV",
              "WI",
              "WY"
            ],
            "enumNames": [
              "Alabama",
              "Alaska",
              "American Samoa",
              "Arizona",
              "Arkansas",
              "California",
              "Colorado",
              "Connecticut",
              "Delaware",
              "District Of Columbia",
              "Federated States Of Micronesia",
              "Florida",
              "Georgia",
              "Guam",
              "Hawaii",
              "Idaho",
              "Illinois",
              "Indiana",
              "Iowa",
              "Kansas",
              "Kentucky",
              "Louisiana",
              "Maine",
              "Marshall Islands",
              "Maryland",
              "Massachusetts",
              "Michigan",
              "Minnesota",
              "Mississippi",
              "Missouri",
              "Montana",
              "Nebraska",
              "Nevada",
              "New Hampshire",
              "New Jersey",
              "New Mexico",
              "New York",
              "North Carolina",
              "North Dakota",
              "Northern Mariana Islands",
              "Ohio",
              "Oklahoma",
              "Oregon",
              "Palau",
              "Pennsylvania",
              "Puerto Rico",
              "Rhode Island",
              "South Carolina",
              "South Dakota",
              "Tennessee",
              "Texas",
              "Utah",
              "Vermont",
              "Virgin Islands",
              "Virginia",
              "Washington",
              "West Virginia",
              "Wisconsin",
              "Wyoming"
            ]
          },
          "province": {
            "type": "string"
          },
          "zipCode": {
            "type": "string",
            "pattern": "^\\d{5}$"
          },
          "internationalPostalCode": {
            "type": "string"
          }
        }
      },
      "definitions-phone": {
        "type": "string",
        "minLength": 10
      },
      "email": {
        "type": "string",
        "maxLength": 256,
        "format": "email"
      },
      "definitions-fullName": {
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "minLength": 1,
            "maxLength": 30,
            "pattern": "^[A-Za-zÀ-ÖØ-öø-ÿ-]+(?:s[A-Za-zÀ-ÖØ-öø-ÿ-][?]+)*$"
          },
          "middle": {
            "type": "string",
            "pattern": "^[A-Za-zÀ-ÖØ-öø-ÿ-]+(?:s[A-Za-zÀ-ÖØ-öø-ÿ-][?]+)*$",
            "maxLength": 20
          },
          "last": {
            "type": "string",
            "minLength": 1,
            "maxLength": 30,
            "pattern": "^[A-Za-zÀ-ÖØ-öø-ÿ-]+(?:s[A-Za-zÀ-ÖØ-öø-ÿ-][?]+)*$"
          }
        },
        "required": [
          "first",
          "last"
        ]
      },
      "definitions-ssn": {
        "type": "string",
        "pattern": "^[0-9]{9}$"
      },
      "definitions-date": {
        "pattern": "^(\\d{4}|XXXX)-(0[1-9]|1[0-2]|XX)-(0[1-9]|[1-2][0-9]|3[0-1]|XX)$",
        "type": "string"
      },
      "genericLocation": {
        "type": "object",
        "properties": {
          "isOutsideUs": {
            "type": "boolean",
            "default": false
          },
          "country": {
            "type": "string",
            "enum": [
              "AFG",
              "ALB",
              "DZA",
              "AND",
              "AGO",
              "AIA",
              "ATA",
              "ATG",
              "ARG",
              "ARM",
              "ABW",
              "AUS",
              "AUT",
              "AZE",
              "BHS",
              "BHR",
              "BGD",
              "BRB",
              "BLR",
              "BEL",
              "BLZ",
              "BEN",
              "BMU",
              "BTN",
              "BOL",
              "BIH",
              "BWA",
              "BVT",
              "BRA",
              "IOT",
              "BRN",
              "BGR",
              "BFA",
              "BDI",
              "KHM",
              "CMR",
              "CAN",
              "CPV",
              "CYM",
              "CAF",
              "TCD",
              "CHL",
              "CHN",
              "CXR",
              "CCK",
              "COL",
              "COM",
              "COG",
              "COD",
              "COK",
              "CRI",
              "CIV",
              "HRV",
              "CUB",
              "CYP",
              "CZE",
              "DNK",
              "DJI",
              "DMA",
              "DOM",
              "ECU",
              "EGY",
              "SLV",
              "GNQ",
              "ERI",
              "EST",
              "ETH",
              "FLK",
              "FRO",
              "FJI",
              "FIN",
              "FRA",
              "GUF",
              "PYF",
              "ATF",
              "GAB",
              "GMB",
              "GEO",
              "DEU",
              "GHA",
              "GIB",
              "GRC",
              "GRL",
              "GRD",
              "GLP",
              "GTM",
              "GIN",
              "GNB",
              "GUY",
              "HTI",
              "HMD",
              "HND",
              "HKG",
              "HUN",
              "ISL",
              "IND",
              "IDN",
              "IRN",
              "IRQ",
              "IRL",
              "ISR",
              "ITA",
              "JAM",
              "JPN",
              "JOR",
              "KAZ",
              "KEN",
              "KIR",
              "PRK",
              "KOR",
              "KWT",
              "KGZ",
              "LAO",
              "LVA",
              "LBN",
              "LSO",
              "LBR",
              "LBY",
              "LIE",
              "LTU",
              "LUX",
              "MAC",
              "MKD",
              "MDG",
              "MWI",
              "MYS",
              "MDV",
              "MLI",
              "MLT",
              "MTQ",
              "MRT",
              "MUS",
              "MYT",
              "MEX",
              "FSM",
              "MDA",
              "MCO",
              "MNG",
              "MSR",
              "MAR",
              "MOZ",
              "MMR",
              "NAM",
              "NRU",
              "NPL",
              "ANT",
              "NLD",
              "NCL",
              "NZL",
              "NIC",
              "NER",
              "NGA",
              "NIU",
              "NFK",
              "NOR",
              "OMN",
              "PAK",
              "PAN",
              "PNG",
              "PRY",
              "PER",
              "PHL",
              "PCN",
              "POL",
              "PRT",
              "QAT",
              "REU",
              "ROU",
              "RUS",
              "RWA",
              "SHN",
              "KNA",
              "LCA",
              "SPM",
              "VCT",
              "SMR",
              "STP",
              "SAU",
              "SEN",
              "SCG",
              "SYC",
              "SLE",
              "SGP",
              "SVK",
              "SVN",
              "SLB",
              "SOM",
              "ZAF",
              "SGS",
              "ESP",
              "LKA",
              "SDN",
              "SUR",
              "SWZ",
              "SWE",
              "CHE",
              "SYR",
              "TWN",
              "TJK",
              "TZA",
              "THA",
              "TLS",
              "TGO",
              "TKL",
              "TON",
              "TTO",
              "TUN",
              "TUR",
              "TKM",
              "TCA",
              "TUV",
              "UGA",
              "UKR",
              "ARE",
              "GBR",
              "URY",
              "UZB",
              "VUT",
              "VAT",
              "VEN",
              "VNM",
              "VGB",
              "WLF",
              "ESH",
              "YEM",
              "ZMB",
              "ZWE"
            ],
            "enumNames": [
              "Afghanistan",
              "Albania",
              "Algeria",
              "Andorra",
              "Angola",
              "Anguilla",
              "Antarctica",
              "Antigua",
              "Argentina",
              "Armenia",
              "Aruba",
              "Australia",
              "Austria",
              "Azerbaijan",
              "Bahamas",
              "Bahrain",
              "Bangladesh",
              "Barbados",
              "Belarus",
              "Belgium",
              "Belize",
              "Benin",
              "Bermuda",
              "Bhutan",
              "Bolivia",
              "Bosnia",
              "Botswana",
              "Bouvet Island",
              "Brazil",
              "British Indian Ocean Territories",
              "Brunei Darussalam",
              "Bulgaria",
              "Burkina Faso",
              "Burundi",
              "Cambodia",
              "Cameroon",
              "Canada",
              "Cape Verde",
              "Cayman",
              "Central African Republic",
              "Chad",
              "Chile",
              "China",
              "Christmas Island",
              "Cocos Islands",
              "Colombia",
              "Comoros",
              "Congo",
              "Democratic Republic of the Congo",
              "Cook Islands",
              "Costa Rica",
              "Ivory Coast",
              "Croatia",
              "Cuba",
              "Cyprus",
              "Czech Republic",
              "Denmark",
              "Djibouti",
              "Dominica",
              "Dominican Republic",
              "Ecuador",
              "Egypt",
              "El Salvador",
              "Equatorial Guinea",
              "Eritrea",
              "Estonia",
              "Ethiopia",
              "Falkland Islands",
              "Faroe Islands",
              "Fiji",
              "Finland",
              "France",
              "French Guiana",
              "French Polynesia",
              "French Southern Territories",
              "Gabon",
              "Gambia",
              "Georgia",
              "Germany",
              "Ghana",
              "Gibraltar",
              "Greece",
              "Greenland",
              "Grenada",
              "Guadeloupe",
              "Guatemala",
              "Guinea",
              "Guinea-Bissau",
              "Guyana",
              "Haiti",
              "Heard Island",
              "Honduras",
              "Hong Kong",
              "Hungary",
              "Iceland",
              "India",
              "Indonesia",
              "Iran",
              "Iraq",
              "Ireland",
              "Israel",
              "Italy",
              "Jamaica",
              "Japan",
              "Jordan",
              "Kazakhstan",
              "Kenya",
              "Kiribati",
              "North Korea",
              "South Korea",
              "Kuwait",
              "Kyrgyzstan",
              "Laos",
              "Latvia",
              "Lebanon",
              "Lesotho",
              "Liberia",
              "Libya",
              "Liechtenstein",
              "Lithuania",
              "Luxembourg",
              "Macao",
              "Macedonia",
              "Madagascar",
              "Malawi",
              "Malaysia",
              "Maldives",
              "Mali",
              "Malta",
              "Martinique",
              "Mauritania",
              "Mauritius",
              "Mayotte",
              "Mexico",
              "Micronesia",
              "Moldova",
              "Monaco",
              "Mongolia",
              "Montserrat",
              "Morocco",
              "Mozambique",
              "Myanmar",
              "Namibia",
              "Nauru",
              "Nepal",
              "Netherlands Antilles",
              "Netherlands",
              "New Caledonia",
              "New Zealand",
              "Nicaragua",
              "Niger",
              "Nigeria",
              "Niue",
              "Norfolk",
              "Norway",
              "Oman",
              "Pakistan",
              "Panama",
              "Papua New Guinea",
              "Paraguay",
              "Peru",
              "Philippines",
              "Pitcairn",
              "Poland",
              "Portugal",
              "Qatar",
              "Reunion",
              "Romania",
              "Russia",
              "Rwanda",
              "Saint Helena",
              "Saint Kitts and Nevis",
              "Saint Lucia",
              "Saint Pierre and Miquelon",
              "Saint Vincent and the Grenadines",
              "San Marino",
              "Sao Tome and Principe",
              "Saudi Arabia",
              "Senegal",
              "Serbia",
              "Seychelles",
              "Sierra Leone",
              "Singapore",
              "Slovakia",
              "Slovenia",
              "Solomon Islands",
              "Somalia",
              "South Africa",
              "South Georgia and the South Sandwich Islands",
              "Spain",
              "Sri Lanka",
              "Sudan",
              "Suriname",
              "Swaziland",
              "Sweden",
              "Switzerland",
              "Syrian Arab Republic",
              "Taiwan",
              "Tajikistan",
              "Tanzania",
              "Thailand",
              "Timor-Leste",
              "Togo",
              "Tokelau",
              "Tonga",
              "Trinidad and Tobago",
              "Tunisia",
              "Turkey",
              "Turkmenistan",
              "Turks and Caicos Islands",
              "Tuvalu",
              "Uganda",
              "Ukraine",
              "United Arab Emirates",
              "United Kingdom",
              "Uruguay",
              "Uzbekistan",
              "Vanuatu",
              "Vatican",
              "Venezuela",
              "Vietnam",
              "British Virgin Islands",
              "Wallis and Futuna",
              "Western Sahara",
              "Yemen",
              "Zambia",
              "Zimbabwe"
            ]
          },
          "state": {
            "type": "string",
            "enum": [
              "AL",
              "AK",
              "AS",
              "AZ",
              "AR",
              "CA",
              "CO",
              "CT",
              "DE",
              "DC",
              "FM",
              "FL",
              "GA",
              "GU",
              "HI",
              "ID",
              "IL",
              "IN",
              "IA",
              "KS",
              "KY",
              "LA",
              "ME",
              "MH",
              "MD",
              "MA",
              "MI",
              "MN",
              "MS",
              "MO",
              "MT",
              "NE",
              "NV",
              "NH",
              "NJ",
              "NM",
              "NY",
              "NC",
              "ND",
              "MP",
              "OH",
              "OK",
              "OR",
              "PW",
              "PA",
              "PR",
              "RI",
              "SC",
              "SD",
              "TN",
              "TX",
              "UT",
              "VT",
              "VI",
              "VA",
              "WA",
              "WV",
              "WI",
              "WY"
            ],
            "enumNames": [
              "Alabama",
              "Alaska",
              "American Samoa",
              "Arizona",
              "Arkansas",
              "California",
              "Colorado",
              "Connecticut",
              "Delaware",
              "District Of Columbia",
              "Federated States Of Micronesia",
              "Florida",
              "Georgia",
              "Guam",
              "Hawaii",
              "Idaho",
              "Illinois",
              "Indiana",
              "Iowa",
              "Kansas",
              "Kentucky",
              "Louisiana",
              "Maine",
              "Marshall Islands",
              "Maryland",
              "Massachusetts",
              "Michigan",
              "Minnesota",
              "Mississippi",
              "Missouri",
              "Montana",
              "Nebraska",
              "Nevada",
              "New Hampshire",
              "New Jersey",
              "New Mexico",
              "New York",
              "North Carolina",
              "North Dakota",
              "Northern Mariana Islands",
              "Ohio",
              "Oklahoma",
              "Oregon",
              "Palau",
              "Pennsylvania",
              "Puerto Rico",
              "Rhode Island",
              "South Carolina",
              "South Dakota",
              "Tennessee",
              "Texas",
              "Utah",
              "Vermont",
              "Virgin Islands",
              "Virginia",
              "Washington",
              "West Virginia",
              "Wisconsin",
              "Wyoming"
            ]
          },
          "city": {
            "type": "string",
            "maxLength": 30,
            "pattern": "^(?!\\s)(?!.*?\\s{2,})[^<>%$#@!^&*0-9]+$"
          }
        }
      },
      "genericTextInput": {
        "type": "string",
        "maxLength": 50
      },
      "files": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "size": {
              "type": "integer"
            },
            "confirmationCode": {
              "type": "string"
            }
          }
        }
      },
      "genericNumberAndDashInput": {
        "type": "string",
        "maxLength": 50,
        "minLength": 4,
        "pattern": "^[0-9]*[-]*[0-9]*[-]*[0-9]*$"
      },
      "currencyInput": {
        "type": "string",
        "pattern": "^\\d+(\\.\\d{1,2})?$"
      },
      "CreateDependents": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "SUPPLEMENTAL CLAIM FOR COMPENSATION (21-686C & 21-674)",
        "type": "object",
        "definitions": {
          "fullName": {
            "type": "object",
            "properties": {
              "first": {
                "type": "string",
                "minLength": 1,
                "maxLength": 30,
                "pattern": "^[A-Za-zÀ-ÖØ-öø-ÿ-]+(?:s[A-Za-zÀ-ÖØ-öø-ÿ-][?]+)*$"
              },
              "middle": {
                "type": "string",
                "pattern": "^[A-Za-zÀ-ÖØ-öø-ÿ-]+(?:s[A-Za-zÀ-ÖØ-öø-ÿ-][?]+)*$",
                "maxLength": 20
              },
              "last": {
                "type": "string",
                "minLength": 1,
                "maxLength": 30,
                "pattern": "^[A-Za-zÀ-ÖØ-öø-ÿ-]+(?:s[A-Za-zÀ-ÖØ-öø-ÿ-][?]+)*$"
              }
            },
            "required": [
              "first",
              "last"
            ]
          },
          "phone": {
            "type": "string",
            "minLength": 10
          },
          "date": {
            "pattern": "^(\\d{4}|XXXX)-(0[1-9]|1[0-2]|XX)-(0[1-9]|[1-2][0-9]|3[0-1]|XX)$",
            "type": "string"
          },
          "email": {
            "type": "string",
            "maxLength": 256,
            "format": "email"
          },
          "files": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "size": {
                  "type": "integer"
                },
                "confirmationCode": {
                  "type": "string"
                }
              }
            }
          },
          "privacyAgreementAccepted": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "ssn": {
            "type": "string",
            "pattern": "^[0-9]{9}$"
          },
          "genericLocation": {
            "type": "object",
            "properties": {
              "isOutsideUs": {
                "type": "boolean",
                "default": false
              },
              "country": {
                "type": "string",
                "enum": [
                  "AFG",
                  "ALB",
                  "DZA",
                  "AND",
                  "AGO",
                  "AIA",
                  "ATA",
                  "ATG",
                  "ARG",
                  "ARM",
                  "ABW",
                  "AUS",
                  "AUT",
                  "AZE",
                  "BHS",
                  "BHR",
                  "BGD",
                  "BRB",
                  "BLR",
                  "BEL",
                  "BLZ",
                  "BEN",
                  "BMU",
                  "BTN",
                  "BOL",
                  "BIH",
                  "BWA",
                  "BVT",
                  "BRA",
                  "IOT",
                  "BRN",
                  "BGR",
                  "BFA",
                  "BDI",
                  "KHM",
                  "CMR",
                  "CAN",
                  "CPV",
                  "CYM",
                  "CAF",
                  "TCD",
                  "CHL",
                  "CHN",
                  "CXR",
                  "CCK",
                  "COL",
                  "COM",
                  "COG",
                  "COD",
                  "COK",
                  "CRI",
                  "CIV",
                  "HRV",
                  "CUB",
                  "CYP",
                  "CZE",
                  "DNK",
                  "DJI",
                  "DMA",
                  "DOM",
                  "ECU",
                  "EGY",
                  "SLV",
                  "GNQ",
                  "ERI",
                  "EST",
                  "ETH",
                  "FLK",
                  "FRO",
                  "FJI",
                  "FIN",
                  "FRA",
                  "GUF",
                  "PYF",
                  "ATF",
                  "GAB",
                  "GMB",
                  "GEO",
                  "DEU",
                  "GHA",
                  "GIB",
                  "GRC",
                  "GRL",
                  "GRD",
                  "GLP",
                  "GTM",
                  "GIN",
                  "GNB",
                  "GUY",
                  "HTI",
                  "HMD",
                  "HND",
                  "HKG",
                  "HUN",
                  "ISL",
                  "IND",
                  "IDN",
                  "IRN",
                  "IRQ",
                  "IRL",
                  "ISR",
                  "ITA",
                  "JAM",
                  "JPN",
                  "JOR",
                  "KAZ",
                  "KEN",
                  "KIR",
                  "PRK",
                  "KOR",
                  "KWT",
                  "KGZ",
                  "LAO",
                  "LVA",
                  "LBN",
                  "LSO",
                  "LBR",
                  "LBY",
                  "LIE",
                  "LTU",
                  "LUX",
                  "MAC",
                  "MKD",
                  "MDG",
                  "MWI",
                  "MYS",
                  "MDV",
                  "MLI",
                  "MLT",
                  "MTQ",
                  "MRT",
                  "MUS",
                  "MYT",
                  "MEX",
                  "FSM",
                  "MDA",
                  "MCO",
                  "MNG",
                  "MSR",
                  "MAR",
                  "MOZ",
                  "MMR",
                  "NAM",
                  "NRU",
                  "NPL",
                  "ANT",
                  "NLD",
                  "NCL",
                  "NZL",
                  "NIC",
                  "NER",
                  "NGA",
                  "NIU",
                  "NFK",
                  "NOR",
                  "OMN",
                  "PAK",
                  "PAN",
                  "PNG",
                  "PRY",
                  "PER",
                  "PHL",
                  "PCN",
                  "POL",
                  "PRT",
                  "QAT",
                  "REU",
                  "ROU",
                  "RUS",
                  "RWA",
                  "SHN",
                  "KNA",
                  "LCA",
                  "SPM",
                  "VCT",
                  "SMR",
                  "STP",
                  "SAU",
                  "SEN",
                  "SCG",
                  "SYC",
                  "SLE",
                  "SGP",
                  "SVK",
                  "SVN",
                  "SLB",
                  "SOM",
                  "ZAF",
                  "SGS",
                  "ESP",
                  "LKA",
                  "SDN",
                  "SUR",
                  "SWZ",
                  "SWE",
                  "CHE",
                  "SYR",
                  "TWN",
                  "TJK",
                  "TZA",
                  "THA",
                  "TLS",
                  "TGO",
                  "TKL",
                  "TON",
                  "TTO",
                  "TUN",
                  "TUR",
                  "TKM",
                  "TCA",
                  "TUV",
                  "UGA",
                  "UKR",
                  "ARE",
                  "GBR",
                  "URY",
                  "UZB",
                  "VUT",
                  "VAT",
                  "VEN",
                  "VNM",
                  "VGB",
                  "WLF",
                  "ESH",
                  "YEM",
                  "ZMB",
                  "ZWE"
                ],
                "enumNames": [
                  "Afghanistan",
                  "Albania",
                  "Algeria",
                  "Andorra",
                  "Angola",
                  "Anguilla",
                  "Antarctica",
                  "Antigua",
                  "Argentina",
                  "Armenia",
                  "Aruba",
                  "Australia",
                  "Austria",
                  "Azerbaijan",
                  "Bahamas",
                  "Bahrain",
                  "Bangladesh",
                  "Barbados",
                  "Belarus",
                  "Belgium",
                  "Belize",
                  "Benin",
                  "Bermuda",
                  "Bhutan",
                  "Bolivia",
                  "Bosnia",
                  "Botswana",
                  "Bouvet Island",
                  "Brazil",
                  "British Indian Ocean Territories",
                  "Brunei Darussalam",
                  "Bulgaria",
                  "Burkina Faso",
                  "Burundi",
                  "Cambodia",
                  "Cameroon",
                  "Canada",
                  "Cape Verde",
                  "Cayman",
                  "Central African Republic",
                  "Chad",
                  "Chile",
                  "China",
                  "Christmas Island",
                  "Cocos Islands",
                  "Colombia",
                  "Comoros",
                  "Congo",
                  "Democratic Republic of the Congo",
                  "Cook Islands",
                  "Costa Rica",
                  "Ivory Coast",
                  "Croatia",
                  "Cuba",
                  "Cyprus",
                  "Czech Republic",
                  "Denmark",
                  "Djibouti",
                  "Dominica",
                  "Dominican Republic",
                  "Ecuador",
                  "Egypt",
                  "El Salvador",
                  "Equatorial Guinea",
                  "Eritrea",
                  "Estonia",
                  "Ethiopia",
                  "Falkland Islands",
                  "Faroe Islands",
                  "Fiji",
                  "Finland",
                  "France",
                  "French Guiana",
                  "French Polynesia",
                  "French Southern Territories",
                  "Gabon",
                  "Gambia",
                  "Georgia",
                  "Germany",
                  "Ghana",
                  "Gibraltar",
                  "Greece",
                  "Greenland",
                  "Grenada",
                  "Guadeloupe",
                  "Guatemala",
                  "Guinea",
                  "Guinea-Bissau",
                  "Guyana",
                  "Haiti",
                  "Heard Island",
                  "Honduras",
                  "Hong Kong",
                  "Hungary",
                  "Iceland",
                  "India",
                  "Indonesia",
                  "Iran",
                  "Iraq",
                  "Ireland",
                  "Israel",
                  "Italy",
                  "Jamaica",
                  "Japan",
                  "Jordan",
                  "Kazakhstan",
                  "Kenya",
                  "Kiribati",
                  "North Korea",
                  "South Korea",
                  "Kuwait",
                  "Kyrgyzstan",
                  "Laos",
                  "Latvia",
                  "Lebanon",
                  "Lesotho",
                  "Liberia",
                  "Libya",
                  "Liechtenstein",
                  "Lithuania",
                  "Luxembourg",
                  "Macao",
                  "Macedonia",
                  "Madagascar",
                  "Malawi",
                  "Malaysia",
                  "Maldives",
                  "Mali",
                  "Malta",
                  "Martinique",
                  "Mauritania",
                  "Mauritius",
                  "Mayotte",
                  "Mexico",
                  "Micronesia",
                  "Moldova",
                  "Monaco",
                  "Mongolia",
                  "Montserrat",
                  "Morocco",
                  "Mozambique",
                  "Myanmar",
                  "Namibia",
                  "Nauru",
                  "Nepal",
                  "Netherlands Antilles",
                  "Netherlands",
                  "New Caledonia",
                  "New Zealand",
                  "Nicaragua",
                  "Niger",
                  "Nigeria",
                  "Niue",
                  "Norfolk",
                  "Norway",
                  "Oman",
                  "Pakistan",
                  "Panama",
                  "Papua New Guinea",
                  "Paraguay",
                  "Peru",
                  "Philippines",
                  "Pitcairn",
                  "Poland",
                  "Portugal",
                  "Qatar",
                  "Reunion",
                  "Romania",
                  "Russia",
                  "Rwanda",
                  "Saint Helena",
                  "Saint Kitts and Nevis",
                  "Saint Lucia",
                  "Saint Pierre and Miquelon",
                  "Saint Vincent and the Grenadines",
                  "San Marino",
                  "Sao Tome and Principe",
                  "Saudi Arabia",
                  "Senegal",
                  "Serbia",
                  "Seychelles",
                  "Sierra Leone",
                  "Singapore",
                  "Slovakia",
                  "Slovenia",
                  "Solomon Islands",
                  "Somalia",
                  "South Africa",
                  "South Georgia and the South Sandwich Islands",
                  "Spain",
                  "Sri Lanka",
                  "Sudan",
                  "Suriname",
                  "Swaziland",
                  "Sweden",
                  "Switzerland",
                  "Syrian Arab Republic",
                  "Taiwan",
                  "Tajikistan",
                  "Tanzania",
                  "Thailand",
                  "Timor-Leste",
                  "Togo",
                  "Tokelau",
                  "Tonga",
                  "Trinidad and Tobago",
                  "Tunisia",
                  "Turkey",
                  "Turkmenistan",
                  "Turks and Caicos Islands",
                  "Tuvalu",
                  "Uganda",
                  "Ukraine",
                  "United Arab Emirates",
                  "United Kingdom",
                  "Uruguay",
                  "Uzbekistan",
                  "Vanuatu",
                  "Vatican",
                  "Venezuela",
                  "Vietnam",
                  "British Virgin Islands",
                  "Wallis and Futuna",
                  "Western Sahara",
                  "Yemen",
                  "Zambia",
                  "Zimbabwe"
                ]
              },
              "state": {
                "type": "string",
                "enum": [
                  "AL",
                  "AK",
                  "AS",
                  "AZ",
                  "AR",
                  "CA",
                  "CO",
                  "CT",
                  "DE",
                  "DC",
                  "FM",
                  "FL",
                  "GA",
                  "GU",
                  "HI",
                  "ID",
                  "IL",
                  "IN",
                  "IA",
                  "KS",
                  "KY",
                  "LA",
                  "ME",
                  "MH",
                  "MD",
                  "MA",
                  "MI",
                  "MN",
                  "MS",
                  "MO",
                  "MT",
                  "NE",
                  "NV",
                  "NH",
                  "NJ",
                  "NM",
                  "NY",
                  "NC",
                  "ND",
                  "MP",
                  "OH",
                  "OK",
                  "OR",
                  "PW",
                  "PA",
                  "PR",
                  "RI",
                  "SC",
                  "SD",
                  "TN",
                  "TX",
                  "UT",
                  "VT",
                  "VI",
                  "VA",
                  "WA",
                  "WV",
                  "WI",
                  "WY"
                ],
                "enumNames": [
                  "Alabama",
                  "Alaska",
                  "American Samoa",
                  "Arizona",
                  "Arkansas",
                  "California",
                  "Colorado",
                  "Connecticut",
                  "Delaware",
                  "District Of Columbia",
                  "Federated States Of Micronesia",
                  "Florida",
                  "Georgia",
                  "Guam",
                  "Hawaii",
                  "Idaho",
                  "Illinois",
                  "Indiana",
                  "Iowa",
                  "Kansas",
                  "Kentucky",
                  "Louisiana",
                  "Maine",
                  "Marshall Islands",
                  "Maryland",
                  "Massachusetts",
                  "Michigan",
                  "Minnesota",
                  "Mississippi",
                  "Missouri",
                  "Montana",
                  "Nebraska",
                  "Nevada",
                  "New Hampshire",
                  "New Jersey",
                  "New Mexico",
                  "New York",
                  "North Carolina",
                  "North Dakota",
                  "Northern Mariana Islands",
                  "Ohio",
                  "Oklahoma",
                  "Oregon",
                  "Palau",
                  "Pennsylvania",
                  "Puerto Rico",
                  "Rhode Island",
                  "South Carolina",
                  "South Dakota",
                  "Tennessee",
                  "Texas",
                  "Utah",
                  "Vermont",
                  "Virgin Islands",
                  "Virginia",
                  "Washington",
                  "West Virginia",
                  "Wisconsin",
                  "Wyoming"
                ]
              },
              "city": {
                "type": "string",
                "maxLength": 30,
                "pattern": "^(?!\\s)(?!.*?\\s{2,})[^<>%$#@!^&*0-9]+$"
              }
            }
          },
          "genericTextInput": {
            "type": "string",
            "maxLength": 50
          },
          "genericTrueFalse": {
            "type": "boolean"
          },
          "genericNumberAndDashInput": {
            "type": "string",
            "maxLength": 50,
            "minLength": 4,
            "pattern": "^[0-9]*[-]*[0-9]*[-]*[0-9]*$"
          },
          "currencyInput": {
            "type": "string",
            "pattern": "^\\d+(\\.\\d{1,2})?$"
          },
          "addressSchema": {
            "type": "object",
            "properties": {
              "view:editMailingAddressSubheader": {
                "type": "object",
                "properties": {}
              },
              "view:livesOnMilitaryBase": {
                "$ref": "#/components/schemas/genericTrueFalse"
              },
              "view:livesOnMilitaryBaseInfo": {
                "type": "object",
                "properties": {}
              },
              "countryName": {
                "type": "string",
                "enum": [
                  "USA",
                  "AFG",
                  "ALB",
                  "DZA",
                  "AND",
                  "AGO",
                  "AIA",
                  "ATA",
                  "ATG",
                  "ARG",
                  "ARM",
                  "ABW",
                  "AUS",
                  "AUT",
                  "AZE",
                  "BHS",
                  "BHR",
                  "BGD",
                  "BRB",
                  "BLR",
                  "BEL",
                  "BLZ",
                  "BEN",
                  "BMU",
                  "BTN",
                  "BOL",
                  "BIH",
                  "BWA",
                  "BVT",
                  "BRA",
                  "IOT",
                  "BRN",
                  "BGR",
                  "BFA",
                  "BDI",
                  "KHM",
                  "CMR",
                  "CAN",
                  "CPV",
                  "CYM",
                  "CAF",
                  "TCD",
                  "CHL",
                  "CHN",
                  "CXR",
                  "CCK",
                  "COL",
                  "COM",
                  "COG",
                  "COD",
                  "COK",
                  "CRI",
                  "CIV",
                  "HRV",
                  "CUB",
                  "CYP",
                  "CZE",
                  "DNK",
                  "DJI",
                  "DMA",
                  "DOM",
                  "ECU",
                  "EGY",
                  "SLV",
                  "GNQ",
                  "ERI",
                  "EST",
                  "ETH",
                  "FLK",
                  "FRO",
                  "FJI",
                  "FIN",
                  "FRA",
                  "GUF",
                  "PYF",
                  "ATF",
                  "GAB",
                  "GMB",
                  "GEO",
                  "DEU",
                  "GHA",
                  "GIB",
                  "GRC",
                  "GRL",
                  "GRD",
                  "GLP",
                  "GTM",
                  "GIN",
                  "GNB",
                  "GUY",
                  "HTI",
                  "HMD",
                  "HND",
                  "HKG",
                  "HUN",
                  "ISL",
                  "IND",
                  "IDN",
                  "IRN",
                  "IRQ",
                  "IRL",
                  "ISR",
                  "ITA",
                  "JAM",
                  "JPN",
                  "JOR",
                  "KAZ",
                  "KEN",
                  "KIR",
                  "PRK",
                  "KOR",
                  "KWT",
                  "KGZ",
                  "LAO",
                  "LVA",
                  "LBN",
                  "LSO",
                  "LBR",
                  "LBY",
                  "LIE",
                  "LTU",
                  "LUX",
                  "MAC",
                  "MKD",
                  "MDG",
                  "MWI",
                  "MYS",
                  "MDV",
                  "MLI",
                  "MLT",
                  "MTQ",
                  "MRT",
                  "MUS",
                  "MYT",
                  "MEX",
                  "FSM",
                  "MDA",
                  "MCO",
                  "MNG",
                  "MSR",
                  "MAR",
                  "MOZ",
                  "MMR",
                  "NAM",
                  "NRU",
                  "NPL",
                  "ANT",
                  "NLD",
                  "NCL",
                  "NZL",
                  "NIC",
                  "NER",
                  "NGA",
                  "NIU",
                  "NFK",
                  "NOR",
                  "OMN",
                  "PAK",
                  "PAN",
                  "PNG",
                  "PRY",
                  "PER",
                  "PHL",
                  "PCN",
                  "POL",
                  "PRT",
                  "QAT",
                  "REU",
                  "ROU",
                  "RUS",
                  "RWA",
                  "SHN",
                  "KNA",
                  "LCA",
                  "SPM",
                  "VCT",
                  "SMR",
                  "STP",
                  "SAU",
                  "SEN",
                  "SCG",
                  "SYC",
                  "SLE",
                  "SGP",
                  "SVK",
                  "SVN",
                  "SLB",
                  "SOM",
                  "ZAF",
                  "SGS",
                  "ESP",
                  "LKA",
                  "SDN",
                  "SUR",
                  "SWZ",
                  "SWE",
                  "CHE",
                  "SYR",
                  "TWN",
                  "TJK",
                  "TZA",
                  "THA",
                  "TLS",
                  "TGO",
                  "TKL",
                  "TON",
                  "TTO",
                  "TUN",
                  "TUR",
                  "TKM",
                  "TCA",
                  "TUV",
                  "UGA",
                  "UKR",
                  "ARE",
                  "GBR",
                  "URY",
                  "UZB",
                  "VUT",
                  "VAT",
                  "VEN",
                  "VNM",
                  "VGB",
                  "WLF",
                  "ESH",
                  "YEM",
                  "ZMB",
                  "ZWE"
                ],
                "enumNames": [
                  "United States",
                  "Afghanistan",
                  "Albania",
                  "Algeria",
                  "Andorra",
                  "Angola",
                  "Anguilla",
                  "Antarctica",
                  "Antigua",
                  "Argentina",
                  "Armenia",
                  "Aruba",
                  "Australia",
                  "Austria",
                  "Azerbaijan",
                  "Bahamas",
                  "Bahrain",
                  "Bangladesh",
                  "Barbados",
                  "Belarus",
                  "Belgium",
                  "Belize",
                  "Benin",
                  "Bermuda",
                  "Bhutan",
                  "Bolivia",
                  "Bosnia",
                  "Botswana",
                  "Bouvet Island",
                  "Brazil",
                  "British Indian Ocean Territories",
                  "Brunei Darussalam",
                  "Bulgaria",
                  "Burkina Faso",
                  "Burundi",
                  "Cambodia",
                  "Cameroon",
                  "Canada",
                  "Cape Verde",
                  "Cayman",
                  "Central African Republic",
                  "Chad",
                  "Chile",
                  "China",
                  "Christmas Island",
                  "Cocos Islands",
                  "Colombia",
                  "Comoros",
                  "Congo",
                  "Democratic Republic of the Congo",
                  "Cook Islands",
                  "Costa Rica",
                  "Ivory Coast",
                  "Croatia",
                  "Cuba",
                  "Cyprus",
                  "Czech Republic",
                  "Denmark",
                  "Djibouti",
                  "Dominica",
                  "Dominican Republic",
                  "Ecuador",
                  "Egypt",
                  "El Salvador",
                  "Equatorial Guinea",
                  "Eritrea",
                  "Estonia",
                  "Ethiopia",
                  "Falkland Islands",
                  "Faroe Islands",
                  "Fiji",
                  "Finland",
                  "France",
                  "French Guiana",
                  "French Polynesia",
                  "French Southern Territories",
                  "Gabon",
                  "Gambia",
                  "Georgia",
                  "Germany",
                  "Ghana",
                  "Gibraltar",
                  "Greece",
                  "Greenland",
                  "Grenada",
                  "Guadeloupe",
                  "Guatemala",
                  "Guinea",
                  "Guinea-Bissau",
                  "Guyana",
                  "Haiti",
                  "Heard Island",
                  "Honduras",
                  "Hong Kong",
                  "Hungary",
                  "Iceland",
                  "India",
                  "Indonesia",
                  "Iran",
                  "Iraq",
                  "Ireland",
                  "Israel",
                  "Italy",
                  "Jamaica",
                  "Japan",
                  "Jordan",
                  "Kazakhstan",
                  "Kenya",
                  "Kiribati",
                  "North Korea",
                  "South Korea",
                  "Kuwait",
                  "Kyrgyzstan",
                  "Laos",
                  "Latvia",
                  "Lebanon",
                  "Lesotho",
                  "Liberia",
                  "Libya",
                  "Liechtenstein",
                  "Lithuania",
                  "Luxembourg",
                  "Macao",
                  "Macedonia",
                  "Madagascar",
                  "Malawi",
                  "Malaysia",
                  "Maldives",
                  "Mali",
                  "Malta",
                  "Martinique",
                  "Mauritania",
                  "Mauritius",
                  "Mayotte",
                  "Mexico",
                  "Micronesia",
                  "Moldova",
                  "Monaco",
                  "Mongolia",
                  "Montserrat",
                  "Morocco",
                  "Mozambique",
                  "Myanmar",
                  "Namibia",
                  "Nauru",
                  "Nepal",
                  "Netherlands Antilles",
                  "Netherlands",
                  "New Caledonia",
                  "New Zealand",
                  "Nicaragua",
                  "Niger",
                  "Nigeria",
                  "Niue",
                  "Norfolk",
                  "Norway",
                  "Oman",
                  "Pakistan",
                  "Panama",
                  "Papua New Guinea",
                  "Paraguay",
                  "Peru",
                  "Philippines",
                  "Pitcairn",
                  "Poland",
                  "Portugal",
                  "Qatar",
                  "Reunion",
                  "Romania",
                  "Russia",
                  "Rwanda",
                  "Saint Helena",
                  "Saint Kitts and Nevis",
                  "Saint Lucia",
                  "Saint Pierre and Miquelon",
                  "Saint Vincent and the Grenadines",
                  "San Marino",
                  "Sao Tome and Principe",
                  "Saudi Arabia",
                  "Senegal",
                  "Serbia",
                  "Seychelles",
                  "Sierra Leone",
                  "Singapore",
                  "Slovakia",
                  "Slovenia",
                  "Solomon Islands",
                  "Somalia",
                  "South Africa",
                  "South Georgia and the South Sandwich Islands",
                  "Spain",
                  "Sri Lanka",
                  "Sudan",
                  "Suriname",
                  "Swaziland",
                  "Sweden",
                  "Switzerland",
                  "Syrian Arab Republic",
                  "Taiwan",
                  "Tajikistan",
                  "Tanzania",
                  "Thailand",
                  "Timor-Leste",
                  "Togo",
                  "Tokelau",
                  "Tonga",
                  "Trinidad and Tobago",
                  "Tunisia",
                  "Turkey",
                  "Turkmenistan",
                  "Turks and Caicos Islands",
                  "Tuvalu",
                  "Uganda",
                  "Ukraine",
                  "United Arab Emirates",
                  "United Kingdom",
                  "Uruguay",
                  "Uzbekistan",
                  "Vanuatu",
                  "Vatican",
                  "Venezuela",
                  "Vietnam",
                  "British Virgin Islands",
                  "Wallis and Futuna",
                  "Western Sahara",
                  "Yemen",
                  "Zambia",
                  "Zimbabwe"
                ]
              },
              "addressLine1": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100,
                "pattern": "^.*\\S.*"
              },
              "addressLine2": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100,
                "pattern": "^.*\\S.*"
              },
              "addressLine3": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100,
                "pattern": "^.*\\S.*"
              },
              "city": {
                "type": "string"
              },
              "stateCode": {
                "type": "string",
                "enum": [
                  "AL",
                  "AK",
                  "AS",
                  "AZ",
                  "AR",
                  "CA",
                  "CO",
                  "CT",
                  "DE",
                  "DC",
                  "FM",
                  "FL",
                  "GA",
                  "GU",
                  "HI",
                  "ID",
                  "IL",
                  "IN",
                  "IA",
                  "KS",
                  "KY",
                  "LA",
                  "ME",
                  "MH",
                  "MD",
                  "MA",
                  "MI",
                  "MN",
                  "MS",
                  "MO",
                  "MT",
                  "NE",
                  "NV",
                  "NH",
                  "NJ",
                  "NM",
                  "NY",
                  "NC",
                  "ND",
                  "MP",
                  "OH",
                  "OK",
                  "OR",
                  "PW",
                  "PA",
                  "PR",
                  "RI",
                  "SC",
                  "SD",
                  "TN",
                  "TX",
                  "UT",
                  "VT",
                  "VI",
                  "VA",
                  "WA",
                  "WV",
                  "WI",
                  "WY"
                ],
                "enumNames": [
                  "Alabama",
                  "Alaska",
                  "American Samoa",
                  "Arizona",
                  "Arkansas",
                  "California",
                  "Colorado",
                  "Connecticut",
                  "Delaware",
                  "District Of Columbia",
                  "Federated States Of Micronesia",
                  "Florida",
                  "Georgia",
                  "Guam",
                  "Hawaii",
                  "Idaho",
                  "Illinois",
                  "Indiana",
                  "Iowa",
                  "Kansas",
                  "Kentucky",
                  "Louisiana",
                  "Maine",
                  "Marshall Islands",
                  "Maryland",
                  "Massachusetts",
                  "Michigan",
                  "Minnesota",
                  "Mississippi",
                  "Missouri",
                  "Montana",
                  "Nebraska",
                  "Nevada",
                  "New Hampshire",
                  "New Jersey",
                  "New Mexico",
                  "New York",
                  "North Carolina",
                  "North Dakota",
                  "Northern Mariana Islands",
                  "Ohio",
                  "Oklahoma",
                  "Oregon",
                  "Palau",
                  "Pennsylvania",
                  "Puerto Rico",
                  "Rhode Island",
                  "South Carolina",
                  "South Dakota",
                  "Tennessee",
                  "Texas",
                  "Utah",
                  "Vermont",
                  "Virgin Islands",
                  "Virginia",
                  "Washington",
                  "West Virginia",
                  "Wisconsin",
                  "Wyoming"
                ]
              },
              "province": {
                "type": "string"
              },
              "zipCode": {
                "type": "string",
                "pattern": "^\\d{5}$"
              },
              "internationalPostalCode": {
                "type": "string"
              }
            }
          }
        },
        "properties": {
          "optionSelection": {
            "type": "object",
            "view:selectable686Options": {
              "type": "object",
              "properties": {
                "addSpouse": {
                  "$ref": "#/definitions/genericTrueFalse",
                  "default": false
                },
                "addChild": {
                  "$ref": "#/definitions/genericTrueFalse",
                  "default": false
                },
                "report674": {
                  "$ref": "#/definitions/genericTrueFalse",
                  "default": false
                },
                "reportDivorce": {
                  "$ref": "#/definitions/genericTrueFalse",
                  "default": false
                },
                "reportStepchildNotInHousehold": {
                  "$ref": "#/definitions/genericTrueFalse",
                  "default": false
                },
                "reportDeath": {
                  "$ref": "#/definitions/genericTrueFalse",
                  "default": false
                },
                "reportMarriageOfChildUnder18": {
                  "$ref": "#/definitions/genericTrueFalse",
                  "default": false
                },
                "reportChild18OrOlderIsNotAttendingSchool": {
                  "$ref": "#/definitions/genericTrueFalse",
                  "default": false
                }
              }
            }
          },
          "veteranInformation": {
            "type": "object",
            "properties": {
              "veteranInformation": {
                "type": "object",
                "properties": {}
              },
              "veteranAddress": {
                "type": "object",
                "properties": {
                  "veteranAddress": {
                    "$ref": "#/components/schemas/addressSchema"
                  },
                  "phoneNumber": {
                    "$ref": "#/components/schemas/definitions-phone"
                  },
                  "emailAddress": {
                    "$ref": "#/components/schemas/email"
                  }
                }
              }
            }
          },
          "addChild": {
            "type": "object",
            "properties": {
              "addChildInformation": {
                "type": "object",
                "properties": {
                  "childrenToAdd": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "properties": {
                        "fullName": {
                          "$ref": "#/components/schemas/definitions-fullName"
                        },
                        "ssn": {
                          "$ref": "#/components/schemas/definitions-ssn"
                        },
                        "birthDate": {
                          "$ref": "#/components/schemas/definitions-date"
                        }
                      }
                    }
                  }
                }
              },
              "addChildPlaceOfBirth": {
                "type": "object",
                "properties": {
                  "childrenToAdd": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "properties": {
                        "placeOfBirth": {
                          "$ref": "#/components/schemas/genericLocation"
                        },
                        "childStatus": {
                          "type": "object",
                          "properties": {
                            "biological": {
                              "$ref": "#/components/schemas/genericTrueFalse"
                            },
                            "adopted": {
                              "$ref": "#/components/schemas/genericTrueFalse"
                            },
                            "stepchild": {
                              "$ref": "#/components/schemas/genericTrueFalse"
                            },
                            "biologicalStepchild": {
                              "$ref": "#/components/schemas/genericTrueFalse"
                            },
                            "dateBecameDependent": {
                              "$ref": "#/components/schemas/definitions-date"
                            },
                            "stepchildParent": {
                              "$ref": "#/components/schemas/definitions-fullName"
                            },
                            "ssn": {
                              "$ref": "#/components/schemas/definitions-ssn"
                            },
                            "birthDate": {
                              "$ref": "#/components/schemas/definitions-date"
                            }
                          }
                        },
                        "view:childStatusInformation": {
                          "type": "object",
                          "properties": {}
                        },
                        "notSelfSufficient": {
                          "$ref": "#/components/schemas/genericTrueFalse"
                        },
                        "view:notSelfSufficientDescription": {
                          "type": "object",
                          "properties": {}
                        },
                        "previouslyMarried": {
                          "type": "string",
                          "enum": [
                            "Yes",
                            "No"
                          ]
                        },
                        "previousMarriageDetails": {
                          "type": "object",
                          "properties": {
                            "dateMarriageEnded": {
                              "$ref": "#/components/schemas/definitions-date"
                            },
                            "reasonMarriageEnded": {
                              "type": "string",
                              "enum": [
                                "Divorce",
                                "Death",
                                "Annulment",
                                "Other"
                              ]
                            },
                            "otherReasonMarriageEnded": {
                              "$ref": "#/components/schemas/genericTextInput"
                            }
                          }
                        },
                        "childIncome": {
                          "$ref": "#/components/schemas/genericTrueFalse"
                        }
                      }
                    }
                  }
                }
              },
              "addChildAdditionalInformation": {
                "type": "object",
                "properties": {
                  "childrenToAdd": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "properties": {
                        "doesChildLiveWithYou": {
                          "$ref": "#/components/schemas/genericTrueFalse"
                        },
                        "childAddressInfo": {
                          "type": "object",
                          "properties": {
                            "personChildLivesWith": {
                              "$ref": "#/components/schemas/definitions-fullName"
                            },
                            "address": {
                              "$ref": "#/components/schemas/addressSchema"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "childAdditionalEvidence": {
                "type": "object",
                "properties": {
                  "view:additionalEvidenceDescription": {
                    "type": "object",
                    "properties": {}
                  },
                  "childEvidenceDocumentType": {
                    "type": "string",
                    "enum": [
                      "13",
                      "25",
                      "58",
                      "59",
                      "663",
                      "10"
                    ],
                    "enumNames": [
                      "Adoption Decree",
                      "Birth Certificate",
                      "Medical Treatment Record - Government Facility",
                      "Medical Treatment Record - Non-Government Facility",
                      "Medical Opinion",
                      "Unknown"
                    ]
                  },
                  "childSupportingDocuments": {
                    "$ref": "#/components/schemas/files"
                  }
                }
              }
            }
          },
          "addSpouse": {
            "type": "object",
            "properties": {
              "spouseNameInformation": {
                "type": "object",
                "properties": {
                  "fullName": {
                    "$ref": "#/components/schemas/definitions-fullName"
                  },
                  "ssn": {
                    "$ref": "#/components/schemas/definitions-ssn"
                  },
                  "birthDate": {
                    "$ref": "#/components/schemas/definitions-date"
                  },
                  "isVeteran": {
                    "$ref": "#/components/schemas/genericTrueFalse"
                  },
                  "vaFileNumber": {
                    "$ref": "#/components/schemas/genericNumberAndDashInput"
                  },
                  "serviceNumber": {
                    "$ref": "#/components/schemas/genericNumberAndDashInput"
                  }
                }
              },
              "currentMarriageInformation": {
                "type": "object",
                "properties": {
                  "date": {
                    "$ref": "#/components/schemas/definitions-date"
                  },
                  "location": {
                    "$ref": "#/components/schemas/genericLocation"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "CEREMONIAL",
                      "COMMON-LAW",
                      "TRIBAL",
                      "PROXY",
                      "OTHER"
                    ],
                    "enumNames": [
                      "Religious or civil ceremony (minister, justice of the peace, etc.)",
                      "Common-law",
                      "Tribal",
                      "Proxy",
                      "Other"
                    ]
                  },
                  "typeOther": {
                    "$ref": "#/components/schemas/genericTextInput"
                  },
                  "view:marriageTypeInformation": {
                    "type": "object",
                    "properties": {}
                  }
                }
              },
              "doesLiveWithSpouse": {
                "type": "object",
                "properties": {
                  "spouseDoesLiveWithVeteran": {
                    "$ref": "#/components/schemas/genericTrueFalse"
                  },
                  "currentSpouseReasonForSeparation": {
                    "type": "string",
                    "enum": [
                      "Death",
                      "Divorce",
                      "Other"
                    ]
                  },
                  "address": {
                    "$ref": "#/components/schemas/addressSchema"
                  },
                  "spouseIncome": {
                    "$ref": "#/components/schemas/genericTrueFalse"
                  }
                }
              },
              "spouseMarriageHistory": {
                "type": "object",
                "properties": {
                  "spouseWasMarriedBefore": {
                    "$ref": "#/components/schemas/genericTrueFalse"
                  },
                  "spouseMarriageHistory": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "fullName": {
                          "$ref": "#/components/schemas/definitions-fullName"
                        }
                      }
                    }
                  }
                }
              },
              "spouseMarriageHistoryDetails": {
                "type": "object",
                "properties": {
                  "spouseMarriageHistory": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "startDate": {
                          "$ref": "#/components/schemas/definitions-date"
                        },
                        "startLocation": {
                          "$ref": "#/components/schemas/genericLocation"
                        },
                        "reasonMarriageEnded": {
                          "type": "string",
                          "enum": [
                            "Divorce",
                            "Death",
                            "Other"
                          ],
                          "enumNames": [
                            "Divorce",
                            "Death",
                            "Annulment/Other"
                          ]
                        },
                        "reasonMarriageEndedOther": {
                          "$ref": "#/components/schemas/genericTextInput"
                        },
                        "endDate": {
                          "$ref": "#/components/schemas/definitions-date"
                        },
                        "endLocation": {
                          "$ref": "#/components/schemas/genericLocation"
                        }
                      }
                    }
                  }
                }
              },
              "veteranMarriageHistory": {
                "type": "object",
                "properties": {
                  "veteranWasMarriedBefore": {
                    "$ref": "#/components/schemas/genericTrueFalse"
                  },
                  "veteranMarriageHistory": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "fullName": {
                          "$ref": "#/components/schemas/definitions-fullName"
                        }
                      }
                    }
                  }
                }
              },
              "veteranMarriageHistoryDetails": {
                "type": "object",
                "properties": {
                  "veteranMarriageHistory": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "startDate": {
                          "$ref": "#/components/schemas/definitions-date"
                        },
                        "startLocation": {
                          "$ref": "#/components/schemas/genericLocation"
                        },
                        "reasonMarriageEnded": {
                          "type": "string",
                          "enum": [
                            "Divorce",
                            "Death",
                            "Other"
                          ],
                          "enumNames": [
                            "Divorce",
                            "Death",
                            "Annulment/Other"
                          ]
                        },
                        "reasonMarriageEndedOther": {
                          "$ref": "#/components/schemas/genericTextInput"
                        },
                        "endDate": {
                          "$ref": "#/components/schemas/definitions-date"
                        },
                        "endLocation": {
                          "$ref": "#/components/schemas/genericLocation"
                        }
                      }
                    }
                  }
                }
              },
              "marriageAdditionalEvidence": {
                "type": "object",
                "properties": {
                  "view:additionalEvidenceDescription": {
                    "type": "object",
                    "properties": {}
                  },
                  "spouseEvidenceDocumentType": {
                    "type": "string",
                    "enum": [
                      "14",
                      "61",
                      "119",
                      "10"
                    ],
                    "enumNames": [
                      "Affidavit",
                      "Marriage Certificate / License",
                      "VA 21-4171 Supporting Statement Regarding Marriage",
                      "Unknown"
                    ]
                  },
                  "spouseSupportingDocuments": {
                    "$ref": "#/components/schemas/files"
                  }
                }
              }
            }
          },
          "reportDivorce": {
            "type": "object",
            "properties": {
              "fullName": {
                "$ref": "#/components/schemas/definitions-fullName"
              },
              "ssn": {
                "$ref": "#/components/schemas/definitions-ssn"
              },
              "birthDate": {
                "$ref": "#/components/schemas/definitions-date"
              },
              "date": {
                "$ref": "#/components/schemas/definitions-date"
              },
              "location": {
                "$ref": "#/components/schemas/genericLocation"
              },
              "reasonMarriageEnded": {
                "type": "string",
                "enum": [
                  "Divorce",
                  "Other"
                ],
                "enumNames": [
                  "Divorce",
                  "Annulment/Other"
                ]
              },
              "explanationOfOther": {
                "$ref": "#/components/schemas/genericTextInput"
              },
              "spouseIncome": {
                "$ref": "#/components/schemas/genericTrueFalse"
              }
            }
          },
          "deceasedDependents": {
            "type": "object",
            "properties": {
              "dependentInformation": {
                "type": "object",
                "properties": {
                  "deaths": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "properties": {
                        "fullName": {
                          "$ref": "#/components/schemas/definitions-fullName"
                        },
                        "ssn": {
                          "$ref": "#/components/schemas/definitions-ssn"
                        },
                        "birthDate": {
                          "$ref": "#/components/schemas/definitions-date"
                        },
                        "dependentType": {
                          "type": "string",
                          "enum": [
                            "SPOUSE",
                            "DEPENDENT_PARENT",
                            "CHILD"
                          ],
                          "enumNames": [
                            "Spouse",
                            "Dependent Parent",
                            "Child"
                          ]
                        },
                        "childStatus": {
                          "type": "object",
                          "properties": {
                            "childUnder18": {
                              "$ref": "#/components/schemas/genericTrueFalse"
                            },
                            "stepChild": {
                              "$ref": "#/components/schemas/genericTrueFalse"
                            },
                            "adopted": {
                              "$ref": "#/components/schemas/genericTrueFalse"
                            },
                            "disabled": {
                              "$ref": "#/components/schemas/genericTrueFalse"
                            },
                            "childOver18InSchool": {
                              "$ref": "#/components/schemas/genericTrueFalse"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "dependentAdditionalInformation": {
                "type": "object",
                "properties": {
                  "deaths": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "properties": {
                        "date": {
                          "$ref": "#/components/schemas/definitions-date"
                        },
                        "location": {
                          "$ref": "#/components/schemas/genericLocation"
                        },
                        "dependentIncome": {
                          "$ref": "#/components/schemas/genericTrueFalse"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "reportChildMarriage": {
            "type": "object",
            "properties": {
              "fullName": {
                "$ref": "#/components/schemas/definitions-fullName"
              },
              "ssn": {
                "$ref": "#/components/schemas/definitions-ssn"
              },
              "birthDate": {
                "$ref": "#/components/schemas/definitions-date"
              },
              "dateMarried": {
                "$ref": "#/components/schemas/definitions-date"
              },
              "dependentIncome": {
                "$ref": "#/components/schemas/genericTrueFalse"
              }
            }
          },
          "reportChildStoppedAttendingSchool": {
            "type": "object",
            "properties": {
              "fullName": {
                "$ref": "#/components/schemas/definitions-fullName"
              },
              "ssn": {
                "$ref": "#/components/schemas/definitions-ssn"
              },
              "birthDate": {
                "$ref": "#/components/schemas/definitions-date"
              },
              "dateChildLeftSchool": {
                "$ref": "#/components/schemas/definitions-date"
              },
              "dependentIncome": {
                "$ref": "#/components/schemas/genericTrueFalse"
              }
            }
          },
          "reportStepchildNotInHousehold": {
            "type": "object",
            "properties": {
              "stepchildren": {
                "type": "object",
                "properties": {
                  "stepChildren": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "properties": {
                        "fullName": {
                          "$ref": "#/components/schemas/definitions-fullName"
                        },
                        "ssn": {
                          "$ref": "#/components/schemas/definitions-ssn"
                        },
                        "birthDate": {
                          "$ref": "#/components/schemas/definitions-date"
                        }
                      }
                    }
                  }
                }
              },
              "stepchildInformation": {
                "type": "object",
                "properties": {
                  "stepChildren": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "properties": {
                        "supportingStepchild": {
                          "$ref": "#/components/schemas/genericTrueFalse",
                          "default": false
                        },
                        "livingExpensesPaid": {
                          "type": "string",
                          "enum": [
                            "More than half",
                            "Half",
                            "Less than half"
                          ]
                        },
                        "whoDoesTheStepchildLiveWith": {
                          "$ref": "#/components/schemas/definitions-fullName"
                        },
                        "address": {
                          "$ref": "#/components/schemas/addressSchema"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "report674": {
            "type": "object",
            "properties": {
              "studentNameAndSsn": {
                "type": "object",
                "properties": {
                  "view:674Information": {
                    "type": "object",
                    "properties": {}
                  },
                  "fullName": {
                    "$ref": "#/components/schemas/definitions-fullName"
                  },
                  "ssn": {
                    "$ref": "#/components/schemas/definitions-ssn"
                  },
                  "birthDate": {
                    "$ref": "#/components/schemas/definitions-date"
                  },
                  "isParent": {
                    "$ref": "#/components/schemas/genericTrueFalse"
                  },
                  "dependentIncome": {
                    "$ref": "#/components/schemas/genericTrueFalse"
                  }
                }
              },
              "studentAddressMarriageTuition": {
                "type": "object",
                "properties": {
                  "address": {
                    "$ref": "#/components/schemas/addressSchema"
                  },
                  "wasMarried": {
                    "$ref": "#/components/schemas/genericTrueFalse"
                  },
                  "marriageDate": {
                    "$ref": "#/components/schemas/definitions-date"
                  },
                  "tuitionIsPaidByGovAgency": {
                    "$ref": "#/components/schemas/genericTrueFalse"
                  },
                  "agencyName": {
                    "$ref": "#/components/schemas/genericTextInput"
                  },
                  "datePaymentsBegan": {
                    "$ref": "#/components/schemas/definitions-date"
                  }
                }
              },
              "studentSchoolAddress": {
                "type": "object",
                "properties": {
                  "schoolInformation": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "$ref": "#/components/schemas/genericTextInput"
                      },
                      "schoolType": {
                        "type": "string",
                        "enum": [
                          "HighSch",
                          "College",
                          "HomeSch"
                        ],
                        "enumNames": [
                          "High School",
                          "Postsecondary",
                          "Home School"
                        ]
                      },
                      "trainingProgram": {
                        "$ref": "#/components/schemas/genericTextInput"
                      },
                      "address": {
                        "$ref": "#/components/schemas/addressSchema"
                      }
                    }
                  }
                }
              },
              "studentTermDates": {
                "type": "object",
                "properties": {
                  "currentTermDates": {
                    "type": "object",
                    "properties": {
                      "officialSchoolStartDate": {
                        "$ref": "#/components/schemas/definitions-date"
                      },
                      "expectedStudentStartDate": {
                        "$ref": "#/components/schemas/definitions-date"
                      },
                      "expectedGraduationDate": {
                        "$ref": "#/components/schemas/definitions-date"
                      }
                    }
                  },
                  "programInformation": {
                    "type": "object",
                    "properties": {
                      "studentIsEnrolledFullTime": {
                        "$ref": "#/components/schemas/genericTrueFalse"
                      },
                      "courseOfStudy": {
                        "$ref": "#/components/schemas/genericTextInput"
                      },
                      "classesPerWeek": {
                        "type": "number"
                      },
                      "hoursPerWeek": {
                        "type": "number"
                      }
                    }
                  }
                }
              },
              "studentLastTerm": {
                "type": "object",
                "properties": {
                  "studentDidAttendSchoolLastTerm": {
                    "$ref": "#/components/schemas/genericTrueFalse"
                  },
                  "lastTermSchoolInformation": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "$ref": "#/components/schemas/genericTextInput"
                      },
                      "address": {
                        "$ref": "#/components/schemas/addressSchema"
                      },
                      "termBegin": {
                        "$ref": "#/components/schemas/definitions-date"
                      },
                      "dateTermEnded": {
                        "$ref": "#/components/schemas/definitions-date"
                      },
                      "classesPerWeek": {
                        "type": "number"
                      },
                      "hoursPerWeek": {
                        "type": "number"
                      }
                    }
                  }
                }
              },
              "studentIncomeInformation": {
                "type": "object",
                "properties": {
                  "studentDoesEarnIncome": {
                    "$ref": "#/components/schemas/genericTrueFalse"
                  },
                  "studentEarningsFromSchoolYear": {
                    "type": "object",
                    "properties": {
                      "earningsFromAllEmployment": {
                        "$ref": "#/components/schemas/currencyInput"
                      },
                      "annualSocialSecurityPayments": {
                        "$ref": "#/components/schemas/currencyInput"
                      },
                      "otherAnnuitiesIncome": {
                        "$ref": "#/components/schemas/currencyInput"
                      },
                      "allOtherIncome": {
                        "$ref": "#/components/schemas/currencyInput"
                      }
                    }
                  },
                  "studentWillEarnIncomeNextYear": {
                    "$ref": "#/components/schemas/genericTrueFalse"
                  },
                  "studentExpectedEarningsNextYear": {
                    "type": "object",
                    "properties": {
                      "earningsFromAllEmployment": {
                        "$ref": "#/components/schemas/currencyInput"
                      },
                      "annualSocialSecurityPayments": {
                        "$ref": "#/components/schemas/currencyInput"
                      },
                      "otherAnnuitiesIncome": {
                        "$ref": "#/components/schemas/currencyInput"
                      },
                      "allOtherIncome": {
                        "$ref": "#/components/schemas/currencyInput"
                      }
                    }
                  }
                }
              },
              "studentNetworthInformation": {
                "type": "object",
                "properties": {
                  "studentDoesHaveNetworth": {
                    "$ref": "#/components/schemas/genericTrueFalse"
                  },
                  "studentNetworthInformation": {
                    "type": "object",
                    "properties": {
                      "savings": {
                        "$ref": "#/components/schemas/currencyInput"
                      },
                      "securities": {
                        "$ref": "#/components/schemas/currencyInput"
                      },
                      "realEstate": {
                        "$ref": "#/components/schemas/currencyInput"
                      },
                      "otherAssets": {
                        "$ref": "#/components/schemas/currencyInput"
                      },
                      "remarks": {
                        "type": "string",
                        "maxLength": 500,
                        "pattern": "^(?!\\s)(?!.*?\\s{2,})[^<>%$#@!^&*]+$"
                      }
                    }
                  }
                }
              }
            }
          },
          "householdIncome": {
            "type": "object",
            "properties": {
              "householdIncome": {
                "$ref": "#/components/schemas/genericTrueFalse"
              }
            }
          }
        }
      },
      "CreateDependentsResponse": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "id",
              "type",
              "attributes"
            ],
            "properties": {
              "id": {
                "type": "string",
                "example": "bf01349c-585d-480f-8afc-7a2f88697a1a",
                "description": "Randomly generated UUID"
              },
              "type": {
                "type": "string",
                "example": "dependents"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "submitFormJobId"
                ],
                "properties": {
                  "submitFormJobId": {
                    "type": "string",
                    "example": "908550d787e8dbfb0bf3df85"
                  }
                }
              }
            }
          }
        }
      },
      "DependentsRequestDecisions": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "id",
              "type",
              "attributes"
            ],
            "properties": {
              "id": {
                "type": "string",
                "example": "abe3f152-90b0-45cb-8776-4958bad0e0ef",
                "description": "user UUID"
              },
              "type": {
                "type": "string",
                "example": "dependency_request_decisions"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "dependencyVerifications",
                  "diaries",
                  "promptRenewal"
                ],
                "properties": {
                  "dependencyVerifications": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "awardEffectiveDate",
                        "awardEventId",
                        "awardType",
                        "beginAwardEventId",
                        "beneficiaryId",
                        "birthdayDate",
                        "decisionDate",
                        "decisionId",
                        "dependencyDecisionId",
                        "dependencyDecisionType",
                        "dependencyDecisionTypeDescription",
                        "dependencyStatusType",
                        "dependencyStatusTypeDescription",
                        "eventDate",
                        "firstName",
                        "fullName",
                        "lastName",
                        "modifiedAction",
                        "modifiedBy",
                        "modifiedDate",
                        "modifiedLocation",
                        "modifiedProcess",
                        "personId",
                        "relationshipTypeDescription",
                        "sortDate",
                        "sortOrderNumber",
                        "veteranId"
                      ],
                      "properties": {
                        "awardEffectiveDate": {
                          "type": "string",
                          "nullable": true,
                          "example": "2000-06-01T00:00:00.000-05:00"
                        },
                        "awardEventId": {
                          "type": "string",
                          "nullable": true,
                          "example": "60300"
                        },
                        "awardType": {
                          "type": "string",
                          "example": "CPL"
                        },
                        "beginAwardEventId": {
                          "type": "string",
                          "nullable": true,
                          "example": "25326"
                        },
                        "beneficiaryId": {
                          "type": "string",
                          "example": "13014883"
                        },
                        "birthdayDate": {
                          "type": "string",
                          "nullable": true,
                          "example": "2000-05-05T00:00:00.000-05:00"
                        },
                        "decisionDate": {
                          "type": "string",
                          "nullable": true,
                          "example": "2006-05-02T09:46:06.000-05:00"
                        },
                        "decisionId": {
                          "type": "string",
                          "nullable": true,
                          "example": "24678"
                        },
                        "dependencyDecisionId": {
                          "type": "string",
                          "nullable": true,
                          "example": "14599"
                        },
                        "dependencyDecisionType": {
                          "type": "string",
                          "nullable": true,
                          "example": "DEPEST"
                        },
                        "dependencyDecisionTypeDescription": {
                          "type": "string",
                          "nullable": true,
                          "example": "Dependency Established"
                        },
                        "dependencyStatusType": {
                          "type": "string",
                          "nullable": true,
                          "example": "SP"
                        },
                        "dependencyStatusTypeDescription": {
                          "type": "string",
                          "nullable": true,
                          "example": "Spouse"
                        },
                        "eventDate": {
                          "type": "string",
                          "nullable": true,
                          "example": "2000-05-05T00:00:00.000-05:00"
                        },
                        "firstName": {
                          "type": "string",
                          "example": "lauren"
                        },
                        "fullName": {
                          "type": "string",
                          "nullable": true,
                          "example": "lauren jakes"
                        },
                        "lastName": {
                          "type": "string",
                          "example": "jakes"
                        },
                        "modifiedAction": {
                          "type": "string",
                          "example": "U"
                        },
                        "modifiedBy": {
                          "type": "string",
                          "example": "IA"
                        },
                        "modifiedDate": {
                          "type": "string",
                          "nullable": true,
                          "example": "2008-04-21T14:14:20.000-05:00"
                        },
                        "modifiedLocation": {
                          "type": "string",
                          "example": "101"
                        },
                        "modifiedProcess": {
                          "type": "string",
                          "example": "106072 Backfill"
                        },
                        "personId": {
                          "type": "string",
                          "example": "13018361"
                        },
                        "relationshipTypeDescription": {
                          "type": "string",
                          "nullable": true,
                          "example": "Spouse"
                        },
                        "sortDate": {
                          "type": "string",
                          "nullable": true,
                          "example": "2006-05-02T09:46:06.000-05:00"
                        },
                        "sortOrderNumber": {
                          "type": "string",
                          "example": "0"
                        },
                        "veteranId": {
                          "type": "string",
                          "nullable": true,
                          "example": "13014883"
                        }
                      }
                    }
                  },
                  "diaries": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "awardDiaryId",
                        "awardType",
                        "beneficaryId",
                        "diaryDueDate",
                        "diaryLcStatusType",
                        "diaryLcStatusTypeDescription",
                        "diaryReasonType",
                        "diaryReasonTypeDescription",
                        "fileNumber",
                        "firstNm",
                        "lastName",
                        "modifiedAction",
                        "modifiedBy",
                        "modifiedDate",
                        "modifiedLocation",
                        "modifiedProcess",
                        "ptcpntDiaryId",
                        "statusDate",
                        "veteranId"
                      ],
                      "properties": {
                        "awardDiaryId": {
                          "type": "string",
                          "example": "3322"
                        },
                        "awardType": {
                          "type": "string",
                          "example": "CPL"
                        },
                        "beneficaryId": {
                          "type": "string",
                          "example": "13014883"
                        },
                        "diaryDueDate": {
                          "type": "string",
                          "example": "2014-05-01T00:00:00.000-05:00"
                        },
                        "diaryLcStatusType": {
                          "type": "string",
                          "example": "PEND"
                        },
                        "diaryLcStatusTypeDescription": {
                          "type": "string",
                          "example": "Pending"
                        },
                        "diaryReasonType": {
                          "type": "string",
                          "example": "24"
                        },
                        "diaryReasonTypeDescription": {
                          "type": "string",
                          "example": "Issue Dependency Verification Form"
                        },
                        "fileNumber": {
                          "type": "string",
                          "example": "546212222"
                        },
                        "firstNm": {
                          "type": "string",
                          "example": "Ray"
                        },
                        "lastName": {
                          "type": "string",
                          "example": "Jakes"
                        },
                        "modifiedAction": {
                          "type": "string",
                          "example": "I"
                        },
                        "modifiedBy": {
                          "type": "string",
                          "example": "CAPSBRAN"
                        },
                        "modifiedDate": {
                          "type": "string",
                          "example": "2006-05-02T07:52:11.000-05:00"
                        },
                        "modifiedLocation": {
                          "type": "string",
                          "example": "317"
                        },
                        "modifiedProcess": {
                          "type": "string",
                          "example": "cp_diary_pkg.do_create"
                        },
                        "ptcpntDiaryId": {
                          "type": "string",
                          "example": "13018359"
                        },
                        "statusDate": {
                          "type": "string",
                          "example": "2006-05-02T07:52:11.000-05:00"
                        },
                        "veteranId": {
                          "type": "string",
                          "example": "13014883"
                        }
                      }
                    }
                  },
                  "promptRenewal": {
                    "type": "boolean",
                    "example": false
                  }
                }
              }
            }
          }
        }
      },
      "IndividualDisabilityRatings": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "decision",
          "effectiveDate",
          "ratingPercentage",
          "diagnosticText"
        ],
        "properties": {
          "decision": {
            "type": "string",
            "example": "Service Connected"
          },
          "effectiveDate": {
            "type": "string",
            "example": "2005-01-01T00:00:00.000+00:00"
          },
          "ratingPercentage": {
            "type": "number",
            "example": 10
          },
          "diagnosticText": {
            "type": "string",
            "example": "Hearing Loss"
          }
        }
      },
      "DisabilityRating": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "example": "disabilityRating"
              },
              "id": {
                "type": "string",
                "example": "0",
                "description": "Always 0"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "combinedDisabilityRating",
                  "individualRatings"
                ],
                "properties": {
                  "combinedDisabilityRating": {
                    "type": "number",
                    "example": 100
                  },
                  "individualRatings": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "$ref": "#/components/schemas/IndividualDisabilityRatings"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "LighthouseErrors": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "errors"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "status": {
                  "type": "string"
                },
                "code": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "detail": {
                  "type": "string"
                },
                "error": {
                  "type": "string"
                },
                "path": {
                  "type": "string"
                },
                "timestamp": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Efolder": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "example": "efolder_document"
              },
              "id": {
                "type": "string",
                "example": "{23fe358d-6e82-4541-804c-ce7562ba28f4}",
                "description": "document id"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "doc_type",
                  "type_description",
                  "received_at"
                ],
                "properties": {
                  "doc_type": {
                    "type": "string",
                    "example": 1215
                  },
                  "type_description": {
                    "type": "string",
                    "example": "DMC - Debt Increase Letter"
                  },
                  "received_at": {
                    "type": "date",
                    "example": "2020-05-28"
                  }
                }
              }
            }
          }
        }
      },
      "EnrollmentStatus": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "example": "enrollment_status"
              },
              "id": {
                "type": "string",
                "example": "23fe358d-6e82-4541-804c-ce7562ba28f4",
                "description": "user uuid"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "type": "string",
                    "example": "enrolled",
                    "description": "one of enrolled, pending, or other"
                  }
                }
              }
            }
          }
        }
      },
      "FacilityInfo": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "city",
          "state",
          "cerner",
          "clinics"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "358"
          },
          "name": {
            "type": "string",
            "example": "Cheyenne VA Medical Center"
          },
          "city": {
            "type": "string",
            "example": "Cheyenne"
          },
          "state": {
            "type": "string",
            "example": "WY"
          },
          "cerner": {
            "type": "boolean",
            "description": "Is facility a cerner facility?"
          },
          "miles": {
            "type": "string",
            "nullable": true,
            "example": "3.17",
            "description": "Distance from requested location (current/home) based on haversine distance"
          }
        }
      },
      "FacilitiesInfo": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "example": "facilitiesInfo"
              },
              "id": {
                "type": "string",
                "example": "abe3f152-90b0-45cb-8776-4958bad0e0ef",
                "description": "user UUID"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "facilities"
                ],
                "properties": {
                  "facilities": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "$ref": "#/components/schemas/FacilityInfo"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "FacilitiesInfoRequestBody": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "example": 34.5968,
            "description": "lat for user's current location"
          },
          "long": {
            "type": "number",
            "example": 10.5796,
            "description": "long for user's current location"
          }
        }
      },
      "ImmunizationRecord": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "id",
          "attributes",
          "relationships"
        ],
        "properties": {
          "type": {
            "type": "string",
            "example": "immunization"
          },
          "id": {
            "type": "string",
            "example": "I2-3JYDMXC6RXTU4H25KRVXATSEJQ000000",
            "description": "Upstream identifier"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "cvxCode",
              "date",
              "doseNumber",
              "doseSeries",
              "groupName",
              "manufacturer",
              "note",
              "reaction",
              "shortDescription"
            ],
            "properties": {
              "cvxCode": {
                "type": "integer",
                "nullable": true,
                "example": 140
              },
              "date": {
                "type": "string",
                "nullable": true,
                "example": "2009-03-19T12:24:55Z"
              },
              "doseNumber": {
                "type": "string",
                "nullable": true,
                "example": "Booster"
              },
              "doseSeries": {
                "type": {
                  "anyOf": [
                    "string",
                    "integer"
                  ]
                },
                "nullable": true,
                "example": 1
              },
              "groupName": {
                "type": "string",
                "nullable": true,
                "example": "FLU"
              },
              "manufacturer": {
                "type": "string",
                "nullable": true,
                "example": "nil"
              },
              "note": {
                "type": "string",
                "nullable": true,
                "example": "Dose #45 of 101 of Influenza  seasonal  injectable  preservative free vaccine administered."
              },
              "shortDescription": {
                "type": "string",
                "nullable": true,
                "example": "Influenza  seasonal  injectable  preservative free"
              },
              "reaction": {
                "type": "string",
                "nullable": true,
                "example": "Swelling"
              }
            }
          },
          "relationships": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "location"
            ],
            "properties": {
              "location": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "data",
                  "links"
                ],
                "properties": {
                  "data": {
                    "type": "object",
                    "additionalProperties": false,
                    "nullable": true,
                    "required": [
                      "id",
                      "type"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "I2-4KG3N5YUSPTWD3DAFMLMRL5V5U000000"
                      },
                      "type": {
                        "type": "string",
                        "example": "location"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "related"
                    ],
                    "properties": {
                      "related": {
                        "type": "string",
                        "nullable": true,
                        "example": "staging-api.va.gov/mobile/v0/health/locations/I2-2FPCKUIXVR7RJLLG34XVWGZERM000000"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Immunizations": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "$ref": "#/components/schemas/ImmunizationRecord"
            }
          }
        }
      },
      "AllergyIntolerances": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "example": "allergy_intolerance"
                },
                "id": {
                  "type": "string",
                  "example": "abe3f152-90b0-45cb-8776-4958bad0e0ef",
                  "description": "Upstream identifier"
                },
                "attributes": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "resourceType",
                    "type",
                    "clinicalStatus",
                    "code",
                    "recordedDate",
                    "patient",
                    "notes",
                    "recorder",
                    "reactions"
                  ],
                  "properties": {
                    "resourceType": {
                      "type": "string",
                      "example": "AllergyIntolerance"
                    },
                    "type": {
                      "type": "string",
                      "example": "allergy"
                    },
                    "clinicalStatus": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "coding"
                      ],
                      "properties": {
                        "coding": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "system",
                              "code",
                              "display"
                            ],
                            "properties": {
                              "system": {
                                "type": "string",
                                "example": "http://hl7.org/fhir/ValueSet/allergyintolerance-clinical"
                              },
                              "code": {
                                "type": "string",
                                "example": "active"
                              }
                            }
                          }
                        }
                      }
                    },
                    "code": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "coding"
                      ],
                      "properties": {
                        "coding": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "system",
                              "code",
                              "display"
                            ],
                            "properties": {
                              "system": {
                                "type": "string",
                                "example": "http://snomed.info/sct"
                              },
                              "code": {
                                "type": "string",
                                "example": "300916003"
                              },
                              "display": {
                                "type": "string",
                                "example": "Latex Allergy"
                              }
                            }
                          }
                        }
                      }
                    },
                    "notes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "authorReference",
                          "time",
                          "text"
                        ],
                        "properties": {
                          "authorReference": {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "reference",
                              "display"
                            ],
                            "properties": {
                              "reference": {
                                "type": "string",
                                "example": "https://sandbox-api.va.gov/services/fhir/v0/r4/Practitioner/I2-HRJI2MVST2IQSPR7U5SACWIWZA000000"
                              },
                              "display": {
                                "type": "string",
                                "example": "DR. JANE460 DOE922 MD"
                              }
                            }
                          },
                          "time": {
                            "type": "datetime",
                            "example": "1999-01-07T01:43:31Z"
                          },
                          "text": {
                            "type": "string",
                            "example": "Latex allergy"
                          }
                        }
                      }
                    },
                    "recordedDate": {
                      "type": "datetime",
                      "example": "2019-04-20T14:15:00.000-04:00"
                    },
                    "patient": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "reference",
                        "display"
                      ],
                      "properties": {
                        "reference": {
                          "type": "string",
                          "example": "https://sandbox-api.va.gov/services/fhir/v0/r4/Patient/43000199"
                        },
                        "display": {
                          "type": "string",
                          "example": "Ms. Carlita746 Kautzer186"
                        }
                      }
                    },
                    "recorder": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "reference",
                        "display"
                      ],
                      "properties": {
                        "reference": {
                          "type": "string",
                          "example": "https://sandbox-api.va.gov/services/fhir/v0/r4/Practitioner/I2-4ZXYC2SQAZCHMOWPPFNLOY65GE000000"
                        },
                        "display": {
                          "type": "string",
                          "example": "DR. THOMAS359 REYNOLDS206 PHD"
                        }
                      }
                    },
                    "reactions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "substance",
                          "manifestation",
                          "text"
                        ],
                        "properties": {
                          "substance": {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "coding"
                            ],
                            "properties": {
                              "coding": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "required": [
                                    "system",
                                    "code",
                                    "display"
                                  ],
                                  "properties": {
                                    "system": {
                                      "type": "string",
                                      "example": "http://snomed.info/sct"
                                    },
                                    "code": {
                                      "type": "string",
                                      "example": "300916003"
                                    },
                                    "display": {
                                      "type": "string",
                                      "example": "Latex allergy"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "manifestation": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "additionalProperties": false,
                              "required": [
                                "coding"
                              ],
                              "properties": {
                                "coding": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "required": [
                                      "system",
                                      "code",
                                      "display"
                                    ],
                                    "properties": {
                                      "system": {
                                        "type": "string"
                                      },
                                      "code": {
                                        "type": "string"
                                      },
                                      "display": {
                                        "type": "string"
                                      }
                                    },
                                    "example": {
                                      "system": "urn:oid:2.16.840.1.113883.6.233",
                                      "code": "43000006",
                                      "display": "Itchy Watery Eyes"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "text": {
                            "type": "string",
                            "example": "Itchy Watery Eyes"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "LabsAndTests": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "example": "letter"
                },
                "id": {
                  "type": "string",
                  "example": "abe3f152-90b0-45cb-8776-4958bad0e0ef",
                  "description": "Upstream identifier"
                },
                "attributes": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "category",
                    "subject",
                    "effectiveDateTime",
                    "issued",
                    "result"
                  ],
                  "properties": {
                    "category": {
                      "type": "string",
                      "example": "Laboratory"
                    },
                    "subject": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "reference",
                        "display"
                      ],
                      "properties": {
                        "reference": {
                          "type": "string",
                          "example": "https://sandbox-api.va.gov/services/fhir/v0/r4/Patient/1000005"
                        },
                        "display": {
                          "type": "string",
                          "example": "Mr. Shane235 Bartell116"
                        }
                      }
                    },
                    "effectiveDateTime": {
                      "type": "datetime",
                      "example": "2019-04-20T14:15:00.000-04:00"
                    },
                    "issued": {
                      "type": "datetime",
                      "example": "2019-04-20T14:15:00.000-04:00"
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                          "reference",
                          "display"
                        ],
                        "properties": {
                          "reference": {
                            "type": "string",
                            "example": "https://sandbox-api.va.gov/services/fhir/v0/r4/Observation/I2-ILWORI4YUOUAR5H2GCH6ATEFRM000000"
                          },
                          "display": {
                            "type": "string",
                            "example": "Glucose"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Observation": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "example": "observation"
                },
                "id": {
                  "type": "string",
                  "example": "abe3f152-90b0-45cb-8776-4958bad0e0ef",
                  "description": "Upstream identifier"
                },
                "attributes": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "status",
                    "category",
                    "code",
                    "subject",
                    "effectiveDateTime",
                    "issued",
                    "performer",
                    "valueQuantity"
                  ],
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "final"
                    },
                    "category": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "coding",
                        "text"
                      ],
                      "properties": {
                        "coding": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "system",
                              "code",
                              "display"
                            ],
                            "properties": {
                              "system": {
                                "type": "string",
                                "example": "http://terminology.hl7.org/CodeSystem/observation-category"
                              },
                              "code": {
                                "type": "string",
                                "example": "laboratory"
                              },
                              "display": {
                                "type": "string",
                                "example": "Laboratory"
                              }
                            }
                          }
                        },
                        "text": {
                          "type": "string",
                          "example": "Laboratory"
                        }
                      }
                    },
                    "code": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "coding",
                        "text"
                      ],
                      "properties": {
                        "coding": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "required": [
                              "system",
                              "code",
                              "display"
                            ],
                            "properties": {
                              "system": {
                                "type": "string",
                                "example": "http://loinc.org"
                              },
                              "code": {
                                "type": "string",
                                "example": "2339-0"
                              },
                              "display": {
                                "type": "string",
                                "example": "Glucose"
                              }
                            }
                          }
                        },
                        "text": {
                          "type": "string",
                          "example": "Glucose"
                        }
                      }
                    },
                    "subject": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "reference",
                        "display"
                      ],
                      "properties": {
                        "reference": {
                          "type": "string",
                          "example": "https://sandbox-api.va.gov/services/fhir/v0/r4/Patient/1000005"
                        },
                        "display": {
                          "type": "string",
                          "example": "Mr. Shane235 Bartell116"
                        }
                      }
                    },
                    "effectiveDateTime": {
                      "type": "datetime",
                      "example": "2019-04-20T14:15:00.000-04:00"
                    },
                    "issued": {
                      "type": "datetime",
                      "example": "2019-04-20T14:15:00.000-04:00"
                    },
                    "performer": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "reference",
                        "display"
                      ],
                      "properties": {
                        "reference": {
                          "type": "string",
                          "example": "https://sandbox-api.va.gov/services/fhir/v0/r4/Practitioner/I2-4ZXYC2SQAZCHMOWPPFNLOY65GE000000"
                        },
                        "display": {
                          "type": "string",
                          "example": "DR. THOMAS359 REYNOLDS206 PHD"
                        }
                      }
                    },
                    "valueQuantity": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "value",
                        "unit",
                        "system",
                        "code"
                      ],
                      "properties": {
                        "value": {
                          "type": "integer",
                          "example": 78.278855002875
                        },
                        "unit": {
                          "type": "string",
                          "example": "mg/dL"
                        },
                        "system": {
                          "type": "string",
                          "example": "http://unitsofmeasure.org"
                        },
                        "code": {
                          "type": "string",
                          "example": "mg/dL"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Locations": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "example": "location"
              },
              "id": {
                "type": "string",
                "example": "I2-3JYDMXC6RXTU4H25KRVXATSEJQ000000",
                "description": "Upstream identifier. Same as id provided."
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "name",
                  "address"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "COLUMBUS VAMC"
                  },
                  "address": {
                    "type": "object",
                    "additionalProperties": false,
                    "$ref": "#/components/schemas/FacilityAddress"
                  }
                }
              }
            }
          }
        }
      },
      "PrescriptionRecord": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "13650544",
            "description": "Upstream identifier"
          },
          "type": {
            "type": "string",
            "example": "Prescription"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "refillStatus",
              "refillSubmitDate",
              "refillDate",
              "refillRemaining",
              "facilityName",
              "isRefillable",
              "isTrackable",
              "orderedDate",
              "quantity",
              "expirationDate",
              "prescriptionNumber",
              "prescriptionName",
              "instructions",
              "stationNumber",
              "facilityPhoneNumber"
            ],
            "properties": {
              "refillStatus": {
                "type": "string, null",
                "example": "refillinprocess",
                "enum": [
                  "active",
                  "deleted",
                  "discontinued",
                  "discontinuedByProvider",
                  "discontinuedEdit",
                  "expired",
                  "hold",
                  "nonVerified",
                  "providerHold",
                  "refillinprocess",
                  "submitted",
                  "suspended",
                  "unknown",
                  "activeParked",
                  "dateOfDeathEntered",
                  "transferred"
                ]
              },
              "refillSubmitDate": {
                "type": "string, null",
                "example": "2022-10-28T04:00:00.000Z"
              },
              "refillDate": {
                "type": "string, null",
                "example": "2022-10-28T04:00:00.000Z"
              },
              "refillRemaining": {
                "type": "integer, null",
                "example": 5
              },
              "facilityName": {
                "type": "string, null",
                "example": "DAYT29"
              },
              "isRefillable": {
                "type": "bool, null",
                "example": false
              },
              "isTrackable": {
                "type": "bool, null",
                "example": false
              },
              "orderedDate": {
                "type": "string, null",
                "example": "2022-10-28T04:00:00.000Z"
              },
              "quantity": {
                "type": "integer, null",
                "example": 10
              },
              "expirationDate": {
                "type": "string, null",
                "example": "2022-10-28T04:00:00.000Z"
              },
              "prescriptionNumber": {
                "type": "string, null",
                "example": "2719536"
              },
              "prescriptionName": {
                "type": "string, null",
                "example": "SOMATROPIN 5MG INJ (VI)"
              },
              "instructions": {
                "type": "string, null",
                "example": "INJECT 1MG INTO THE MUSCLE WEEKLY FOR 30 DAYS"
              },
              "dispensedDate": {
                "type": "string, null",
                "example": "2022-10-28T04:00:00.000Z"
              },
              "stationNumber": {
                "type": "string, null",
                "example": "989"
              },
              "facilityPhoneNumber": {
                "type": "string, null",
                "example": "(217) 636-6712"
              }
            }
          }
        }
      },
      "Prescriptions": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data",
          "meta"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "$ref": "#/components/schemas/PrescriptionRecord"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "prescriptionStatusCount"
            ],
            "properties": {
              "prescriptionStatusCount": {
                "type": "object",
                "additionalProperties": false,
                "description": "Count of different types of prescriptions. \"active\" contains prescriptions that have a `refillStatus` of active,\nsubmitted, providerHold, activeParked, refillinprocess, and/or prescriptions that have a tracking number \nassociated with them. If a prescriptions does not meet the criteria for \"active\", it appends it's `refillStatus` to the list. \nIf a refillStatus is not present in any prescription, it will not be included in this list.\nSee `refillStatus` enum for all possible values. \"isRefillable\" is a separate count of prescriptions with `isRefillable` set to true. \nA prescription can be counted in both `isRefillable` and any other status count.\n",
                "example": {
                  "active": 1,
                  "isRefillable": 1,
                  "discontinued": 1,
                  "expired": 2,
                  "historical": 3,
                  "pending": 1,
                  "transferred": 2,
                  "submitted": 1,
                  "hold": 1,
                  "unknown": 2,
                  "total": 14
                }
              }
            }
          }
        }
      },
      "RefillPayload": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "ids"
        ],
        "properties": {
          "ids": {
            "type": "array",
            "example": [
              "7417954",
              "6970769",
              "8398465"
            ]
          }
        }
      },
      "PrescriptionsRefill": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "6260ab13-177f-583d-b2dc-1b350404abb7",
            "description": "user UUID"
          },
          "type": {
            "type": "string",
            "example": "PrescriptionRefills"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "failedStationList",
              "successfulStationList",
              "lastUpdatedTime",
              "prescriptionList",
              "failedPrescriptionIds",
              "errors",
              "infoMessages"
            ],
            "properties": {
              "failedStationList": {
                "type": "string, null",
                "example": "DAYT29, DAYT29"
              },
              "successfulStationList": {
                "type": "string, null",
                "example": "SLC4, VAMCSLC-OUTPTRX"
              },
              "lastUpdatedTime": {
                "type": "string, null",
                "example": "Thu, 08 Dec 2022 12:11:33 EST"
              },
              "prescriptionList": {
                "type": "string, null",
                "example": null
              },
              "failedPrescriptionIds": {
                "type": "array",
                "example": [
                  "8398465",
                  "8398466",
                  "8398467"
                ]
              },
              "errors": {
                "type": "array",
                "example": [
                  {
                    "errorCode": 139,
                    "developerMessage": "Prescription not refillable for id : 8398465",
                    "message": "Prescription is not Refillable"
                  }
                ]
              },
              "infoMessages": {
                "type": "array",
                "example": []
              }
            }
          }
        }
      },
      "PrescriptionTrackingRecord": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "657068347565",
            "description": "Tracking number"
          },
          "type": {
            "type": "string",
            "example": "PrescriptionTracking"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "prescriptionName",
              "prescriptionNumber",
              "prescriptionId",
              "trackingNumber",
              "ndcNumber",
              "shippedDate",
              "deliveryService",
              "otherPrescriptions"
            ],
            "properties": {
              "prescriptionName": {
                "type": "string, null",
                "example": "Ibuprofen 200mg"
              },
              "prescriptionNumber": {
                "type": "string, null",
                "example": "2719551"
              },
              "prescriptionId": {
                "type": "integer",
                "example": "13650541"
              },
              "trackingNumber": {
                "type": "string, null",
                "example": "657068347565"
              },
              "ndcNumber": {
                "type": "string, null",
                "example": "00781171601"
              },
              "shippedDate": {
                "type": "string, null",
                "example": "2022-10-28T04:00:00.000Z"
              },
              "deliveryService": {
                "type": "integer, null",
                "example": "USPS"
              },
              "otherPrescriptions": {
                "type": "array, null",
                "example": [
                  {
                    "prescriptionName": "ETHAMBUTOL HCL 100MG TAB",
                    "prescriptionNumber": "2719553"
                  }
                ],
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "prescriptionName",
                    "prescriptionNumber"
                  ],
                  "properties": {
                    "prescriptionName": {
                      "type": "string",
                      "example": "ETHAMBUTOL HCL 100MG TAB"
                    },
                    "prescriptionNumber": {
                      "type": "2719553"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PrescriptionTracking": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "$ref": "#/components/schemas/PrescriptionTrackingRecord"
            }
          }
        }
      },
      "LettersInfo": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "letterType"
        ],
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "Commissary Letter",
              "Proof of Service Letter",
              "Proof of Creditable Prescription Drug Coverage Letter",
              "Proof of Minimum Essential Coverage Letter",
              "Service Verification Letter",
              "Civil Service Preference Letter",
              "Benefit Summary Letter",
              "Dependent Benefit Summary Letter",
              "Benefit Verification Letter"
            ]
          },
          "letterType": {
            "type": "string",
            "enum": [
              "commissary",
              "proof_of_service",
              "medicare_partd",
              "minimum_essential_coverage",
              "service_verification",
              "civil_service",
              "benefit_summary",
              "benefit_summary_dependent",
              "benefit_verification",
              "certificate_of_eligibility"
            ]
          }
        }
      },
      "Letters": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "example": "letters"
              },
              "id": {
                "type": "string",
                "example": "abe3f152-90b0-45cb-8776-4958bad0e0ef",
                "description": "user UUID"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "letters"
                ],
                "properties": {
                  "letters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "$ref": "#/components/schemas/LettersInfo"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "LettersBeneficiaryInfo": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "example": "evssLettersBeneficiaryResponses"
              },
              "id": {
                "type": "string",
                "example": "3be0c7de-bfe1-4101-a326-5567bcd98b63",
                "description": "user UUID"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "letters",
                  "benefitInformation"
                ],
                "properties": {
                  "benefitInformation": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "awardEffectiveDate",
                      "hasChapter35Eligibility",
                      "monthlyAwardAmount",
                      "serviceConnectedPercentage"
                    ],
                    "properties": {
                      "awardEffectiveDate": {
                        "type": "string",
                        "example": "2013-06-06T04:00:00.000+00:00"
                      },
                      "hasChapter35Eligibility": {
                        "type": "boolean",
                        "example": true
                      },
                      "monthlyAwardAmount": {
                        "type": "number",
                        "example": 123
                      },
                      "serviceConnectedPercentage": {
                        "type": "number",
                        "example": 2
                      },
                      "hasDeathResultOfDisability": {
                        "type": "boolean",
                        "example": false
                      },
                      "hasSurvivorsIndemnityCompensationAward": {
                        "type": "boolean",
                        "example": true
                      },
                      "hasSurvivorsPensionAward": {
                        "type": "boolean",
                        "example": false
                      },
                      "hasAdaptedHousing": {
                        "type": "boolean",
                        "example": true
                      },
                      "hasIndividualUnemployabilityGranted": {
                        "type": "boolean",
                        "example": false
                      },
                      "hasNonServiceConnectedPension": {
                        "type": "boolean",
                        "example": true
                      },
                      "hasServiceConnectedDisabilities": {
                        "type": "boolean",
                        "example": false
                      },
                      "hasSpecialMonthlyCompensation": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  },
                  "militaryService": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "branch",
                        "characterOfService",
                        "enteredDate",
                        "releasedDate"
                      ],
                      "properties": {
                        "branch": {
                          "type": "string",
                          "example": "Army"
                        },
                        "characterOfService": {
                          "type": "string",
                          "enum": [
                            "HONORABLE",
                            "OTHER_THAN_HONORABLE",
                            "UNDER_HONORABLE_CONDITIONS",
                            "GENERAL",
                            "UNCHARACTERIZED",
                            "UNCHARACTERIZED_ENTRY_LEVEL",
                            "DISHONORABLE"
                          ]
                        },
                        "enteredDate": {
                          "type": "string",
                          "example": "1973-01-01T05:00:00.000+00:00"
                        },
                        "releasedDate": {
                          "type": "string",
                          "example": "1977-10-01T04:00:00.000+00:00"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "LetterOptions": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "militaryService",
          "serviceConnectedDisabilities",
          "serviceConnectedEvaluation",
          "nonServiceConnectedPension",
          "monthlyAward",
          "unemployable",
          "specialMonthlyCompensation",
          "adaptedHousing",
          "chapter35Eligibility",
          "deathResultOfDisability",
          "survivorsAward"
        ],
        "properties": {
          "militaryService": {
            "type": "boolean"
          },
          "serviceConnectedDisabilities": {
            "type": "boolean"
          },
          "serviceConnectedEvaluation": {
            "type": "boolean"
          },
          "nonServiceConnectedPension": {
            "type": "boolean"
          },
          "monthlyAward": {
            "type": "boolean"
          },
          "unemployable": {
            "type": "boolean"
          },
          "specialMonthlyCompensation": {
            "type": "boolean"
          },
          "adaptedHousing": {
            "type": "boolean"
          },
          "chapter35Eligibility": {
            "type": "boolean"
          },
          "deathResultOfDisability": {
            "type": "boolean"
          },
          "survivorsAward": {
            "type": "boolean"
          }
        }
      },
      "Letter": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "example": "letter"
              },
              "id": {
                "type": "string",
                "example": "abe3f152-90b0-45cb-8776-4958bad0e0ef"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "letter"
                ],
                "properties": {
                  "letter": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "letterDescription",
                      "letterContent"
                    ],
                    "properties": {
                      "letterDescription": {
                        "type": "string",
                        "example": "This card verifies that you served honorably in the Armed Forces."
                      },
                      "letterContent": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "contentKey",
                            "contentTitle",
                            "content"
                          ],
                          "properties": {
                            "contentKey": {
                              "type": "string",
                              "example": "front-of-card"
                            },
                            "contentTitle": {
                              "type": "string",
                              "example": "<front of card>"
                            },
                            "content": {
                              "type": "string",
                              "example": "This card is to serve as proof the individual listed below served honorably in the Uniformed Services of the United States."
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "MaintenanceWindows": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "id": {
                  "type": "string",
                  "example": "23fe358d-6e82-4541-804c-ce7562ba28f4",
                  "description": "Database id"
                },
                "type": {
                  "type": "string",
                  "example": "maintenance_window"
                },
                "attributes": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "service",
                    "start_time",
                    "end_time"
                  ],
                  "properties": {
                    "service": {
                      "type": "string",
                      "enum": [
                        "evss",
                        "caseflow",
                        "payment_history",
                        "facility_locator",
                        "appeals",
                        "military_service_history",
                        "claims",
                        "direct_deposit_benefits",
                        "disability_rating",
                        "letters_and_documents",
                        "secure_messaging",
                        "appointments",
                        "user_profile_update",
                        "rx_refill"
                      ],
                      "example": "claims"
                    },
                    "start_time": {
                      "type": "datetime",
                      "example": "2019-04-20T14:15:00.000-04:00"
                    },
                    "end_time": {
                      "type": "datetime",
                      "example": "2019-04-20T18:15:00.000Z"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "SecureMessagingFolder": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "type",
          "attributes",
          "links"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "0",
            "description": "Upstream identifier"
          },
          "type": {
            "type": "string",
            "example": "folders"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "folderId",
              "name",
              "count",
              "unreadCount",
              "systemFolder"
            ],
            "properties": {
              "folderId": {
                "type": "integer",
                "example": 0,
                "description": "Unique folder identifier. Note that folder IDs may be negative integers.\n"
              },
              "name": {
                "type": "string",
                "example": "Inbox",
                "description": "Folder name."
              },
              "count": {
                "type": "integer",
                "example": 15,
                "description": "Number of total messages (read + unread) in folder."
              },
              "unreadCount": {
                "type": "integer",
                "example": 2,
                "descripton": "Number of unread messages in folder."
              },
              "systemFolder": {
                "type": "boolean",
                "example": true,
                "description": "Indicates whether the folder is one of the fixed, system-generated folders, or a custom user-created folder.\n"
              }
            }
          },
          "links": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "self"
            ],
            "properties": {
              "self": {
                "type": "string",
                "example": "https://api.va.gov/mobile/v0/messaging/health/folders/0"
              }
            }
          }
        }
      },
      "SecureMessagingFolders": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data",
          "meta"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecureMessagingFolder"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "pagination"
            ],
            "properties": {
              "pagination": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "currentPage",
                  "perPage",
                  "totalPages",
                  "totalEntries"
                ],
                "properties": {
                  "currentPage": {
                    "type": "integer",
                    "example": 1
                  },
                  "perPage": {
                    "type": "integer",
                    "example": 10
                  },
                  "totalPages": {
                    "type": "integer",
                    "example": 2
                  },
                  "totalEntries": {
                    "type": "integer",
                    "example": 15
                  }
                }
              }
            }
          }
        }
      },
      "CreateSecureMessagingFolder": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "folder"
        ],
        "properties": {
          "folder": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "New Folder"
              }
            }
          }
        }
      },
      "CreateSecureMessagingFolderResponse": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "id",
                "type",
                "attributes",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "example": "0",
                  "description": "Upstream identifier"
                },
                "type": {
                  "type": "string",
                  "example": "folders"
                },
                "attributes": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "folderId",
                    "name",
                    "count",
                    "unreadCount",
                    "systemFolder"
                  ],
                  "properties": {
                    "folderId": {
                      "type": "integer",
                      "example": 0,
                      "description": "Unique folder identifier. Note that folder IDs may be negative integers.\n"
                    },
                    "name": {
                      "type": "string",
                      "example": "Inbox",
                      "description": "Folder name."
                    },
                    "count": {
                      "type": "integer",
                      "example": 15,
                      "description": "Number of total messages (read + unread) in folder."
                    },
                    "unreadCount": {
                      "type": "integer",
                      "example": 2,
                      "descripton": "Number of unread messages in folder."
                    },
                    "systemFolder": {
                      "type": "boolean",
                      "example": true,
                      "description": "Indicates whether the folder is one of the fixed, system-generated folders, or a custom user-created folder.\n"
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "self"
                  ],
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.va.gov/mobile/v0/messaging/health/folders/0"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "SecureMessageSummary": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "id",
          "attributes",
          "links"
        ],
        "properties": {
          "type": {
            "type": "string",
            "example": "messages"
          },
          "id": {
            "type": "string",
            "example": "123789",
            "description": "Upstream identifier"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "messageId",
              "category",
              "subject",
              "body",
              "attachment",
              "sentDate",
              "senderId",
              "senderName",
              "recipientId",
              "recipientName",
              "readReceipt",
              "triageGroupName",
              "proxySenderName"
            ],
            "properties": {
              "messageId": {
                "type": "integer",
                "example": 123789
              },
              "category": {
                "type": "string",
                "enum": [
                  "OTHER",
                  "COVID",
                  "APPOINTMENTS",
                  "MEDICATIONS",
                  "TEST_RESULTS",
                  "EDUCATION"
                ],
                "example": "MEDICATIONS"
              },
              "subject": {
                "type": "string",
                "example": "Medication Inquiry"
              },
              "body": {
                "type": "string",
                "nullable": true,
                "example": 2
              },
              "attachment": {
                "type": "boolean",
                "example": false
              },
              "sentDate": {
                "type": "string",
                "example": "2017-09-01T16:09:56.000Z"
              },
              "senderId": {
                "type": "integer",
                "example": 541200
              },
              "senderName": {
                "type": "string",
                "example": "DOE, JANE"
              },
              "recipientId": {
                "type": "integer",
                "example": 399955
              },
              "recipientName": {
                "type": "string",
                "example": "ROE, RICHARD"
              },
              "readReceipt": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "READ",
                  null
                ]
              },
              "triageGroupName": {
                "type": "string",
                "nullable": true,
                "example": "Triage_Group_5"
              },
              "proxySenderName": {
                "type": "string",
                "nullable": true,
                "example": "SMITH, JOHN"
              }
            }
          },
          "links": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "self"
            ],
            "properties": {
              "self": {
                "type": "string",
                "example": "https://api.va.gov/mobile/v0/messaging/health/messages/123789"
              }
            }
          }
        }
      },
      "SecureMessageList": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data",
          "meta"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecureMessageSummary"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "sort",
              "pagination"
            ],
            "properties": {
              "sort": {
                "type": "object",
                "additionalProperties": false,
                "required": "sentDate",
                "properties": {
                  "sentDate": {
                    "type": "string",
                    "enum": [
                      "DESC",
                      "ASC"
                    ]
                  }
                }
              },
              "pagination": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "currentPage",
                  "perPage",
                  "totalPages",
                  "totalEntries"
                ],
                "properties": {
                  "currentPage": {
                    "type": "integer",
                    "example": 1
                  },
                  "perPage": {
                    "type": "integer",
                    "example": 10
                  },
                  "totalPages": {
                    "type": "integer",
                    "example": 2
                  },
                  "totalEntries": {
                    "type": "integer",
                    "example": 15
                  }
                }
              },
              "messageCounts": {
                "type": "object",
                "additionalProperties": false,
                "description": "Count of read and unread messages. `readReceipt` field containing \"READ\" count towards \"read\" count \nwhile a null value will count towards \"unread\". If either read or unread is 0, the key will not be included.\n",
                "properties": {
                  "read": {
                    "type": "integer",
                    "example": 5
                  },
                  "unread": {
                    "type": "integer",
                    "example": 15
                  }
                }
              }
            }
          }
        }
      },
      "SecureMessageThread": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "type",
          "attributes",
          "links"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": 0,
            "description": "Upstream identifier"
          },
          "type": {
            "type": "string",
            "example": "message_threads"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "threadId",
              "folderId",
              "messageId",
              "threadPageSize",
              "messageCount",
              "category",
              "subject",
              "triageGroupName",
              "sentDate",
              "draftDate",
              "senderId",
              "senderName",
              "recipientName",
              "recipientId",
              "proxySenderName",
              "hasAttachment",
              "unsentDrafts",
              "unreadMessages"
            ],
            "properties": {
              "threadId": {
                "type": "integer",
                "example": 1234567
              },
              "folderId": {
                "type": "integer",
                "example": 0
              },
              "messageId": {
                "type": "integer",
                "example": 1234567
              },
              "threadPageSize": {
                "type": "integer",
                "example": 123
              },
              "messageCount": {
                "type": "integer",
                "example": 123
              },
              "category": {
                "type": "string",
                "enum": [
                  "OTHERS",
                  "COVID",
                  "APPOINTMENTS",
                  "MEDICATIONS",
                  "TEST_RESULT",
                  "EDUCATION"
                ],
                "example": "MEDICATIONS"
              },
              "subject": {
                "type": "string",
                "example": "Medication Inquiry"
              },
              "triageGroupName": {
                "type": "string",
                "nullable": true,
                "example": "Triage_Group_5"
              },
              "sentDate": {
                "type": "string",
                "nullable": true,
                "example": "2017-09-01T16:09:56.000Z"
              },
              "draftDate": {
                "type": "string",
                "nullable": true,
                "example": "2017-09-01T16:09:56.000Z"
              },
              "senderId": {
                "type": "integer",
                "example": 541200
              },
              "senderName": {
                "type": "string",
                "example": "DOE, JANE"
              },
              "recipientId": {
                "type": "integer",
                "example": 399955
              },
              "recipientName": {
                "type": "string",
                "example": "ROE, RICHARD"
              },
              "proxySenderName": {
                "type": "string",
                "nullable": true,
                "example": "SMITH, JOHN"
              },
              "hasAttachment": {
                "type": "boolean",
                "example": false
              },
              "unsentDrafts": {
                "type": "boolean",
                "example": false
              },
              "unreadMessages": {
                "type": "boolean",
                "example": true
              }
            }
          },
          "links": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "self"
            ],
            "properties": {
              "self": {
                "type": "string",
                "example": "http://www.example.com/my_health/v1/messaging/threads/7298505\""
              }
            }
          }
        }
      },
      "SecureMessageThreadList": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecureMessageThread"
            }
          }
        }
      },
      "SecureMessageNewMessageRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "recipient_id",
          "category",
          "body"
        ],
        "properties": {
          "recipient_id": {
            "type": "integer",
            "description": "The message recipient. This must be a valid recipient id that is assigned to the user. The list of valid\nrecipients for a user can be obtained from the <pre>/v0/messaging/health/recipients</pre> endpoint.\n",
            "example": 1763526
          },
          "category": {
            "type": "string",
            "description": "Message category. This must be one of the values returned by the \n<pre>/v0/messaging/health/messages/categories</pre> endpoint.\n",
            "example": "OTHER"
          },
          "body": {
            "type": "string",
            "example": "What is the proper dosage and how long should I take this medication?"
          },
          "subject": {
            "type": "string",
            "example": "Question about my medication"
          },
          "draft_id": {
            "type": "integer",
            "description": "Specifies draft message ID to send.  Draft message is deleted once sent. Note that the recipient_id, category, body, and subject included with this post will overwrite any of original values of the draft.\n"
          }
        }
      },
      "SecureMessageAttachment": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "type",
          "attributes",
          "links"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": 7775443
          },
          "type": {
            "type": "string",
            "example": "attachments"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "name",
              "messageId",
              "attachmentSize"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "bb_report.pdf"
              },
              "messageId": {
                "type": "integer",
                "example": 123789
              },
              "attachmentSize": {
                "type": "integer",
                "example": 225457
              }
            }
          },
          "links": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "download"
            ],
            "properties": {
              "download": {
                "type": "string",
                "format": "url",
                "example": "https://api.va.gov/v0/messaging/health/messages/123789/attachments/7775443"
              }
            }
          }
        }
      },
      "PostSecureMessageDetail": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "id",
          "attributes",
          "relationships",
          "links"
        ],
        "properties": {
          "type": {
            "type": "string",
            "example": "messages"
          },
          "id": {
            "type": "string",
            "example": "123789",
            "description": "Upstream identifier"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "messageId",
              "category",
              "subject",
              "body",
              "attachment",
              "sentDate",
              "senderId",
              "senderName",
              "recipientId",
              "recipientName",
              "readReceipt",
              "triageGroupName",
              "proxySenderName"
            ],
            "properties": {
              "messageId": {
                "type": "integer",
                "example": 123789
              },
              "category": {
                "type": "string",
                "enum": [
                  "OTHER",
                  "COVID",
                  "APPOINTMENTS",
                  "MEDICATIONS",
                  "TEST_RESULTS",
                  "EDUCATION"
                ],
                "example": "MEDICATIONS"
              },
              "subject": {
                "type": "string",
                "example": "Medication Inquiry"
              },
              "body": {
                "type": "string",
                "example": "Your prescription is ready for refill\r\nThanks,\r\n,Dr. Doe"
              },
              "attachment": {
                "type": "boolean",
                "example": true
              },
              "sentDate": {
                "type": "string",
                "format": "datetime",
                "example": "2017-09-01T16:09:56.000Z"
              },
              "senderId": {
                "type": "integer",
                "example": 541200
              },
              "senderName": {
                "type": "string",
                "example": "DOE, JANE"
              },
              "recipientId": {
                "type": "integer",
                "example": 399955
              },
              "recipientName": {
                "type": "string",
                "example": "ROE, RICHARD"
              },
              "readReceipt": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "READ",
                  null
                ]
              },
              "triageGroupName": {
                "type": "string",
                "nullable": true,
                "example": "Triage_Group_5"
              },
              "proxySenderName": {
                "type": "string",
                "nullable": true,
                "example": "SMITH, JOHN"
              }
            }
          },
          "relationships": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "attachments"
            ],
            "properties": {
              "attachments": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "type"
                      ],
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "7775443"
                        },
                        "type": {
                          "type": "string",
                          "example": "attachments"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "links": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "self"
            ],
            "properties": {
              "self": {
                "type": "string",
                "example": "https://api.va.gov/mobile/v0/messaging/health/messages/123789"
              }
            }
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecureMessageAttachment"
            }
          }
        }
      },
      "SecureMessageCategories": {
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "id",
              "type",
              "attributes"
            ],
            "properties": {
              "id": {
                "type": "string",
                "example": "0",
                "description": "Upstream identifier"
              },
              "type": {
                "type": "string",
                "example": "categories"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "messageCategoryType"
                ],
                "properties": {
                  "messageCategoryType": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "OTHER",
                      "COVID",
                      "APPOINTMENTS",
                      "MEDICATIONS",
                      "TEST_RESULTS",
                      "EDUCATION"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "SecureMessageSignature": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "example": "messageSignature"
              },
              "id": {
                "type": "string",
                "example": "abe3f152-90b0-45cb-8776-4958bad0e0ef",
                "description": "user UUID"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "signatureName",
                  "includeSignature",
                  "signatureTitle"
                ],
                "properties": {
                  "signatureName": {
                    "type": "string",
                    "example": "My Signature Name"
                  },
                  "includeSignature": {
                    "type": "boolean"
                  },
                  "signatureTitle": {
                    "type": "string",
                    "example": "My Signature Title"
                  }
                }
              }
            }
          }
        }
      },
      "GetSecureMessageDetail": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "id",
          "attributes",
          "relationships",
          "links",
          "meta"
        ],
        "properties": {
          "type": {
            "type": "string",
            "example": "messages"
          },
          "id": {
            "type": "string",
            "example": "123789",
            "description": "Upstream identifier"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "messageId",
              "category",
              "subject",
              "body",
              "attachment",
              "sentDate",
              "senderId",
              "senderName",
              "recipientId",
              "recipientName",
              "readReceipt",
              "triageGroupName",
              "proxySenderName"
            ],
            "properties": {
              "messageId": {
                "type": "integer",
                "example": 123789
              },
              "category": {
                "type": "string",
                "enum": [
                  "OTHER",
                  "COVID",
                  "APPOINTMENTS",
                  "MEDICATIONS",
                  "TEST_RESULTS",
                  "EDUCATION"
                ],
                "example": "MEDICATIONS"
              },
              "subject": {
                "type": "string",
                "example": "Medication Inquiry"
              },
              "body": {
                "type": "string",
                "example": "Your prescription is ready for refill\r\nThanks,\r\n,Dr. Doe"
              },
              "attachment": {
                "type": "boolean",
                "example": true
              },
              "sentDate": {
                "type": "string",
                "format": "datetime",
                "example": "2017-09-01T16:09:56.000Z"
              },
              "senderId": {
                "type": "integer",
                "example": 541200
              },
              "senderName": {
                "type": "string",
                "example": "DOE, JANE"
              },
              "recipientId": {
                "type": "integer",
                "example": 399955
              },
              "recipientName": {
                "type": "string",
                "example": "ROE, RICHARD"
              },
              "readReceipt": {
                "type": "string",
                "nullable": true,
                "enum": [
                  "READ",
                  null
                ]
              },
              "triageGroupName": {
                "type": "string",
                "nullable": true,
                "example": "Triage_Group_5"
              },
              "proxySenderName": {
                "type": "string",
                "nullable": true,
                "example": "SMITH, JOHN"
              }
            }
          },
          "relationships": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "attachments"
            ],
            "properties": {
              "attachments": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "id",
                        "type"
                      ],
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "7775443"
                        },
                        "type": {
                          "type": "string",
                          "example": "attachments"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "links": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "self"
            ],
            "properties": {
              "self": {
                "type": "string",
                "example": "https://api.va.gov/mobile/v0/messaging/health/messages/123789"
              }
            }
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecureMessageAttachment"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "userInTriageTeam?"
            ],
            "properties": {
              "userInTriageTeam?": {
                "type": "boolean",
                "example": true,
                "description": "This field is only present if the user is in the triage team for this message. This can be used to determine if the user can reply to the message."
              }
            }
          }
        }
      },
      "SecureMessageReplyRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "recipient_id",
          "category",
          "subject",
          "body"
        ],
        "properties": {
          "recipient_id": {
            "type": "integer",
            "description": null,
            "example": 1112233
          },
          "category": {
            "type": "string",
            "example": "TEST"
          },
          "subject": {
            "type": "string",
            "example": "My Test Results",
            "maxLength": 50
          },
          "body": {
            "type": "string",
            "example": "Dear provider, please clarify my test results. Thank you."
          },
          "draft_id": {
            "type": "integer",
            "description": "Specifies draft message ID to send.  Draft message is deleted once sent. Note that body included with this post will overwrite any of original values of the draft.\n"
          }
        }
      },
      "SecureMessageListV1": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data",
          "meta"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "type",
                "id",
                "attributes",
                "links"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "example": "messages"
                },
                "id": {
                  "type": "string",
                  "example": "123789",
                  "description": "Upstream identifier"
                },
                "attributes": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "messageId",
                    "category",
                    "subject",
                    "body",
                    "attachment",
                    "sentDate",
                    "senderId",
                    "senderName",
                    "recipientId",
                    "recipientName",
                    "readReceipt",
                    "triageGroupName",
                    "proxySenderName",
                    "messageBody",
                    "threadId",
                    "folderId",
                    "draftDate",
                    "toDate"
                  ],
                  "properties": {
                    "messageId": {
                      "type": "integer",
                      "example": 123789
                    },
                    "category": {
                      "type": "string",
                      "enum": [
                        "OTHER",
                        "COVID",
                        "APPOINTMENTS",
                        "MEDICATIONS",
                        "TEST_RESULTS",
                        "EDUCATION"
                      ],
                      "example": "MEDICATIONS"
                    },
                    "subject": {
                      "type": "string",
                      "example": "Medication Inquiry"
                    },
                    "body": {
                      "type": "string",
                      "nullable": true,
                      "example": 2
                    },
                    "attachment": {
                      "type": "boolean",
                      "example": false
                    },
                    "sentDate": {
                      "type": "string",
                      "example": "2017-09-01T16:09:56.000Z"
                    },
                    "senderId": {
                      "type": "integer",
                      "example": 541200
                    },
                    "senderName": {
                      "type": "string",
                      "example": "DOE, JANE"
                    },
                    "recipientId": {
                      "type": "integer",
                      "example": 399955
                    },
                    "recipientName": {
                      "type": "string",
                      "example": "ROE, RICHARD"
                    },
                    "readReceipt": {
                      "type": "string",
                      "nullable": true,
                      "enum": [
                        "READ",
                        null
                      ]
                    },
                    "triageGroupName": {
                      "type": "string",
                      "nullable": true,
                      "example": "Triage_Group_5"
                    },
                    "proxySenderName": {
                      "type": "string",
                      "nullable": true,
                      "example": "SMITH, JOHN"
                    },
                    "messageBody": {
                      "type": "string",
                      "nullable": true,
                      "example": 2
                    },
                    "threadId": {
                      "type": "integer",
                      "example": 1234567
                    },
                    "folderId": {
                      "type": "integer",
                      "example": 0
                    },
                    "draftDate": {
                      "type": "string",
                      "nullable": true,
                      "example": "2017-09-01T16:09:56.000Z"
                    },
                    "toDate": {
                      "type": "string",
                      "nullable": true,
                      "example": "2017-09-01T16:09:56.000Z"
                    },
                    "hasAttachment": {
                      "type": "boolean",
                      "example": false
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "self"
                  ],
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.va.gov/mobile/v0/messaging/health/messages/123789"
                    }
                  }
                }
              }
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "sort",
              "pagination"
            ],
            "properties": {
              "sort": {
                "type": "object",
                "additionalProperties": false,
                "required": "sentDate",
                "properties": {
                  "sentDate": {
                    "type": "string",
                    "enum": [
                      "DESC",
                      "ASC"
                    ]
                  }
                }
              },
              "pagination": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "currentPage",
                  "perPage",
                  "totalPages",
                  "totalEntries"
                ],
                "properties": {
                  "currentPage": {
                    "type": "integer",
                    "example": 1
                  },
                  "perPage": {
                    "type": "integer",
                    "example": 10
                  },
                  "totalPages": {
                    "type": "integer",
                    "example": 2
                  },
                  "totalEntries": {
                    "type": "integer",
                    "example": 15
                  }
                }
              },
              "messageCounts": {
                "type": "object",
                "additionalProperties": false,
                "description": "Count of read and unread messages. `readReceipt` field containing \"READ\" count towards \"read\" count \nwhile a null value will count towards \"unread\". If either read or unread is 0, the key will not be included.\n",
                "properties": {
                  "read": {
                    "type": "integer",
                    "example": 5
                  },
                  "unread": {
                    "type": "integer",
                    "example": 15
                  }
                }
              }
            }
          }
        }
      },
      "SecureMessagingRecipients": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data",
          "meta"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "id",
                "type",
                "attributes"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "example": 855912,
                  "description": "Upstream identifier"
                },
                "type": {
                  "type": "string",
                  "example": "triage_teams"
                },
                "attributes": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "triageTeamId",
                    "name",
                    "relationType"
                  ],
                  "properties": {
                    "triageTeamId": {
                      "type": "integer",
                      "example": 855912
                    },
                    "name": {
                      "type": "string",
                      "example": "RADIOLOGY_TRIAGE_GROUP_1"
                    },
                    "relationType": {
                      "type": "string",
                      "enum": [
                        "PATIENT"
                      ],
                      "example": "PATIENT"
                    }
                  }
                }
              }
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "sort"
            ],
            "properties": {
              "sort": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "enum": [
                      "ASC",
                      "DESC"
                    ],
                    "example": "ASC"
                  }
                }
              }
            }
          }
        }
      },
      "ServiceHistory": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "branchOfService",
          "beginDate",
          "endDate",
          "formattedBeginDate",
          "formattedEndDate",
          "characterOfDischarge",
          "honorableServiceIndicator"
        ],
        "properties": {
          "branchOfService": {
            "type": "string",
            "enum": [
              "United States Army",
              "United States Coast Guard",
              "United States DoD",
              "United States Air Force",
              "United States Public Health Service",
              "United States Marine Corps",
              "United States Navy",
              "United States NOAA"
            ]
          },
          "beginDate": {
            "type": "string",
            "example": "1997-09-17"
          },
          "endDate": {
            "type": "string",
            "nullable": true,
            "example": "2002-12-31"
          },
          "formattedBeginDate": {
            "type": "string",
            "example": "September 17, 1997"
          },
          "formattedEndDate": {
            "type": "string",
            "nullable": true,
            "example": "December 31, 2002"
          },
          "characterOfDischarge": {
            "type": "string",
            "nullable": true,
            "example": "Honorable",
            "enum": [
              "Honorable",
              "Under honorable conditions (general)'",
              "Bad conduct",
              "Under other than honorable conditions",
              "Dishonorable",
              "Honorable (Assumed) - GRAS periods only",
              "Honorable for VA purposes",
              "Dishonorable for VA purposes",
              "Uncharacterized",
              "Unknown",
              "DoD provided a NULL or blank value",
              "DoD provided a value not in the reference table",
              "Value is calculated but created an invalid value",
              "Value is not applicable for this record type"
            ]
          },
          "honorableServiceIndicator": {
            "type": "string",
            "nullable": true,
            "example": "Y",
            "enum": [
              "Y",
              "N",
              "Z"
            ]
          }
        }
      },
      "MilitaryHistory": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "example": "militaryInformation"
              },
              "id": {
                "type": "string",
                "example": "abe3f152-90b0-45cb-8776-4958bad0e0ef",
                "description": "user UUID"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "serviceHistory"
                ],
                "properties": {
                  "serviceHistory": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "$ref": "#/components/schemas/ServiceHistory"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PaymentHistory": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "required": [
                "type",
                "id",
                "attributes"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "example": "paymentHistory"
                },
                "id": {
                  "type": "string",
                  "example": "abe3f152-90b0-45cb-8776-4958bad0e0ef",
                  "description": "Upstream identifier"
                },
                "attributes": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "amount",
                    "date",
                    "paymentMethod",
                    "paymentType",
                    "bank",
                    "account"
                  ],
                  "properties": {
                    "amount": {
                      "type": "string",
                      "example": "$350.00"
                    },
                    "date": {
                      "type": "string",
                      "example": "2022-15-01"
                    },
                    "paymentMethod": {
                      "type": "string",
                      "example": "Direct Deposit"
                    },
                    "paymentType": {
                      "type": "string",
                      "example": "Compensation & Pension - Recurring"
                    },
                    "bank": {
                      "type": "string, null",
                      "example": "PACIFIC PREMIER BANK"
                    },
                    "account": {
                      "type": "string, null",
                      "example": "************6464"
                    }
                  }
                }
              }
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "errors",
              "pagination",
              "availableYears"
            ],
            "properties": {
              "errors": {
                "type": [
                  "array",
                  null
                ]
              },
              "pagination": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "currentPage",
                  "perPage",
                  "totalPages",
                  "totalEntries"
                ],
                "properties": {
                  "currentPage": {
                    "type": "integer",
                    "example": 1
                  },
                  "perPage": {
                    "type": "integer",
                    "example": 10
                  },
                  "totalPages": {
                    "type": "integer",
                    "example": 1
                  },
                  "totalEntries": {
                    "type": "integer",
                    "example": 7
                  }
                }
              },
              "availableYears": {
                "type": [
                  "array",
                  null
                ],
                "example": [
                  2019,
                  2018,
                  2017,
                  2016,
                  2015
                ]
              }
            }
          }
        }
      },
      "PaymentInfo": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "type",
          "attibutes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "example": "paymentInformation"
          },
          "id": {
            "type": "string",
            "example": "abe3f152-90b0-45cb-8776-4958bad0e0ef",
            "description": "user UUID"
          },
          "attributes": {
            "required": [
              "paymentAccount",
              "accountControl"
            ],
            "properties": {
              "accountControl": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "canUpdateAddress",
                  "corpAvailIndicator",
                  "corpRecFoundIndicator",
                  "hasNoBdnPaymentsIndicator",
                  "identityIndicator",
                  "indexIndicator",
                  "isCompetentIndicator",
                  "noFiduciaryAssignedIndicator",
                  "notDeceasedIndicato",
                  "canUpdatePayment"
                ],
                "properties": {
                  "canUpdateAddress": {
                    "type": "boolean"
                  },
                  "corpAvailIndicator": {
                    "type": "boolean"
                  },
                  "corpRecFoundIndicator": {
                    "type": "boolean"
                  },
                  "hasNoBdnPaymentsIndicator": {
                    "type": "boolean"
                  },
                  "identityIndicator": {
                    "type": "boolean"
                  },
                  "indexIndicator": {
                    "type": "boolean"
                  },
                  "isCompetentIndicator": {
                    "type": "boolean"
                  },
                  "noFiduciaryAssignedIndicator": {
                    "type": "boolean"
                  },
                  "notDeceasedIndicator": {
                    "type": "boolean"
                  },
                  "canUpdatePayment": {
                    "type": "boolean"
                  }
                }
              },
              "paymentAccount": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "accountNumber",
                  "accountType",
                  "financialInstitutionName",
                  "financialInstitutionRoutingNumber"
                ],
                "properties": {
                  "accountNumber": {
                    "type": "string",
                    "example": "************6464"
                  },
                  "accountType": {
                    "type": "string",
                    "example": "Savings",
                    "enum": [
                      "Savings",
                      "Checking"
                    ]
                  },
                  "financialInstitutionName": {
                    "type": "string",
                    "example": "PACIFIC PREMIER BANK"
                  },
                  "financialInstitutionRoutingNumber": {
                    "type": "string",
                    "example": "948529982"
                  }
                }
              }
            }
          }
        }
      },
      "UpdatePaymentInfoRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "accountNumber",
          "accountType",
          "financialInstitutionName",
          "financialInstitutionRoutingNumber"
        ],
        "properties": {
          "accountNumber": {
            "type": "string",
            "example": "12345678901"
          },
          "accountType": {
            "type": "string",
            "example": "Savings",
            "enum": [
              "Savings",
              "Checking"
            ]
          },
          "financialInstitutionName": {
            "type": "string",
            "example": "PACIFIC PREMIER BANK"
          },
          "financialInstitutionRoutingNumber": {
            "type": "string",
            "example": "021000021"
          }
        }
      },
      "Pensions": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "example": "pensions"
              },
              "id": {
                "type": "string",
                "example": "f26bc1f0-c389-4f3c-86e0-7712fb08fbe6",
                "description": "Upstream veteran id field"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "isEligibleForPension",
                  "isInReceiptOfPension",
                  "netWorthLimit"
                ],
                "properties": {
                  "isEligibleForPension": {
                    "type": "boolean",
                    "example": true
                  },
                  "isInReceiptOfPension": {
                    "type": "boolean",
                    "example": true
                  },
                  "netWorthLimit": {
                    "type": "decimal",
                    "example": 129094
                  }
                }
              }
            }
          }
        }
      },
      "PushGetPreferences": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "example": "pushGetPrefs"
              },
              "id": {
                "type": "string",
                "example": "A3646A8D40C5B7319416179833809496",
                "description": "Endpoint SID from request"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "preferences"
                ],
                "properties": {
                  "preferences": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "preferenceId",
                        "preferenceName",
                        "value"
                      ],
                      "properties": {
                        "preferenceId": {
                          "type": "string",
                          "enum": [
                            "appointment_reminders",
                            "secure_message_alerts"
                          ],
                          "example": "appointment_reminders"
                        },
                        "preferenceName": {
                          "type": "string",
                          "enum": [
                            "Appointment Reminders",
                            "Secure Message Alerts"
                          ],
                          "example": "Appointment Reminders"
                        },
                        "value": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PushPreferences": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "preference",
          "enabled"
        ],
        "properties": {
          "preference": {
            "type": "string",
            "enum": [
              "appointment_reminders",
              "secure_message_alerts"
            ],
            "example": "appointment_reminders"
          },
          "enabled": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "PushRegistration": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "deviceToken",
          "osName",
          "appName"
        ],
        "properties": {
          "deviceToken": {
            "type": "string",
            "example": "740f4707bebcf74f9b7c25d48e3358945f6aa01da5ddb387462c7eaf61bb78ad"
          },
          "osName": {
            "type": "string",
            "enum": [
              "ios",
              "android"
            ]
          },
          "deviceName": {
            "type": "string",
            "example": "Galaxy 8"
          },
          "appName": {
            "type": "string",
            "example": "va_mobile_app"
          },
          "debug": {
            "type": "boolean",
            "description": "Flag to switch between sandbox and non-sandbox app sid. *Lower envs only*"
          }
        }
      },
      "PushRegistrationResponse": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "example": "pushRegister"
              },
              "id": {
                "description": "app name generated when registering an app with push vetext service",
                "type": "string",
                "example": "va_mobile_app"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "endpointSid"
                ],
                "properties": {
                  "endpointSid": {
                    "type": "string",
                    "example": "F1DC67487F5CE0227516037291336983"
                  }
                }
              }
            }
          }
        }
      },
      "PushSendRequestBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "appName",
          "templateId",
          "personalization"
        ],
        "properties": {
          "appName": {
            "type": "string",
            "example": "va_mobile_app"
          },
          "templateId": {
            "type": "string",
            "example": "0EF7C8C9390847D7B3B521426EFF5814"
          },
          "personalization": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "%APPOINTMENT_DATE%": {
                "type": "string",
                "example": "DEC 14"
              },
              "%APPOINTMENT_TIME%": {
                "type": "string",
                "example": "10:00"
              }
            }
          },
          "debug": {
            "type": "boolean",
            "description": "Flag to switch between sandbox and non-sandbox app sid. *Lower envs only*"
          }
        }
      },
      "EmailUpdate": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "emailAddress"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "example": 42
          },
          "emailAddress": {
            "type": "string",
            "example": "person42@example.com"
          }
        }
      },
      "Address": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "addressLine1",
          "addressLine2",
          "addressLine3",
          "addressPou",
          "addressType",
          "city",
          "countryCode",
          "internationalPostalCode",
          "province",
          "stateCode",
          "zipCode",
          "zipCodeSuffix"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "example": 157032
          },
          "addressLine1": {
            "type": "string",
            "example": "1493 Martin Luther King Rd"
          },
          "addressLine2": {
            "type": "string, null"
          },
          "addressLine3": {
            "type": "string, null"
          },
          "addressPou": {
            "type": "string",
            "enum": [
              "RESIDENCE/CHOICE",
              "CORRESPONDENCE"
            ],
            "example": "RESIDENCE/CHOICE"
          },
          "addressType": {
            "type": "string",
            "enum": [
              "DOMESTIC",
              "INTERNATIONAL",
              "MILITARY"
            ],
            "example": "DOMESTIC"
          },
          "city": {
            "type": "string",
            "example": "Fulton"
          },
          "countryCode": {
            "type": "string",
            "example": "US"
          },
          "internationalPostalCode": {
            "type": "string, null",
            "example": null
          },
          "province": {
            "type": "string, null",
            "example": null
          },
          "stateCode": {
            "type": "string",
            "example": "NY"
          },
          "zipCode": {
            "type": "string",
            "example": "97062"
          },
          "zipCodeSuffix": {
            "type": "string, null",
            "example": "1234"
          }
        }
      },
      "PhoneUpdate": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "areaCode",
          "countryCode",
          "phoneNumber",
          "phoneType",
          "extension"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "example": 157032
          },
          "areaCode": {
            "type": "string",
            "example": "704"
          },
          "countryCode": {
            "type": "string",
            "example": "1"
          },
          "phoneNumber": {
            "type": "string",
            "example": "7749069"
          },
          "phoneType": {
            "type": "string",
            "enum": [
              "HOME",
              "FAX",
              "MOBILE",
              "WORK"
            ],
            "example": "HOME"
          },
          "extension": {
            "type": "string",
            "example": "4567"
          }
        }
      },
      "User": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "abe3f152-90b0-45cb-8776-4958bad0e0ef",
            "description": "user UUID"
          },
          "type": {
            "type": "string",
            "example": "user"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "profile",
              "authorizedServices",
              "health"
            ],
            "properties": {
              "profile": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "firstName",
                  "middleName",
                  "lastName",
                  "email",
                  "birthDate",
                  "gender",
                  "addresses",
                  "signinService"
                ],
                "properties": {
                  "firstName": {
                    "type": "string",
                    "example": "John"
                  },
                  "middleName": {
                    "type": "string",
                    "example": "A"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "Smith"
                  },
                  "contactEmail": {
                    "$ref": "#/components/schemas/EmailUpdate"
                  },
                  "signinEmail": {
                    "type": "string",
                    "example": "john.a.smith@domain.com"
                  },
                  "residentialAddress": {
                    "$ref": "#/components/schemas/Address"
                  },
                  "mailingAddress": {
                    "$ref": "#/components/schemas/Address"
                  },
                  "homePhoneNumber": {
                    "$ref": "#/components/schemas/PhoneUpdate"
                  },
                  "mobilePhoneNumber": {
                    "$ref": "#/components/schemas/PhoneUpdate"
                  },
                  "workPhoneNumber": {
                    "$ref": "#/components/schemas/PhoneUpdate"
                  },
                  "faxPhoneNumber": {
                    "$ref": "#/components/schemas/PhoneUpdate"
                  },
                  "signinService": {
                    "type": "string",
                    "enum": [
                      "IDME",
                      "DSL",
                      "MHV"
                    ]
                  }
                }
              },
              "authorizedServices": {
                "description": "Services the user is allowed to access. See availableServices for a list of all services available via the mobile API.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "appeals",
                  "directDepositBenefits",
                  "militaryServiceHistory",
                  "directDepositBenefitsUpdate",
                  "scheduleAppointments"
                ]
              },
              "health": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "isCernerPatient",
                  "facilities",
                  "facilityName"
                ],
                "properties": {
                  "isCernerPatient": {
                    "type": "boolean"
                  },
                  "facilities": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "facilityId": {
                          "type": "string",
                          "example": "979"
                        },
                        "isCerner": {
                          "type": "boolean",
                          "example": false
                        },
                        "facilityName": {
                          "type": "string",
                          "example": "Cheyenne VA Medical Center"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "UserAuthorizedServices": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "abe3f152-90b0-45cb-8776-4958bad0e0ef",
            "description": "user UUID"
          },
          "type": {
            "type": "string",
            "example": "user"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "authorizedServices"
            ],
            "properties": {
              "authorizedServices": {
                "description": "All services with a boolean value of whether or not the service has access to that service.",
                "type": "object",
                "additionalProperties": false,
                "example": {
                  "appeals": true,
                  "appointments": true,
                  "claims": true,
                  "decisionLetters": true,
                  "directDepositBenefits": true,
                  "directDepositBenefitsUpdate": true,
                  "disabilityRating": true,
                  "genderIdentity": false,
                  "lettersAndDocuments": true,
                  "militaryServiceHistory": true,
                  "paymentHistory": true,
                  "preferredName": false,
                  "prescriptions": false,
                  "scheduleAppointments": true,
                  "secureMessaging": false,
                  "userProfileUpdate": true
                }
              }
            }
          }
        }
      },
      "UserContactInfoAddress": {
        "type": "object",
        "nullable": true,
        "required": [
          "id",
          "addressLine1",
          "addressLine2",
          "addressLine3",
          "addressPou",
          "addressType",
          "city",
          "countryName",
          "countryCodeIso3",
          "internationalPostalCode",
          "province",
          "stateCode",
          "zipCode",
          "zipCodeSuffix"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "example": 157032
          },
          "addressLine1": {
            "type": "string",
            "example": "1493 Martin Luther King Rd"
          },
          "addressLine2": {
            "type": "string, null"
          },
          "addressLine3": {
            "type": "string, null"
          },
          "addressPou": {
            "type": "string",
            "enum": [
              "RESIDENCE/CHOICE",
              "CORRESPONDENCE"
            ],
            "example": "RESIDENCE/CHOICE"
          },
          "addressType": {
            "type": "string",
            "enum": [
              "DOMESTIC",
              "INTERNATIONAL",
              "MILITARY"
            ],
            "example": "DOMESTIC"
          },
          "city": {
            "type": "string",
            "example": "Fulton"
          },
          "countryName": {
            "type": "string",
            "example": "US"
          },
          "countryCodeIso3": {
            "type": "string, null",
            "example": "USA"
          },
          "internationalPostalCode": {
            "type": "string, null",
            "example": null
          },
          "province": {
            "type": "string, null",
            "example": null
          },
          "stateCode": {
            "type": "string",
            "example": "NY"
          },
          "zipCode": {
            "type": "string",
            "example": "97062"
          },
          "zipCodeSuffix": {
            "type": "string, null",
            "example": "1234"
          }
        }
      },
      "UserContactInfoPhone": {
        "type": "object",
        "nullable": true,
        "required": [
          "id",
          "areaCode",
          "countryCode",
          "phoneNumber",
          "phoneType",
          "extension"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "example": 157032
          },
          "areaCode": {
            "type": "string",
            "example": "704"
          },
          "countryCode": {
            "type": "string",
            "example": "1"
          },
          "phoneNumber": {
            "type": "string",
            "example": "7749069"
          },
          "phoneType": {
            "type": "string",
            "enum": [
              "HOME",
              "FAX",
              "MOBILE",
              "WORK"
            ],
            "example": "HOME"
          },
          "extension": {
            "type": "string, null",
            "example": "4567"
          }
        }
      },
      "UserContactInfo": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "abe3f152-90b0-45cb-8776-4958bad0e0ef",
            "description": "user UUID"
          },
          "type": {
            "type": "string",
            "example": "contact_info"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "residentialAddress",
              "mailingAddress",
              "homePhone",
              "mobilePhone",
              "workPhone"
            ],
            "properties": {
              "residentialAddress": {
                "$ref": "#/components/schemas/UserContactInfoAddress"
              },
              "mailingAddress": {
                "$ref": "#/components/schemas/UserContactInfoAddress"
              },
              "homePhone": {
                "$ref": "#/components/schemas/UserContactInfoPhone"
              },
              "mobilePhone": {
                "$ref": "#/components/schemas/UserContactInfoPhone"
              },
              "workPhone": {
                "$ref": "#/components/schemas/UserContactInfoPhone"
              },
              "contactEmail": {
                "type": "object",
                "additionalProperties": false,
                "nullable": true,
                "required": [
                  "id",
                  "emailAddress"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 157032
                  },
                  "contactEmail": {
                    "type": "string",
                    "example": "person@example.com"
                  }
                }
              }
            }
          }
        }
      },
      "UserV1": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "abe3f152-90b0-45cb-8776-4958bad0e0ef",
            "description": "user UUID"
          },
          "type": {
            "type": "string",
            "example": "user"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "profile",
              "authorizedServices",
              "health"
            ],
            "properties": {
              "profile": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "firstName",
                  "preferredName",
                  "middleName",
                  "lastName",
                  "email",
                  "birthDate",
                  "genderIdentity",
                  "addresses",
                  "signinService"
                ],
                "properties": {
                  "firstName": {
                    "type": "string",
                    "example": "Johnny"
                  },
                  "preferredName": {
                    "type": "string",
                    "example": "John"
                  },
                  "middleName": {
                    "type": "string",
                    "example": "A"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "Smith"
                  },
                  "contactEmail": {
                    "$ref": "#/components/schemas/EmailUpdate"
                  },
                  "signinEmail": {
                    "type": "string",
                    "example": "john.a.smith@domain.com"
                  },
                  "genderIdentity": {
                    "type": "string",
                    "example": "M"
                  },
                  "residentialAddress": {
                    "$ref": "#/components/schemas/Address"
                  },
                  "mailingAddress": {
                    "$ref": "#/components/schemas/Address"
                  },
                  "homePhoneNumber": {
                    "$ref": "#/components/schemas/PhoneUpdate"
                  },
                  "mobilePhoneNumber": {
                    "$ref": "#/components/schemas/PhoneUpdate"
                  },
                  "workPhoneNumber": {
                    "$ref": "#/components/schemas/PhoneUpdate"
                  },
                  "signinService": {
                    "type": "string",
                    "enum": [
                      "IDME",
                      "DSL",
                      "MHV",
                      "LOGINGOV"
                    ]
                  }
                }
              },
              "authorizedServices": {
                "description": "Services the user is allowed to access. See availableServices for a list of all services available via the mobile API.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "appeals",
                  "directDepositBenefits",
                  "militaryServiceHistory",
                  "directDepositBenefitsUpdate",
                  "scheduleAppointments"
                ]
              },
              "health": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "isCernerPatient",
                  "facilities",
                  "facilityName"
                ],
                "properties": {
                  "isCernerPatient": {
                    "type": "boolean"
                  },
                  "facilities": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "facilityId": {
                          "type": "string",
                          "example": "979"
                        },
                        "isCerner": {
                          "type": "boolean",
                          "example": false
                        },
                        "facilityName": {
                          "type": "string",
                          "example": "Cheyenne VA Medical Center"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "UserV2": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "abe3f152-90b0-45cb-8776-4958bad0e0ef",
            "description": "user UUID"
          },
          "type": {
            "type": "string",
            "example": "user"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "id",
              "firstName",
              "middleName",
              "lastName",
              "signinEmail",
              "birthDate",
              "signinService"
            ],
            "properties": {
              "firstName": {
                "type": "string",
                "example": "John"
              },
              "middleName": {
                "type": "string",
                "nullable": true,
                "example": "A"
              },
              "lastName": {
                "type": "string",
                "example": "Smith"
              },
              "signinEmail": {
                "type": "string",
                "example": "john.a.smith@domain.com"
              },
              "birthDate": {
                "type": "string",
                "nullable": true,
                "example": "1970-08-12"
              },
              "signinService": {
                "type": "string",
                "enum": [
                  "IDME",
                  "DSL",
                  "MHV",
                  "LOGINGOV"
                ]
              },
              "hasFacilityTransitioningToCerner": {
                "type": "boolean",
                "description": "The user has a treatment facility that is currently transitioning to cerner. This is temporary."
              }
            }
          }
        }
      },
      "AddressUpdate": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "addressLine1",
          "addressPou",
          "addressType",
          "city",
          "countryCode"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "23fe358d-6e82-4541-804c-ce7562ba28f4"
          },
          "addressMetaData": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "confidenceScore": {
                "type": "integer",
                "example": 100
              },
              "addressType": {
                "type": "string",
                "example": "Domestic"
              },
              "deliveryPointValidation": {
                "type": "string",
                "example": "CONFIRMED"
              },
              "residentialDeliveryIndicator": {
                "type": "string",
                "example": "RESIDENTIAL"
              }
            }
          },
          "validationKey": {
            "type": "integer",
            "example": 0
          },
          "addressLine1": {
            "type": "string",
            "example": "1493 Martin Luther King Rd"
          },
          "addressLine2": {
            "type": "string, null"
          },
          "addressLine3": {
            "type": "string, null"
          },
          "addressPou": {
            "type": "string",
            "enum": [
              "RESIDENCE/CHOICE",
              "CORRESPONDENCE"
            ],
            "example": "RESIDENCE/CHOICE"
          },
          "addressType": {
            "type": "string",
            "enum": [
              "DOMESTIC",
              "INTERNATIONAL",
              "MILITARY"
            ],
            "example": "DOMESTIC"
          },
          "city": {
            "type": "string",
            "example": "Fulton"
          },
          "countryCode": {
            "type": "string",
            "example": "US"
          },
          "internationalPostalCode": {
            "type": "string, null",
            "example": null
          },
          "province": {
            "type": "string, null",
            "example": null
          },
          "stateCode": {
            "type": "string",
            "example": "NY"
          },
          "zipCode": {
            "type": "string",
            "example": "97062"
          },
          "zipCodeSuffix": {
            "type": "string, null",
            "example": "1234"
          }
        }
      },
      "AddressTransaction": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "id",
              "type",
              "attributes"
            ],
            "properties": {
              "id": {
                "type": "string",
                "example": "3be0c7de-bfe1-4101-a326-5567bcd98b63",
                "description": "Upstream identifier"
              },
              "type": {
                "type": "string",
                "example": "async_transaction_vet360_address_transactions"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "transactionId",
                  "transactionStatus",
                  "type"
                ],
                "properties": {
                  "transactionId": {
                    "type": "string",
                    "example": "3be0c7de-bfe1-4101-a326-5567bcd98b63"
                  },
                  "transactionStatus": {
                    "type": "string",
                    "enum": [
                      "REJECTED",
                      "COMPLETED_SUCCESS",
                      "COMPLETED_NO_CHANGES_DETECTED",
                      "COMPLETED_FAILURE"
                    ],
                    "example": "COMPLETED_SUCCESS"
                  },
                  "type": {
                    "type": "string",
                    "example": "AsyncTransaction::VAProfile::AddressTransaction"
                  },
                  "metadata": {
                    "type": "array",
                    "example": []
                  }
                }
              }
            }
          }
        }
      },
      "AddressCreate": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "addressLine1",
              "addressPou",
              "addressType",
              "city",
              "countryCodeIso3"
            ],
            "properties": {
              "addressMetaData": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "confidenceScore": {
                    "type": "integer",
                    "example": 100
                  },
                  "addressType": {
                    "type": "string",
                    "example": "Domestic"
                  },
                  "deliveryPointValidation": {
                    "type": "string",
                    "example": "CONFIRMED"
                  },
                  "residentialDeliveryIndicator": {
                    "type": "string",
                    "example": "RESIDENTIAL"
                  }
                }
              },
              "addressLine1": {
                "type": "string",
                "example": "1493 Martin Luther King Rd"
              },
              "addressLine2": {
                "type": "string, null"
              },
              "addressLine3": {
                "type": "string, null"
              },
              "addressPou": {
                "type": "string",
                "enum": [
                  "RESIDENCE/CHOICE",
                  "CORRESPONDENCE"
                ],
                "example": "RESIDENCE/CHOICE"
              },
              "addressType": {
                "type": "string",
                "enum": [
                  "DOMESTIC",
                  "INTERNATIONAL",
                  "MILITARY"
                ],
                "example": "DOMESTIC"
              },
              "city": {
                "type": "string",
                "example": "Fulton"
              },
              "countryCodeIso3": {
                "type": "string",
                "example": "USA"
              },
              "internationalPostalCode": {
                "type": "string, null",
                "example": null
              },
              "province": {
                "type": "string, null",
                "example": null
              },
              "stateCode": {
                "type": "string, null",
                "example": "NY"
              },
              "zipCode": {
                "type": "string, null",
                "example": "97062"
              },
              "zipCodeSuffix": {
                "type": "string, null",
                "example": "1234"
              }
            }
          }
        }
      },
      "AddressResponse": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "required": [
              "id",
              "string"
            ],
            "properties": {
              "id": {
                "type": "string",
                "example": "3be0c7de-bfe1-4101-a326-5567bcd98b63",
                "description": "Randomly generated UUID"
              },
              "type": {
                "type": "string",
                "example": "suggested_address"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "transactionId",
                  "transactionStatus",
                  "type"
                ],
                "properties": {
                  "addressLine1": {
                    "type": "string",
                    "example": "51 W Weber Rd"
                  },
                  "addressLine2": {
                    "type": [
                      "string",
                      null
                    ],
                    "example": null
                  },
                  "addressLine3": {
                    "type": [
                      "string",
                      null
                    ],
                    "example": null
                  },
                  "addressPou": {
                    "type": "string",
                    "example": "RESIDENCE/CHOICE"
                  },
                  "addressType": {
                    "type": "string",
                    "example": "DOMESTIC"
                  },
                  "city": {
                    "type": "string",
                    "example": "Columbus"
                  },
                  "countryCodeIso3": {
                    "type": "string",
                    "example": "USA"
                  },
                  "internationalPostalCode": {
                    "type": [
                      "string",
                      null
                    ],
                    "example": null
                  },
                  "province": {
                    "type": [
                      "string",
                      null
                    ],
                    "example": null
                  },
                  "stateCode": {
                    "type": "string",
                    "example": "OH"
                  },
                  "zipCode": {
                    "type": "string",
                    "example": "43202"
                  },
                  "zipCodeSuffix": {
                    "type": "string",
                    "example": "1922"
                  }
                }
              },
              "meta": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "address": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "confidenceScore": {
                        "type": "float",
                        "example": 100,
                        "addressType": {
                          "type": "string",
                          "example": "Domestic"
                        },
                        "deliveryPointValidation": {
                          "type": "string",
                          "example": "CONFIRMED"
                        },
                        "residentialDeliveryIndicator": {
                          "type": "string",
                          "example": "RESIDENTIAL"
                        }
                      }
                    }
                  },
                  "validationKey": {
                    "type": "integer",
                    "example": -1398777841
                  }
                }
              }
            }
          }
        }
      },
      "UserDemographics": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "3be0c7de-bfe1-4101-a326-5567bcd98b63",
            "description": "user UUID"
          },
          "type": {
            "type": "string",
            "example": "demographics"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "genderIdentity",
              "preferredName"
            ],
            "properties": {
              "genderIdentity": {
                "type": "string",
                "example": "F"
              },
              "preferredName": {
                "type": "string",
                "example": "SAM"
              }
            }
          }
        }
      },
      "EmailTransaction": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "id",
              "string"
            ],
            "properties": {
              "id": {
                "type": "string",
                "example": "3be0c7de-bfe1-4101-a326-5567bcd98b63",
                "description": "Upstream identifier"
              },
              "type": {
                "type": "string",
                "example": "asyncTransactionVet360EmailTransactions"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "transactionId",
                  "transactionStatus",
                  "type"
                ],
                "properties": {
                  "transactionId": {
                    "type": "string",
                    "example": "3be0c7de-bfe1-4101-a326-5567bcd98b63"
                  },
                  "transactionStatus": {
                    "type": "string",
                    "enum": [
                      "REJECTED",
                      "COMPLETED_SUCCESS",
                      "COMPLETED_NO_CHANGES_DETECTED",
                      "COMPLETED_FAILURE"
                    ],
                    "example": "COMPLETED_SUCCESS"
                  },
                  "type": {
                    "type": "string",
                    "example": "AsyncTransaction::VAProfile::EmailTransaction"
                  },
                  "metadata": {
                    "type": "array",
                    "example": []
                  }
                }
              }
            }
          }
        }
      },
      "Email": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "emailAddress"
        ],
        "properties": {
          "emailAddress": {
            "type": "string",
            "example": "person42@example.com"
          }
        }
      },
      "GenderIdentityUpdate": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "example": "B"
          }
        }
      },
      "GenderIdentityEdit": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "code"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "23fe358d-6e82-4541-804c-ce7562ba28f4",
                "description": "user UUID"
              },
              "type": {
                "type": "string",
                "example": "GenderIdentityOptions"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "options"
                ],
                "properties": {
                  "options": {
                    "type": "object",
                    "additionalProperties": false,
                    "example": {
                      "M": "Man",
                      "B": "Non-binary",
                      "TM": "Transgender man",
                      "TF": "Transgender woman",
                      "F": "Woman",
                      "N": "Prefer not to answer",
                      "O": "A gender not listed here"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PreferredNameUpdate": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "text"
        ],
        "properties": {
          "text": {
            "type": "string",
            "example": "New Preferred Name"
          }
        }
      },
      "PhoneTransaction": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "id",
              "string"
            ],
            "properties": {
              "id": {
                "type": "string",
                "example": "3be0c7de-bfe1-4101-a326-5567bcd98b63",
                "description": "Upstream identifier"
              },
              "type": {
                "type": "string",
                "example": "asyncTransactionVet360PhoneTransactions"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "transactionId",
                  "transactionStatus",
                  "type"
                ],
                "properties": {
                  "transactionId": {
                    "type": "string",
                    "example": "3be0c7de-bfe1-4101-a326-5567bcd98b63"
                  },
                  "transactionStatus": {
                    "type": "string",
                    "enum": [
                      "REJECTED",
                      "COMPLETED_SUCCESS",
                      "COMPLETED_NO_CHANGES_DETECTED",
                      "COMPLETED_FAILURE"
                    ],
                    "example": "COMPLETED_SUCCESS"
                  },
                  "type": {
                    "type": "string",
                    "example": "AsyncTransaction::VAProfile::PhoneTransaction"
                  },
                  "metadata": {
                    "type": "array",
                    "example": []
                  }
                }
              }
            }
          }
        }
      },
      "Phone": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "areaCode",
          "countryCode",
          "phoneNumber",
          "phoneType",
          "extension"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "example": 157032
          },
          "areaCode": {
            "type": "string",
            "example": "704"
          },
          "countryCode": {
            "type": "string",
            "example": "1"
          },
          "phoneNumber": {
            "type": "string",
            "example": "7749069"
          },
          "phoneType": {
            "type": "string",
            "enum": [
              "HOME",
              "FAX",
              "MOBILE",
              "WORK"
            ],
            "example": "HOME"
          },
          "extension": {
            "type": "string",
            "example": "4567"
          }
        }
      },
      "ImmunizationsV1": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "data",
          "meta"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "$ref": "#/components/schemas/ImmunizationRecord"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "pagination"
            ],
            "properties": {
              "pagination": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "currentPage",
                  "perPage",
                  "totalPages",
                  "totalEntries"
                ],
                "properties": {
                  "currentPage": {
                    "type": "integer",
                    "example": 1
                  },
                  "perPage": {
                    "type": "integer",
                    "example": 10
                  },
                  "totalPages": {
                    "type": "integer",
                    "example": 2
                  },
                  "totalEntries": {
                    "type": "integer",
                    "example": 15
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}