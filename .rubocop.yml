AllCops:
  TargetRailsVersion: 5.2
  TargetRubyVersion: 2.4.5
  Include:
    - '**/Gemfile'
    - '**/config.ru'
    - '**/Rakefile'
    - '**/*.rake'
  Exclude:
    - db/schema.rb
    - db/seeds.rb
    - db/migrate/*.rb
    - 'script/**/*'
    - 'vendor/**/*'

# This allows you to use have writers like self.method_name(name) vs self.method_name=(name)
Style/TrivialAccessors:
  AllowDSLWriters: true

# This is the rubocop default but putting it here explicitly
# strong benefit for code readability and speed in reviewing PRs for code review
# only use double quote when doing interpolation or complex escape sequences
Style/StringLiterals:
  EnforcedStyle: single_quotes

Style/Documentation:
  Enabled: false

Style/ClassAndModuleChildren:
  Enabled: false

# This cop forces you to put a return at the beginning of a block of code rather than having an if statement
# whose body carries to the end of the function. For example:
#
# def foo
#   ...
#   if test
#     ...
#   end
# end
#
# would be considered bad, and the cop would force you to put a `return if !test` before that block and
# then remove the if. The problem is that this hides intent, since the if test does have a purpose in
# readability, and it could also be easier for future changes to miss the return statement and add code
# after it expecting it to be executed.
Style/GuardClause:
  Enabled: false

# This is pretty much the same thing as the one above. Inside a loop, it forces you to use next to skip
# iteration rather than using an if block that runs to the end of the loop, and it suffers from the same
# problems as above.
Style/Next:
  Enabled: false
  
Naming/VariableNumber:
  Enabled: false

# This forces you to replace things like: `[1, 2, 3].length == 0` with `[1,2,3].empty?`. The problem is that
# not all things that implement length also implement empty? so you will get errors that cannot be resolved,
# and the cop will encourage you to do things that are incorrect.
Style/ZeroLengthPredicate:
  Enabled: false

Metrics/LineLength:
  Max: 120

Rails:
  Enabled: true

Rails/Output:
  Exclude:
    - 'lib/tasks/**/*'

Metrics/MethodLength:
  Max: 20

Metrics/ClassLength:
  Max: 400

Metrics/AbcSize:
  Max: 40

# removing rule because get_session implies HTTP GET, and informs method
Naming/AccessorMethodName:
  Enabled: false

Rails/LexicallyScopedActionFilter:
  Exclude:
    - "app/controllers/concerns/filterable.rb"	  	

# Blocks are limited to 25 lines or less
# removing block length rule for rspec DSL
Metrics/BlockLength:
  Exclude:
    - 'spec/**/*.rb'
    - 'rakelib/**/*.rake'
    - 'config/**/*.rb'
    - 'app/swagger/**/*.rb'
    - 'app/controllers/v0/apidocs_controller.rb'

# Don't worry about ambiguous blocks in RSpec
# Official recommendation from rubocop team is to disable this rule for specs. 
# See: https://github.com/rubocop-hq/rubocop/issues/4222
Lint/AmbiguousBlockAssociation:
  Exclude:
    - "spec/**/*"

# This file does not need to be snake case
Naming/FileName:
  Exclude:
    - "Guardfile"

# TODO: REVIEW THESE AND MAKE CHANGES

# We should try to use StandardError, but some errors like timeout inherit from Exception (beware)
Style/RescueStandardError:
  EnforcedStyle: implicit

# All kinds of issues with this cop right now, so disabling it.
Style/FormatStringToken:
  Exclude:
    - "rakelib/mvi.rake"


# Disabling this rule for now. We should consider changing.
Lint/BooleanSymbol:
  Exclude:
    - "app/swagger/schemas/gibct/institutions.rb" #Swagger blocks defines keys as :true, need to keep as is

# Use `Time` when dealing with current dates and times; it has support for timezones (system/local and utc), whereas `DateTime` only supports offsets from UTC.
# However, if you need to deal with dates and times in a historical context you'll want to use DateTime to avoid making the same mistakes as UNESCO.
# See: https://www.rubydoc.info/gems/rubocop/RuboCop/Cop/Style/DateTime
Style/DateTime:
  Exclude:
    - "rakelib/evss.rake"
    - "lib/evss/auth_headers.rb" #DateTime is needed for date formatting here


# Skipping for now, should revisit:
Rails/HasManyOrHasOneDependent:
  Exclude:
    - "app/models/education_benefits_claim.rb"
    - "app/models/saved_claim/education_benefits.rb"
    - "app/models/saved_claim.rb"
    - "app/models/terms_and_conditions.rb"
