


  describe '.refresh_transaction_statuses() v2' do
    Flipper.enable(:va_v3_contact_information_service)
    let(:user) { build(:user, :loa3) }
    let(:transaction1) do
      create(:address_transaction,
             transaction_id: '0faf342f-5966-4d3f-8b10-5e9f911d07d2',
             user_uuid: user.uuid,
             status: AsyncTransaction::Vet360::Base::COMPLETED)
    end
    let(:service) { VAProfile::V2::ContactInformation::Service.new(user) }

    before do
      # vet360_id appears in the API request URI so we need it to match the cassette
      allow_any_instance_of(MPIData).to receive(:response_from_redis_or_service).and_return(
        create(:find_profile_response, profile: build(:mpi_profile, vet360_id: '1'))
      )
    end

    it 'does not return completed transactions (whose status has not changed)' do
      transactions = AsyncTransaction::Vet360::Base.refresh_transaction_statuses(user, service)
      expect(transactions).to eq([])
    end

    it 'returns only the most recent transaction address/telephone/email transaction' do
      create(:email_transaction,
             transaction_id: 'foo',
             user_uuid: user.uuid,
             transaction_status: 'RECEIVED',
             status: AsyncTransaction::Vet360::Base::REQUESTED,
             created_at: Time.zone.now - 1)
      transaction = create(:email_transaction,
                           transaction_id: '5b4550b3-2bcb-4fef-8906-35d0b4b310a8',
                           user_uuid: user.uuid,
                           transaction_status: 'RECEIVED',
                           status: AsyncTransaction::Vet360::Base::REQUESTED)
      VCR.use_cassette('va_profile/v2/contact_information/email_transaction_status', VCR::MATCH_EVERYTHING) do
        transactions = AsyncTransaction::Vet360::Base.refresh_transaction_statuses(user, service)
        expect(transactions.size).to eq(1)
        expect(transactions.first.transaction_id).to eq(transaction.transaction_id)
      end
    end
  end