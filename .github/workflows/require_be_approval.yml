name: Require backend-review-group approval
on:
  pull_request_review:
    types: [submitted]
    branches: master
permissions:
  id-token: write
  contents: read
jobs:
  get-pr-data:
    name: Get PR Data
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      pr_draft: ${{ steps.pr_data.outputs.pr_draft }}
      pr_branch: ${{ steps.pr_data.outputs.pr_branch }}
      pr_number: ${{ steps.pr_data.outputs.pr_number }}
      pr_labels: ${{ steps.pr_data.outputs.pr_labels }}
    steps:
      - name: Checkout PR HEAD ref
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Get PR data
        id: pr_data
        run: |
          # Pull recent data
          ORG="department-of-veterans-affairs"
          REPO="department-of-veterans-affairs/vets-api"
          PR_NUMBER="${{ github.event.pull_request.number }}"

          echo "pr_number=${PR_NUMBER}" >> "$GITHUB_OUTPUT"

          # Fetch PR details from GitHub API
          PR_INFO=$(gh api /repos/${REPO}/pulls/${PR_NUMBER} --jq '{
            draft: .draft,
            labels: [.labels[].name],
            head_ref: .head.ref
          }')

          PR_DRAFT=$(echo "$PR_INFO" | jq -r '.draft')
          PR_LABELS=$(echo "$PR_INFO" | jq -c '.labels')
          PR_BRANCH=$(echo "$PR_INFO" | jq -r '.head_ref')

          echo "pr_draft=${PR_DRAFT}" >> "$GITHUB_OUTPUT"
          echo "pr_labels=${PR_LABELS}" >> "$GITHUB_OUTPUT"
          echo "pr_branch=${PR_BRANCH}" >> "$GITHUB_OUTPUT"

      - name: Remove ready-for-review label
        if: steps.pr_data.outputs.pr_draft == 'true'
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          number: ${{ env.pr_number }}
          labels: ready-for-review

      - name: Remove ready-for-backend-review label
        if: steps.pr_data.outputs.pr_draft == 'true'
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          number: ${{ env.pr_number }}
          labels: ready-for-backend-review

      - name: Fail if draft or failures
        if: steps.pr_data.outputs.pr_draft == 'true'
        run: exit 1

  # This workflow should fail when backend approval is required and required workflows are not complete.
  check-workflow-status:
    name: Check Workflow Statuses
    needs: [get-pr-data]
    runs-on: ubuntu-latest
    permissions: write-all
    env:
      pr_draft: ${{ needs.get-pr-data.outputs.pr_draft }}
      pr_number: ${{ needs.get-pr-data.outputs.pr_number }}
      pr_branch: ${{ needs.get-pr-data.outputs.pr_branch }}
      pr_labels: ${{ needs.get-pr-data.outputs.pr_labels }}
    outputs:
      failures_detected: ${{ steps.check_workflow_status.outputs.failures_detected }}
    steps:
      - name: Check if workflows have completed successfully
        id: check_workflow_status
        run: |
          failures=false
          unsuccessful_count=0

          GITHUB_REPOSITORY="department-of-veterans-affairs/vets-api"
          WORKFLOWS=("Code Checks" "Check CODEOWNERS Entries" "Audit Service Tags" "CodeQL")
          echo "Pull request branch: ${pr_branch}"

          for WORKFLOW in "${WORKFLOWS[@]}"; do
            # Check if there's any in-progress run for this workflow
            IN_PROGRESS=$(gh run list --repo "$GITHUB_REPOSITORY" --workflow="$WORKFLOW" --status=in_progress --json headBranch,event,headSha -q \
              ".[] | select(.headBranch == \"${pr_branch}\" and .event == \"pull_request\") | .headSha" | head -n 1)

            if [ -n "$IN_PROGRESS" ]; then
              echo "$WORKFLOW is still in progress."
              failures=true
            else
              # Check if the latest completed run was successful
              SUCCESSFUL=$(gh run list --repo "$GITHUB_REPOSITORY" --workflow="$WORKFLOW" --status=completed --json headBranch,event,conclusion,headSha -q \
                ".[] | select(.headBranch == \"${pr_branch}\" and .event == \"pull_request\") | select(.conclusion == \"success\") | .headSha" | head -n 1)
              if [ -z "$SUCCESSFUL" ]; then
                echo "$WORKFLOW did not complete successfully."
                ((unsuccessful_count++))
                failures=true
              else
                echo "$WORKFLOW completed successfully."
              fi
            fi
          done

          if [ "$unsuccessful_count" -eq 4 ]; then
            failures=false
            echo "All workflows are failing."
          fi

          echo "failures_detected=$failures" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Fetch approvals when required workflows are successful.
  fetch-pr-reviews:
    name: Succeed if backend approval is confirmed
    needs: [get-pr-data, check-workflow-status]
    runs-on: ubuntu-latest
    permissions: write-all
    env:
      pr_draft: ${{ needs.get-pr-data.outputs.pr_draft }}
      pr_number: ${{ needs.get-pr-data.outputs.pr_number }}
      pr_branch: ${{ needs.get-pr-data.outputs.pr_branch }}
      failures_detected: ${{ needs.check-workflow-status.outputs.failures_detected }}
    outputs:
      author_is_backend: ${{ steps.verify_approval.outputs.author_is_backend }}
      team_approval_status: ${{ steps.verify_approval.outputs.team_approval_status }}
      approval_status: ${{ steps.verify_approval.outputs.approval_status }}
      backend_approval_required: ${{ steps.verify_approval.outputs.backend_approval_required }}
    steps:
      - name: Checkout PR HEAD ref
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ vars.AWS_ASSUME_ROLE }}
          aws-region: "us-gov-west-1"

      - name: Get bot token from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Verify backend-review-group approval
        id: verify_approval
        run: |
          approval_status=required
          team_approval_status=required
          echo "author_is_backend=false" >> "$GITHUB_OUTPUT"
          echo "backend_approval_required=true" >> $GITHUB_OUTPUT

          EXEMPT_TEAMS=(
            octo-identity
            lighthouse-dash
            lighthouse-pivot
            lighthouse-banana-peels
            mobile-api-team
            accredited-representatives-admin
            benefits-admin
          )

          BACKEND_REVIEWERS=$(gh api /orgs/department-of-veterans-affairs/teams/backend-review-group/members --jq '.[].login')
          BACKEND_REVIEWERS=$(echo "$BACKEND_REVIEWERS" | tr '\n' '|' | sed 's/|$//')
          echo "Backend reviewers regex: $BACKEND_REVIEWERS"

          # Get PR author
          PR_AUTHOR=${{ github.event.pull_request.user.login }}
          if echo "$PR_AUTHOR" | grep -qiE "^($BACKEND_REVIEWERS)$"; then
            echo "PR author '$PR_AUTHOR' is a backend-review-group member."
            echo "author_is_backend=true" >> "$GITHUB_OUTPUT"
          fi

          APPROVED=$(gh api /repos/${{ github.repository }}/pulls/${{ env.pr_number }}/reviews --jq '
            [ .[]
            | select(.state == "APPROVED" and (.dismissed_at == null))
            ]
            | sort_by(.submitted_at)
            | reverse
            | unique_by(.user.login)
            | .[].user.login
          ' || true)

          echo "$APPROVED"
          EXEMPT_REVIEW=false

          if [ -n "$APPROVED" ]; then
            for TEAM in "${EXEMPT_TEAMS[@]}"; do
              echo "Fetching members of team: $TEAM"
              TEAM_MEMBERS=$(gh api /orgs/department-of-veterans-affairs/teams/${TEAM}/members --paginate --jq '.[].login')
              while IFS= read -r MEMBER; do
                while IFS= read -r REVIEWER; do
                  if [[ -n "$MEMBER" && -n "$REVIEWER" && "$MEMBER" == "$REVIEWER" ]]; then
                    echo ""$REVIEWER" is in exempt $TEAM"
                    EXEMPT_REVIEW=true
                    echo "backend_approval_required=false" >> $GITHUB_OUTPUT
                    echo "team_approval_status=confirmed" >> "$GITHUB_OUTPUT"
                    echo "approval_status=confirmed" >> "$GITHUB_OUTPUT"
                    exit 0
                  fi
                done <<< "$APPROVED"
              done <<< "$TEAM_MEMBERS"
            done
          fi

          if [[ "$EXEMPT_REVIEW" == "false" ]]; then
            TEAM_APPROVALS=$(echo "$APPROVED" | grep -viE "^($BACKEND_REVIEWERS)$" || true)
            echo "Team Approvals: $TEAM_APPROVALS"
            if [ -z "$TEAM_APPROVALS" ]; then
              echo "TEAM APPROVAL REQUIRED"
              team_approval_status=required
            else
              echo "TEAM APPROVAL CONFIRMED"
              team_approval_status=confirmed
            fi

            BE_APPROVALS=$(echo "$APPROVED" | grep -iE "^($BACKEND_REVIEWERS)$" || true)
            echo "Backend Approvals: $BE_APPROVALS"
            if [ -z "$BE_APPROVALS" ]; then
              echo "BE APPROVAL REQUIRED"
              approval_status=required
            else
              echo "BE APPROVAL CONFIRMED"
              approval_status=confirmed
            fi
          fi

          echo "team_approval_status=$team_approval_status" >> "$GITHUB_OUTPUT"
          echo "approval_status=$approval_status" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}

      - name: Remove ready-for-review label
        if: |
          needs.check-workflow-status.outputs.failures_detected == 'true' ||
          steps.verify_approval.outputs.team_approval_status == 'confirmed'
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          number: ${{ env.pr_number }}
          labels: ready-for-review

      - name: Remove ready-for-backend-review label
        if: |
          needs.check-workflow-status.outputs.failures_detected == 'true' ||
          steps.verify_approval.outputs.approval_status == 'confirmed' ||
          steps.verify_approval.outputs.backend_approval_required == 'false'
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          number: ${{ env.pr_number }}
          labels: ready-for-backend-review

      - name: Exit for non backend approvals
        if: steps.verify_approval.outputs.backend_approval_required == 'false'
        run: exit 0

      - name: Fail if draft or failures
        if: |
          needs.check-workflow-status.outputs.failures_detected == 'true' ||
          steps.verify_approval.outputs.approval_status == 'required'
        run: exit 1

      - name: Add ready-for-backend-review label
        if: |
          needs.check-workflow-status.outputs.failures_detected == 'false' &&
          steps.verify_approval.outputs.approval_status == 'required' &&
          (
            steps.verify_approval.outputs.team_approval_status == 'confirmed' ||
            steps.verify_approval.outputs.author_is_backend == 'true'
          )
        uses: actions-ecosystem/action-add-labels@v1
        with:
          number: ${{ env.pr_number }}
          labels: ready-for-backend-review


      - name: Backend Approval Confirmed
        if: |
          needs.check-workflow-status.outputs.failures_detected == 'false' &&
          steps.verify_approval.outputs.approval_status == 'confirmed'
        run: exit 0
