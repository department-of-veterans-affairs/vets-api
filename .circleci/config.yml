---
  version: 2.1
  orbs:
    ruby: circleci/ruby@0.2.1

  # Pipeline params are needed for API v2 in order to
  # trigger a conditional verification task workflow via webhook from the pact broker
  # Triggering a specific job via v1.1 of the Circle API is being deprecated
  parameters:
    verify_stable_pacts:
      type: boolean
      default: false
    consumer_branch:
      type: string
      default: ""
    consumer_version:
      type: string
      default: ""

  executors:
    vets_api_docker_executor:
      docker:
        - image: circleci/ruby:2.6.6-stretch
          environment:
            BUNDLE_JOBS: 2
            BUNDLE_RETRY: 3
            LANG: en_US.UTF-8
            PGHOST: localhost
            PGUSER: vets-api
            RAILS_ENV: test
            "Settings.saml.cert_path": "spec/support/certificates/ruby-saml.crt"
            "Settings.saml.key_path": "spec/support/certificates/ruby-saml.key"
            "Settings.binaries.clamdscan": "clamscan"
        - image: circleci/postgres:11.5-postgis-ram # 11.5 engine on AWS RDS
          environment:
            POSTGRES_USER: vets-api
            POSTGRES_DB: vets-api_test
            POSTGRES_PASSWORD: ""
        - image: circleci/redis:3.2-alpine # 3.2.4 engine on AWS Elasticache

  defaults: &defaults
    working_directory: ~/vets-api
    executor: vets_api_docker_executor

  jobs:
    verify_pacts:
      <<: *defaults
      steps:
        - checkout_and_install
        - setup_test_db
        - verify_stable_pacts
    pact_verification_artifact:
      <<: *defaults
      steps:
        - add_pact_verification_artifact
    bundle_audit:
      <<: *defaults
      steps:
        - checkout_and_install
        - bundle_audit
    security_audit:
      <<: *defaults
      steps:
        - checkout_and_install
        - security_check
        - store_artifacts:
            path: ./ci
    lint:
      <<: *defaults
      steps:
        - checkout_and_install
        - linting
        - store_artifacts:
            path: ./ci
    specs:
      <<: *defaults
      parallelism: 4
      steps:
        - checkout_and_install
        - setup_test_db
        - specs
        - store_test_results:
            path: /tmp/rspec
        - store_artifacts:
            path: ./coverage
        - run:
            name: Stash coverage Results
            command: |
                mkdir coverage_results
                cp -R coverage/.resultset.json coverage_results/.resultset-${CIRCLE_NODE_INDEX}.json
        - persist_to_workspace:
            root: .
            paths:
              - coverage_results
    coverage:
      <<: *defaults
      steps:
        - attach_workspace:
            at: .
        - restore_cache:
            key: v2-repo-{{ .Environment.CIRCLE_SHA1 }}
        - restore_cache:
            keys:
              - gem-cache-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
              - gem-cache-{{ arch }}-{{ .Branch }}
              - gem-cache
        - run: bundle install --path vendor/bundle
        - install_dependencies
        - run:
            name: Merge and Check Coverage
            command: RUN_COVERAGE=true bundle exec rake simplecov:report_coverage
        - store_artifacts:
            path: ~/vets-api/coverage
            destination: coverage
  workflows:
    test_and_build:
      unless: << pipeline.parameters.verify_stable_pacts >>
      jobs:
        - verify_pacts
        - bundle_audit
        - security_audit
        - lint
        - specs
        - coverage:
            requires:
              - specs
    pact_verification:
      when: << pipeline.parameters.verify_stable_pacts >>
      jobs:
        - verify_pacts
        - pact_verification_artifact

  commands:
    checkout_and_install:
        steps:
            - checkout
            - install_dependencies
            - save_cache:
                key: v2-repo-{{ .Environment.CIRCLE_SHA1 }}
                paths:
                  - ~/vets-api
            - restore_cache:
                keys:
                  - gem-cache-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
                  - gem-cache-{{ arch }}-{{ .Branch }}
                  - gem-cache
            - run: bundle install --path vendor/bundle
            - save_cache:
                key: gem-cache-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
                paths:
                  - ~/vets-api/vendor/bundle
    install_dependencies:
        steps:
            - run:
                name: Install dependencies (pdftk, poppler, imagemagick)
                command: sudo apt install imagemagick pdftk poppler-utils
    setup_test_db:
        steps:
            - run:
                name: Setup test database
                command: bundle exec rake db:create db:schema:load
    verify_stable_pacts:
        steps:
            - run:
                name: Verify stable pacts
                command: bundle exec rake pact:verify
    add_pact_verification_artifact:
        steps:
            - run:
               name: Create artifact for consumer info
               command: |
                 echo "Pact Consumer Info:" >> /tmp/pact-consumer-info;

                 echo "Consumer Branch:" << pipeline.parameters.consumer_branch >> >> /tmp/pact-consumer-info;

                 echo "Consumer Version:" << pipeline.parameters.consumer_version >> >> /tmp/pact-consumer-info;
            - store_artifacts:
                 path: /tmp/pact-consumer-info
                 destination: pact-consumer-info
    bundle_audit:
        steps:
            - run:
                name: Audit bundled gems for CVE issues
                command: bundle exec bundle-audit check --update
    security_check:
        steps:
            - run:
                name: Static security analysis using Brakeman
                command: bundle exec brakeman --exit-on-warn --run-all-checks --confidence-level=2 -o ./ci/brakeman.html -o ./ci/brakeman.text
    linting:
        steps:
            - run:
                name: Lint code with Rubocop
                command: bundle exec rubocop -r rubocop-thread_safety --parallel --format progress --format RuboCop::Formatter::JUnitFormatter --out ./ci/rubocop.xml --format html --out ./ci/rubocop.html
    specs:
        steps:
            - run:
                name: Split tests by timing
                command: circleci tests glob "spec/**/*_spec.rb" + glob "modules/*/spec/**/*_spec.rb" | circleci tests split --split-by=timings > /tmp/tests-to-run
            - run:
                name: Run all RSpec specs
                command: bundle exec rspec --pattern $(cat /tmp/tests-to-run) --format progress --format RspecJunitFormatter -o /tmp/rspec/rspec.xml --format html --out /tmp/ci/rspec.html
