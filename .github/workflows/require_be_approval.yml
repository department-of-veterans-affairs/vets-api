name: Check Backend Review Group Approval

on:
  pull_request:
    types: [opened, reopened, edited, synchronize, review_requested, submitted]

jobs:
  check-backend-review:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      contents: read
    steps:
      - name: Set up env vars
        id: vars
        run: |
          echo "REPO=${{ github.repository }}" >> $GITHUB_ENV
          echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV

      - name: Install GitHub CLI
        uses: cli/cli-action@v2

      - name: Get PR author
        id: author
        run: |
          PR_AUTHOR=$(gh pr view "$PR_NUMBER" --repo "$REPO" --json author -q '.author.login')
          echo "PR author is $PR_AUTHOR"
          echo "pr_author=$PR_AUTHOR" >> $GITHUB_OUTPUT

      - name: Check if 'backend-review-group' is a requested reviewer team
        id: check_team
        run: |
          TEAM_SLUG="backend-review-group"
          TEAM_REQUESTED=$(gh pr view "$PR_NUMBER" --repo "$REPO" --json reviewRequests -q '.reviewRequests.teams[].slug' | grep -Fx "$TEAM_SLUG" || true)

          if [[ -n "$TEAM_REQUESTED" ]]; then
            echo "Backend team is a requested reviewer"
            echo "team_requested=true" >> $GITHUB_OUTPUT
          else
            echo "Backend team is NOT a requested reviewer"
            echo "team_requested=false" >> $GITHUB_OUTPUT
          fi

      - name: Exit early if backend team is not requested
        if: steps.check_team.outputs.team_requested == 'false'
        run: echo "Skipping backend review check since team is not requested"

      - name: Get backend team members
        if: steps.check_team.outputs.team_requested == 'true'
        run: |
          gh api orgs/${{ github.repository_owner }}/teams/backend-review-group/members \
            --paginate --jq '.[].login' > members.txt

          echo "Team members:"
          cat members.txt

      - name: Check if any backend reviewer approved
        if: steps.check_team.outputs.team_requested == 'true'
        run: |
          gh pr view "$PR_NUMBER" --repo "$REPO" --json reviews -q '.reviews[] | select(.state=="APPROVED") | .author.login' > approvals.txt

          echo "Approved by:"
          cat approvals.txt

          PASSED=false
          while IFS= read -r member; do
            if grep -Fxq "$member" approvals.txt; then
              echo "✅ $member from backend-review-group has approved"
              PASSED=true
              break
            fi
          done < members.txt

          if [[ "$PASSED" == "true" ]]; then
            echo "Team approval satisfied"
          else
            echo "❌ No approvals from backend-review-group"
            exit 1
          fi
