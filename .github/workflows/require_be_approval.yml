name: Require backend-review-group approval
on:
  pull_request_review:
    types: [submitted]
    branches: master
permissions:
  id-token: write
  contents: read
jobs:
  get-pr-data:
    name: Get PR Data
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      pr_draft: ${{ steps.pr_data.outputs.pr_draft }}
      pr_branch: ${{ steps.pr_data.outputs.pr_branch }}
      pr_number: ${{ steps.pr_data.outputs.pr_number }}
      pr_labels: ${{ steps.pr_data.outputs.pr_labels }}
    steps:
      - name: Checkout PR HEAD ref
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Get PR data
        id: pr_data
        run: |
          # Pull recent data
          ORG="department-of-veterans-affairs"
          REPO="department-of-veterans-affairs/vets-api"
          PR_NUMBER="${{ github.event.pull_request.number }}"

          echo "pr_number=${PR_NUMBER}" >> "$GITHUB_OUTPUT"

          # Fetch PR details from GitHub API
          PR_INFO=$(gh api /repos/${REPO}/pulls/${PR_NUMBER} --jq '{
            draft: .draft,
            labels: [.labels[].name],
            head_ref: .head.ref
          }')

          PR_DRAFT=$(echo "$PR_INFO" | jq -r '.draft')
          PR_LABELS=$(echo "$PR_INFO" | jq -c '.labels')
          PR_BRANCH=$(echo "$PR_INFO" | jq -r '.head_ref')

          echo "pr_draft=${PR_DRAFT}" >> "$GITHUB_OUTPUT"
          echo "pr_labels=${PR_LABELS}" >> "$GITHUB_OUTPUT"
          echo "pr_branch=${PR_BRANCH}" >> "$GITHUB_OUTPUT"

      - name: Remove ready-for-review label
        if: steps.pr_data.outputs.pr_draft == 'true'
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          number: ${{ steps.get_pr_data.outputs.pr_number }}
          labels: ready-for-review

      - name: Remove ready-for-backend-review label
        if: steps.pr_data.outputs.pr_draft == 'true'
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          number: ${{ steps.get_pr_data.outputs.pr_number }}
          labels: ready-for-backend-review

      - name: Remove final-review-confirmed label
        if: steps.pr_data.outputs.pr_draft == 'true'
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          number: ${{ steps.get_pr_data.outputs.pr_number }}
          labels: final-review-confirmed

      - name: Fail if draft or failures
        if: steps.pr_data.outputs.pr_draft == 'true'
        run: exit 1

  # Fetch approvals when required workflows are successful.
  fetch-pr-reviews:
    name: Succeed if backend approval is confirmed
    needs: [get-pr-data]
    runs-on: ubuntu-latest
    permissions: write-all
    env:
      pr_draft: ${{ needs.get-pr-data.outputs.pr_draft }}
      pr_number: ${{ needs.get-pr-data.outputs.pr_number }}
      pr_branch: ${{ needs.get-pr-data.outputs.pr_branch }}
      pr_labels: ${{ needs.get-pr-data.outputs.pr_labels }}
    outputs:
      exempt_be_review: ${{ steps.verify_approval.outputs.exempt_be_review }}
      author_is_backend: ${{ steps.verify_approval.outputs.author_is_backend }}
      team_approval_status: ${{ steps.verify_approval.outputs.team_approval_status }}
      approval_status: ${{ steps.verify_approval.outputs.approval_status }}
      backend_approval_required: ${{ steps.verify_approval.outputs.backend_approval_required }}
    steps:
      - name: Checkout PR HEAD ref
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ vars.AWS_ASSUME_ROLE }}
          aws-region: "us-gov-west-1"

      - name: Get bot token from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Verify backend-review-group approval
        id: verify_approval
        run: |
          approval_status=required
          team_approval_status=required
          author_is_backend=false
          backend_approval_required=true
          exempt_be_review=false
          PR_LABELS="${{ env.pr_labels }}"
          EXEMPT_TEAMS=(
            octo-identity
            lighthouse-dash
            lighthouse-pivot
            lighthouse-banana-peels
            mobile-api-team
            accredited-representatives-admin
            benefits-admin
          )

          BACKEND_REVIEWERS=$(gh api /orgs/department-of-veterans-affairs/teams/backend-review-group/members --jq '.[].login')
          BACKEND_REVIEWERS=$(echo "$BACKEND_REVIEWERS" | tr '\n' '|' | sed 's/|$//')
          echo "Backend reviewers regex: $BACKEND_REVIEWERS"

          # Get PR author
          PR_AUTHOR=${{ github.event.pull_request.user.login }}
          if echo "$PR_AUTHOR" | grep -qiE "^($BACKEND_REVIEWERS)$"; then
            echo "PR author '$PR_AUTHOR' is a backend-review-group member."
            author_is_backend=true
          fi

          APPROVED=$(gh api /repos/${{ github.repository }}/pulls/${{ env.pr_number }}/reviews --jq '
            [ .[]
            | select(.state == "APPROVED")
            ]
            | sort_by(.submitted_at)
            | last
            | .user.login
          ' || true)

          echo "Approvals: $APPROVED"

          for TEAM in "${EXEMPT_TEAMS[@]}"; do
            echo "Fetching members of team: $TEAM"
            TEAM_MEMBERS=$(gh api /orgs/department-of-veterans-affairs/teams/${TEAM}/members --paginate --jq '.[].login')
            while IFS= read -r MEMBER; do
              while IFS= read -r REVIEWER; do
                if [[ -n "$MEMBER" && -n "$REVIEWER" && "$MEMBER" == "$REVIEWER" ]]; then
                  echo "$REVIEWER is in exempt $TEAM"
                  exempt_be_review=true
                  break 3
                fi
              done <<< "$APPROVED"
            done <<< "$TEAM_MEMBERS"
          done

          if [[ "${exempt_be_review}" == "true" ]]; then
            backend_approval_required=false
            team_approval_status=confirmed
            approval_status=confirmed
          elif echo "$PR_LABELS" | jq -e '. | index("exempt-be-review")' > /dev/null || \
              echo "$PR_LABELS" | jq -e '. | index("final-review-confirmed")' > /dev/null; then
            team_approval_status=confirmed
            approval_status=confirmed
            backend_approval_required=false
          else
            backend_approval_required=true
            BE_APPROVALS=$(echo "$APPROVED" | grep -iE ^($BACKEND_REVIEWERS)$" || true)
            echo "Backend Approvals: $BE_APPROVALS"
            if [ -z "$BE_APPROVALS" ]; then
              echo "BE APPROVAL NOT CONFIRMED"
              approval_status=not_confirmed
            else
              echo "BE APPROVAL CONFIRMED"
              approval_status=confirmed
            fi

            TEAM_APPROVALS=$(echo "$APPROVED" | grep -viE "^($BACKEND_REVIEWERS)$" || true)
            echo "Team Approvals: $TEAM_APPROVALS"
            if [ -z "$TEAM_APPROVALS" ]; then
              echo "TEAM APPROVAL REQUIRED"
              team_approval_status=required
            else
              echo "TEAM APPROVAL CONFIRMED"
              team_approval_status=confirmed
            fi
          fi

          echo "exempt_be_review=$exempt_be_review" >> "$GITHUB_OUTPUT"
          echo "backend_approval_required=$backend_approval_required" >> "$GITHUB_OUTPUT"
          echo "team_approval_status=$team_approval_status" >> "$GITHUB_OUTPUT"
          echo "approval_status=$approval_status" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}

      - name: Remove ready-for-review label
        if: steps.verify_approval.outputs.team_approval_status == 'confirmed'
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          number: ${{ env.pr_number }}
          labels: ready-for-review

      - name: Remove ready-for-backend-review label
        if: |
          steps.verify_approval.outputs.approval_status == 'confirmed' ||
          steps.verify_approval.outputs.backend_approval_required == 'false'
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          number: ${{ env.pr_number }}
          labels: ready-for-backend-review

      - name: Add exempt-be-review label
        if: steps.verify_approval.outputs.exempt_be_review == 'true'
        uses: actions-ecosystem/action-add-labels@v1
        with:
          number: ${{ env.pr_number }}
          labels: exempt-be-review

      - name: Fail if draft or failures
        if: steps.verify_approval.outputs.approval_status == 'required'
        run: exit 1

      - name: Exit for non backend approvals
        if: steps.verify_approval.outputs.backend_approval_required == 'false'
        run: exit 0

      - name: Add ready-for-backend-review label
        if: |
          steps.verify_approval.outputs.approval_status == 'required' &&
          steps.verify_approval.outputs.team_approval_status == 'confirmed'
        uses: actions-ecosystem/action-add-labels@v1
        with:
          number: ${{ env.pr_number }}
          labels: ready-for-backend-review

      - name: Add final-review-confirmed label
        if: steps.verify_approval.outputs.approval_status == 'confirmed'
        uses: actions-ecosystem/action-add-labels@v1
        with:
          number: ${{ env.pr_number }}
          labels: final-review-confirmed

      - name: Backend Approval Confirmed
        if: steps.verify_approval.outputs.approval_status == 'confirmed'
        run: exit 0
