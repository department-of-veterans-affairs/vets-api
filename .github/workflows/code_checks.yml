name: Code Checks
on:
  push:
    branches: [master]
  pull_request:
    types: [opened, reopened, synchronize]
permissions:
  id-token: write
  contents: read
  checks: write
jobs:
  compare_sha:
    runs-on: ubuntu-latest
    name: Compare sha
    steps:
      - name: Compare commit ids
        run: |
          echo "github.sha: ${{ github.sha }}"
          echo "github.event.push.head_commit.id: ${{ github.event.push.head_commit.id }}"
          echo "github.event.pull_request.merge_commit_sha: ${{ github.event.pull_request.merge_commit_sha }}"
          echo "github.event.head_commit.id: ${{ github.event.head_commit.id }}"

  linting_and_security:
    name: Linting and Security
    env:
      BUNDLE_ENTERPRISE__CONTRIBSYS__COM: ${{ secrets.BUNDLE_ENTERPRISE__CONTRIBSYS__COM }}
    permissions: write-all
    runs-on: ubuntu-32-cores-latest
    steps:
      - name: Checkout PR
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/checkout@v5

      - name: Checkout PR HEAD ref
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1

      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Run bundle-audit (checks gems for CVE issues)
        run: bundle exec bundle-audit check --update

      - name: Run Rubocop
        run: bundle exec rubocop --parallel --format github

      - name: Run Brakeman
        run: bundle exec brakeman --ensure-latest --confidence-level=2 --format github

      # Always add the "lint-failure" label on failure and remove it on success
      - name: Add Lint Failure label
        if: ${{ failure() && github.event_name == 'pull_request' }}
        uses: actions-ecosystem/action-add-labels@v1
        with:
          number: ${{ github.event.pull_request.number }}
          labels: lint-failure

      - name: Remove Lint Failure label
        if: ${{ success() && github.event_name == 'pull_request' }}
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          number: ${{ github.event.pull_request.number }}
          labels: lint-failure

  build:
    name: Build and Cache Docker Image
    runs-on: ubuntu-16-cores-latest
    env:
      BUNDLE_ENTERPRISE__CONTRIBSYS__COM: ${{ secrets.BUNDLE_ENTERPRISE__CONTRIBSYS__COM }}
      DOCKER_BUILDKIT: 1
    steps:
      - name: Checkout PR
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/checkout@v5

      - name: Checkout PR HEAD ref
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1

      - name: Runtime cache restore
        uses: actions/cache/restore@v4
        with:
          path: tmp/parallel_runtime_rspec.log
          key: runtime-cache-all
          restore-keys: |
            runtime-cache-all-
            runtime-cache-

      - name: Runtime cache clear previous chunk cache
        run: |
          rm -f tmp/parallel_runtime_rspec_chunk_${{ matrix.test_group }}.log

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ vars.AWS_ASSUME_ROLE }}
          aws-region: us-gov-west-1

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2.0.1
        with:
          mask-password: true

      - name: Set Environment Variable
        run: echo "VETS_API_USER_ID=$(id -u)" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Cache Docker Image
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILD_SUMMARY: false
        with:
          build-args: |
            BUNDLE_ENTERPRISE__CONTRIBSYS__COM=${{ env.BUNDLE_ENTERPRISE__CONTRIBSYS__COM }}
            USER_ID=${{ env.VETS_API_USER_ID }}
          context: .
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

  tests:
    name: Test (Group ${{ matrix.test_group }})
    runs-on: ubuntu-16-cores-latest
    permissions: write-all
    needs: build
    strategy:
      fail-fast: false
      matrix:
        test_group: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    env:
      BUNDLE_ENTERPRISE__CONTRIBSYS__COM: ${{ secrets.BUNDLE_ENTERPRISE__CONTRIBSYS__COM }}
      ECR_REGISTRY_WITH_SLASH: "${{ secrets.ECR_REGISTRY }}/"
      CI: true
      RAILS_ENV: test
      TERM: xterm-256color
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
      COMPOSE_BASH_CMD: docker compose -f docker-compose.test.yml run web bash -c
    steps:
      - name: Checkout PR
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/checkout@v5

      - name: Checkout PR HEAD ref
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1

      - name: Runtime cache restore
        uses: actions/cache/restore@v4
        with:
          path: tmp/parallel_runtime_rspec.log
          key: runtime-cache-all
          restore-keys: |
            runtime-cache-all-
            runtime-cache-


      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ vars.AWS_ASSUME_ROLE }}
          aws-region: us-gov-west-1

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2.0.1
        with:
          mask-password: true

      - name: Set Environment Variable
        run: echo "VETS_API_USER_ID=$(id -u)" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILD_SUMMARY: false
        with:
          build-args: |
            BUNDLE_ENTERPRISE__CONTRIBSYS__COM=${{ env.BUNDLE_ENTERPRISE__CONTRIBSYS__COM }}
            USER_ID=${{ env.VETS_API_USER_ID }}
          context: .
          push: false
          load: true
          tags: vets-api
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup Database
        uses: nick-fields/retry@ce71cc2ab81d554ebbe88c79ab5975992d79ba08 # v3.0.2
        with:
          timeout_minutes: 10
          retry_wait_seconds: 3 # Seconds
          max_attempts: 3
          command: >
            ${{ env.COMPOSE_BASH_CMD }}
            "bundle exec rake parallel:setup[12] && bundle exec rake db:test:prepare"

      - name: Setup system tmp dir
        run: >
          ${{ env.COMPOSE_BASH_CMD }}
          "mkdir -p tmp/systmp"

      - name: Run Specs
        timeout-minutes: 15
        env:
          TEST_ENV_NUMBER: ${{ matrix.test_group }}
        run: >
          ${{ env.COMPOSE_BASH_CMD }}
          "TEST_ENV_NUMBER=${{ matrix.test_group }} TMPDIR=tmp/systmp bundle exec parallel_test spec modules --group-by filesize --type rspec --only-group ${{ matrix.test_group }} -n 12 --verbose --test-options='--format progress --format ParallelTests::RSpec::RuntimeLogger --out tmp/parallel_runtime_rspec_chunk_${{ matrix.test_group }}.log'"

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Coverage Report Group ${{ matrix.test_group }}
          path: coverage
          include-hidden-files: true

      - name: Upload Test Results (JUnit XMLs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Test Results Group ${{ matrix.test_group }}
          path: log/*.xml
          if-no-files-found: ignore

      - name: Upload Test Artifacts (log)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test Artifacts (log directory) Group ${{ matrix.test_group }}
          path: |
            log
            !log/*.xml
          if-no-files-found: ignore

      - name: Upload Test Artifacts (rails tmp)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: Test Artifacts (rails tmp directory) Group ${{ matrix.test_group }}
          path: tmp
          if-no-files-found: ignore
          retention-days: 14

      - name: Runtime cache prepare chunk
        shell: bash
        run: |
          mkdir -p tmp/parallel_runtime_rspec
          mv tmp/parallel_runtime_rspec_chunk_${{ matrix.test_group }}.log tmp/parallel_runtime_rspec/${{ matrix.test_group }}.log

      - name: Runtime cache store chunk
        if: always()
        uses: actions/cache/save@v4
        with:
          path: tmp/parallel_runtime_rspec
          key: runtime-cache-${{ matrix.test_group }}

      - name: Upload Runtime Data
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Runtime Data Group ${{ matrix.test_group }}
          path: tmp/parallel_runtime_rspec_chunk_${{ matrix.test_group }}.log
          if-no-files-found: ignore


  publish_results:
    name: Publish Test Results and Coverage
    if: always()
    needs: tests
    permissions: write-all
    runs-on: ubuntu-16-cores-latest

    steps:
      - uses: actions/download-artifact@v5

      - name: Publish Test Results to GitHub
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          check_name: Test Results
          comment_mode: off
          files: Test Results Group*/*.xml
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fix up coverage report to work with coverage-check-action
        run: |
          # Find the first coverage report and use it
          COVERAGE_FILE=$(find . -name ".last_run.json" -path "*/Coverage Report Group*/.last_run.json" | head -1)
          if [ -n "$COVERAGE_FILE" ]; then
            echo "Found coverage file: $COVERAGE_FILE"
            sed -i 's/"line"/"covered_percent"/g' "$COVERAGE_FILE"
            echo "COVERAGE_FILE_PATH=$COVERAGE_FILE" >> $GITHUB_ENV
          else
            echo "No coverage file found"
          fi

      - name: Publish Coverage Report
        if: always() && env.COVERAGE_FILE_PATH
        uses: devmasx/coverage-check-action@v1.2.0
        with:
          type: simplecov
          result_path: ${{ env.COVERAGE_FILE_PATH }}
          min_coverage: 90
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Remove Test Failure label
        if: ${{ success() && github.event_name == 'pull_request' }}
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          number: ${{ github.event.pull_request.number }}
          labels: test-failure

      - name: Add Test Failure label
        if: ${{ failure() && github.event_name == 'pull_request' }}
        uses: actions-ecosystem/action-add-labels@v1
        with:
          number: ${{ github.event.pull_request.number }}
          labels: test-failure

  combine_runtime_data:
    name: Combine Runtime Data
    if: always()
    needs: tests
    runs-on: ubuntu-16-cores-latest
    steps:
      - name: Checkout PR
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/checkout@v5

      - name: Checkout PR HEAD ref
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1

      - name: Runtime cache restore
        uses: actions/cache/restore@v4
        with:
          path: tmp/parallel_runtime_rspec.log
          key: runtime-cache-all
          restore-keys: |
            runtime-cache-all-
            runtime-cache-

      - name: Runtime cache load chunk 1
        uses: actions/cache/restore@v4
        with:
          key: runtime-cache-1
          path: tmp/parallel_runtime_rspec

      - name: Runtime cache load chunk 2
        uses: actions/cache/restore@v4
        with:
          key: runtime-cache-2
          path: tmp/parallel_runtime_rspec

      - name: Runtime cache load chunk 3
        uses: actions/cache/restore@v4
        with:
          key: runtime-cache-3
          path: tmp/parallel_runtime_rspec

      - name: Runtime cache load chunk 4
        uses: actions/cache/restore@v4
        with:
          key: runtime-cache-4
          path: tmp/parallel_runtime_rspec

      - name: Runtime cache load chunk 5
        uses: actions/cache/restore@v4
        with:
          key: runtime-cache-5
          path: tmp/parallel_runtime_rspec

      - name: Runtime cache load chunk 6
        uses: actions/cache/restore@v4
        with:
          key: runtime-cache-6
          path: tmp/parallel_runtime_rspec

      - name: Runtime cache load chunk 7
        uses: actions/cache/restore@v4
        with:
          key: runtime-cache-7
          path: tmp/parallel_runtime_rspec

      - name: Runtime cache load chunk 8
        uses: actions/cache/restore@v4
        with:
          key: runtime-cache-8
          path: tmp/parallel_runtime_rspec

      - name: Runtime cache load chunk 9
        uses: actions/cache/restore@v4
        with:
          key: runtime-cache-9
          path: tmp/parallel_runtime_rspec

      - name: Runtime cache load chunk 10
        uses: actions/cache/restore@v4
        with:
          key: runtime-cache-10
          path: tmp/parallel_runtime_rspec

      - name: Runtime cache load chunk 11
        uses: actions/cache/restore@v4
        with:
          key: runtime-cache-11
          path: tmp/parallel_runtime_rspec

      - name: Runtime cache load chunk 12
        uses: actions/cache/restore@v4
        with:
          key: runtime-cache-12
          path: tmp/parallel_runtime_rspec

      - name: Runtime cache combine chunks
        run: |
          # Append new chunks to existing runtime data (don't overwrite)
          cat tmp/parallel_runtime_rspec/* >> tmp/parallel_runtime_rspec.log 2>/dev/null || true
          if [ -f tmp/parallel_runtime_rspec.log ]; then
            # Remove duplicates and sort
            sort -u tmp/parallel_runtime_rspec.log -o tmp/parallel_runtime_rspec.log
            echo "Combined runtime data from $(wc -l < tmp/parallel_runtime_rspec.log) test entries"
            head -10 tmp/parallel_runtime_rspec.log
          fi


      - name: Runtime cache store
        if: success()
        uses: actions/cache/save@v4
        with:
          path: tmp/parallel_runtime_rspec.log
          key: runtime-cache-all-${{ github.run_id }}
