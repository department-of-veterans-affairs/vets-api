{
	"info": {
		"_postman_id": "5e0368cb-f115-442e-99ef-f1f1c77345f3",
		"name": "Automated Benefits Intake - vets-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21331983"
	},
	"item": [
		{
			"name": "/uploads tests",
			"item": [
				{
					"name": "/uploads/ get guid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"pm.test(\"guid is provided\", function () {\r",
									"    pm.expect(jsonData.data.attributes.guid).to.exist;\r",
									"});\r",
									"pm.test(\"Status is pending\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"pending\");\r",
									"});\r",
									"\r",
									"\r",
									"//set environment variables\r",
									"pm.environment.set(\"uuid_uploads_tests\", jsonData.data.attributes.guid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads"
							]
						}
					},
					"response": []
				},
				{
					"name": "/uploads/{uuid} with guid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Upload guid matches\", function () {\r",
									"    pm.expect(jsonData.data.attributes.guid).to.eql(pm.environment.get(\"uuid_uploads_tests\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Upload is pending\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"pending\");\r",
									"});\r",
									"\r",
									"pm.test(\"Location is null\", function () {\r",
									"    pm.expect(jsonData.data.attributes.location).to.eql(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads/{{uuid_uploads_tests}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"{{uuid_uploads_tests}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/uploads/{uuid} invalid guid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 404 not found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error is an array of length 1\", function () {\r",
									"    pm.expect(jsonData.errors).to.be.length(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Detail explains non_existent_guid was not found\", function () {\r",
									"    pm.expect(jsonData.errors[0].detail).to.match(/non_existent_guid/);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads/non_existent_guid",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"non_existent_guid"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Valid",
			"item": [
				{
					"name": "/uploads/ - location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"pm.test(\"Status is pending\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"pending\");\r",
									"});\r",
									"\r",
									"\r",
									"//set environment variables\r",
									"pm.environment.set(\"upload_location\", jsonData.data.attributes.location);\r",
									"pm.environment.set(\"uuid_valid\", jsonData.data.attributes.guid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads"
							]
						}
					},
					"response": []
				},
				{
					"name": "/paths - upload valid document to location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "metadata",
									"contentType": "application/json",
									"type": "file",
									"src": "valid_metadata.json"
								},
								{
									"key": "content",
									"contentType": "application/pdf",
									"type": "file",
									"src": "valid_doc.pdf"
								},
								{
									"key": "attachment1",
									"type": "file",
									"src": "valid_doc.pdf"
								},
								{
									"key": "attachment2",
									"type": "file",
									"src": "valid_doc.pdf"
								}
							]
						},
						"url": {
							"raw": "{{upload_location}}",
							"host": [
								"{{upload_location}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Missing First",
			"item": [
				{
					"name": "/uploads/ - location missing first name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"pm.test(\"Status is pending\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"pending\");\r",
									"});\r",
									"\r",
									"\r",
									"//set environment variables\r",
									"pm.environment.set(\"upload_location\", jsonData.data.attributes.location);\r",
									"pm.environment.set(\"uuid_missing_first_name\", jsonData.data.attributes.guid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads"
							]
						}
					},
					"response": []
				},
				{
					"name": "/paths - upload missing first name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "metadata",
									"contentType": "application/json",
									"type": "file",
									"src": "missing_first_metadata.json"
								},
								{
									"key": "content",
									"contentType": "application/pdf",
									"type": "file",
									"src": "valid_doc.pdf"
								},
								{
									"key": "attachment1",
									"type": "file",
									"src": "valid_doc.pdf"
								}
							]
						},
						"url": {
							"raw": "{{upload_location}}",
							"host": [
								"{{upload_location}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Missing Last",
			"item": [
				{
					"name": "/uploads/ - location missing last name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"pm.test(\"Status is pending\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"pending\");\r",
									"});\r",
									"\r",
									"\r",
									"//set environment variables\r",
									"pm.environment.set(\"upload_location\", jsonData.data.attributes.location);\r",
									"pm.environment.set(\"uuid_missing_last_name\", jsonData.data.attributes.guid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads"
							]
						}
					},
					"response": []
				},
				{
					"name": "/paths - upload missing last name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "metadata",
									"contentType": "application/json",
									"type": "file",
									"src": "missing_last_metadata.json"
								},
								{
									"key": "content",
									"contentType": "application/pdf",
									"type": "file",
									"src": "valid_doc.pdf"
								},
								{
									"key": "attachment1",
									"type": "file",
									"src": "valid_doc.pdf"
								}
							]
						},
						"url": {
							"raw": "{{upload_location}}",
							"host": [
								"{{upload_location}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Digits First",
			"item": [
				{
					"name": "/uploads/ - location digits first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"pm.test(\"Status is pending\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"pending\");\r",
									"});\r",
									"\r",
									"\r",
									"//set environment variables\r",
									"pm.environment.set(\"upload_location\", jsonData.data.attributes.location);\r",
									"pm.environment.set(\"uuid_digits_first\", jsonData.data.attributes.guid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads"
							]
						}
					},
					"response": []
				},
				{
					"name": "/paths - upload digits first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "metadata",
									"contentType": "application/json",
									"type": "file",
									"src": "bad_with_digits_first_metadata.json"
								},
								{
									"key": "content",
									"contentType": "application/pdf",
									"type": "file",
									"src": "valid_doc.pdf"
								},
								{
									"key": "attachment1",
									"type": "file",
									"src": "valid_doc.pdf"
								}
							]
						},
						"url": {
							"raw": "{{upload_location}}",
							"host": [
								"{{upload_location}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Funky Characters Last",
			"item": [
				{
					"name": "/uploads/ - location funky characters last",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"pm.test(\"Status is pending\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"pending\");\r",
									"});\r",
									"\r",
									"\r",
									"//set environment variables\r",
									"pm.environment.set(\"upload_location\", jsonData.data.attributes.location);\r",
									"pm.environment.set(\"uuid_funky_characters_last\", jsonData.data.attributes.guid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads"
							]
						}
					},
					"response": []
				},
				{
					"name": "/paths - upload funky characters last",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "metadata",
									"contentType": "application/json",
									"type": "file",
									"src": "bad_with_funky_characters_last_metadata.json"
								},
								{
									"key": "content",
									"contentType": "application/pdf",
									"type": "file",
									"src": "valid_doc.pdf"
								},
								{
									"key": "attachment1",
									"type": "file",
									"src": "valid_doc.pdf"
								}
							]
						},
						"url": {
							"raw": "{{upload_location}}",
							"host": [
								"{{upload_location}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Dashes Slashes First Last",
			"item": [
				{
					"name": "/uploads/ - location dashes slashes first last",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"pm.test(\"Status is pending\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"pending\");\r",
									"});\r",
									"\r",
									"\r",
									"//set environment variables\r",
									"pm.environment.set(\"upload_location\", jsonData.data.attributes.location);\r",
									"pm.environment.set(\"uuid_dashes_slashes\", jsonData.data.attributes.guid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads"
							]
						}
					},
					"response": []
				},
				{
					"name": "/paths - upload dashes slashes first last",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "metadata",
									"contentType": "application/json",
									"type": "file",
									"src": "dashes_slashes_first_last_metadata.json"
								},
								{
									"key": "content",
									"contentType": "application/pdf",
									"type": "file",
									"src": "valid_doc.pdf"
								},
								{
									"key": "attachment1",
									"type": "file",
									"src": "valid_doc.pdf"
								}
							]
						},
						"url": {
							"raw": "{{upload_location}}",
							"host": [
								"{{upload_location}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Name too long",
			"item": [
				{
					"name": "/uploads/ - location name too long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"pm.test(\"Status is pending\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"pending\");\r",
									"});\r",
									"\r",
									"\r",
									"//set environment variables\r",
									"pm.environment.set(\"upload_location\", jsonData.data.attributes.location);\r",
									"pm.environment.set(\"uuid_name_too_long\", jsonData.data.attributes.guid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads"
							]
						}
					},
					"response": []
				},
				{
					"name": "/paths - upload name too long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "metadata",
									"contentType": "application/json",
									"type": "file",
									"src": "name_too_long_metadata.json.erb"
								},
								{
									"key": "content",
									"contentType": "application/pdf",
									"type": "file",
									"src": "valid_doc.pdf"
								},
								{
									"key": "attachment1",
									"type": "file",
									"src": "valid_doc.pdf"
								}
							]
						},
						"url": {
							"raw": "{{upload_location}}",
							"host": [
								"{{upload_location}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Space in name",
			"item": [
				{
					"name": "/uploads/ - location space in name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"pm.test(\"Status is pending\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"pending\");\r",
									"});\r",
									"\r",
									"\r",
									"//set environment variables\r",
									"pm.environment.set(\"upload_location\", jsonData.data.attributes.location);\r",
									"pm.environment.set(\"uuid_space_in_name\", jsonData.data.attributes.guid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads"
							]
						}
					},
					"response": []
				},
				{
					"name": "/paths - upload space in name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "metadata",
									"contentType": "application/json",
									"type": "file",
									"src": "valid_metadata_space_in_name.json"
								},
								{
									"key": "content",
									"contentType": "application/pdf",
									"type": "file",
									"src": "valid_doc.pdf"
								},
								{
									"key": "attachment1",
									"type": "file",
									"src": "valid_doc.pdf"
								}
							]
						},
						"url": {
							"raw": "{{upload_location}}",
							"host": [
								"{{upload_location}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Attachment oversized",
			"item": [
				{
					"name": "/uploads/ - location attachment oversized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"pm.test(\"Status is pending\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"pending\");\r",
									"});\r",
									"\r",
									"\r",
									"//set environment variables\r",
									"pm.environment.set(\"upload_location\", jsonData.data.attributes.location);\r",
									"pm.environment.set(\"uuid_attachment_oversized\", jsonData.data.attributes.guid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads"
							]
						}
					},
					"response": []
				},
				{
					"name": "/paths - upload attachment oversized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "metadata",
									"contentType": "application/json",
									"type": "file",
									"src": "valid_metadata.json"
								},
								{
									"key": "content",
									"contentType": "application/pdf",
									"type": "file",
									"src": "valid_doc.pdf"
								},
								{
									"key": "attachment1",
									"type": "file",
									"src": "10x102.pdf"
								},
								{
									"key": "attachment2",
									"type": "file",
									"src": "valid_doc.pdf"
								}
							]
						},
						"url": {
							"raw": "{{upload_location}}",
							"host": [
								"{{upload_location}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Content missing",
			"item": [
				{
					"name": "/uploads/ - location content missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"pm.test(\"Status is pending\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"pending\");\r",
									"});\r",
									"\r",
									"\r",
									"//set environment variables\r",
									"pm.environment.set(\"upload_location\", jsonData.data.attributes.location);\r",
									"pm.environment.set(\"uuid_content_missing\", jsonData.data.attributes.guid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads"
							]
						}
					},
					"response": []
				},
				{
					"name": "/paths - upload content missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "metadata",
									"contentType": "application/json",
									"type": "file",
									"src": "valid_metadata.json"
								},
								{
									"key": "content",
									"value": "",
									"contentType": "application/pdf",
									"type": "text"
								},
								{
									"key": "attachment1",
									"type": "file",
									"src": "valid_doc.pdf"
								}
							]
						},
						"url": {
							"raw": "{{upload_location}}",
							"host": [
								"{{upload_location}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Attachment missing",
			"item": [
				{
					"name": "/uploads/ - location attachment missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"pm.test(\"Status is pending\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"pending\");\r",
									"});\r",
									"\r",
									"\r",
									"//set environment variables\r",
									"pm.environment.set(\"upload_location\", jsonData.data.attributes.location);\r",
									"pm.environment.set(\"uuid_attachment_missing\", jsonData.data.attributes.guid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads"
							]
						}
					},
					"response": []
				},
				{
					"name": "/paths - upload attachment missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "metadata",
									"contentType": "application/json",
									"type": "file",
									"src": "valid_metadata.json"
								},
								{
									"key": "content",
									"contentType": "application/pdf",
									"type": "file",
									"src": "valid_doc.pdf"
								},
								{
									"key": "attachment1",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{upload_location}}",
							"host": [
								"{{upload_location}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Locked Content",
			"item": [
				{
					"name": "/uploads/ - location locked content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"pm.test(\"Status is pending\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"pending\");\r",
									"});\r",
									"\r",
									"\r",
									"//set environment variables\r",
									"pm.environment.set(\"upload_location\", jsonData.data.attributes.location);\r",
									"pm.environment.set(\"uuid_locked_content\", jsonData.data.attributes.guid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads"
							]
						}
					},
					"response": []
				},
				{
					"name": "/paths - upload locked content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "metadata",
									"contentType": "application/json",
									"type": "file",
									"src": "valid_metadata.json"
								},
								{
									"key": "content",
									"contentType": "application/pdf",
									"type": "file",
									"src": "locked.pdf"
								}
							]
						},
						"url": {
							"raw": "{{upload_location}}",
							"host": [
								"{{upload_location}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Locked attachment",
			"item": [
				{
					"name": "/uploads/ - location locked attachment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"pm.test(\"Status is pending\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"pending\");\r",
									"});\r",
									"\r",
									"\r",
									"//set environment variables\r",
									"pm.environment.set(\"upload_location\", jsonData.data.attributes.location);\r",
									"pm.environment.set(\"uuid_locked_attachment\", jsonData.data.attributes.guid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads"
							]
						}
					},
					"response": []
				},
				{
					"name": "/paths - upload locked attachment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "metadata",
									"contentType": "application/json",
									"type": "file",
									"src": "valid_metadata.json"
								},
								{
									"key": "content",
									"contentType": "application/pdf",
									"type": "file",
									"src": "valid_doc.pdf"
								},
								{
									"key": "attachment1",
									"type": "file",
									"src": "locked.pdf"
								}
							]
						},
						"url": {
							"raw": "{{upload_location}}",
							"host": [
								"{{upload_location}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Non pdf doc",
			"item": [
				{
					"name": "/uploads/ - location non pdf doc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"pm.test(\"Status is pending\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"pending\");\r",
									"});\r",
									"\r",
									"\r",
									"//set environment variables\r",
									"pm.environment.set(\"upload_location\", jsonData.data.attributes.location);\r",
									"pm.environment.set(\"uuid_non_pdf_doc\", jsonData.data.attributes.guid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads"
							]
						}
					},
					"response": []
				},
				{
					"name": "/paths - upload non pdf doc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "metadata",
									"contentType": "application/json",
									"type": "file",
									"src": "valid_metadata.json"
								},
								{
									"key": "content",
									"contentType": "application/pdf",
									"type": "file",
									"src": "valid_metadata.json"
								}
							]
						},
						"url": {
							"raw": "{{upload_location}}",
							"host": [
								"{{upload_location}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/uploads/{uuid} all",
			"item": [
				{
					"name": "/uploads/{uuid} valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Upload is uploaded or received\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.be.oneOf([\"received\", \"uploaded\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Total documents is 3\", function () {\r",
									"    pm.expect(jsonData.data.attributes.uploaded_pdf.total_documents).to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Content oversized_pdf is false\", function () {\r",
									"    pm.expect(jsonData.data.attributes.uploaded_pdf.content.dimensions.oversized_pdf).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Attachment 1 oversized_pdf is false\", function () {\r",
									"    pm.expect(jsonData.data.attributes.uploaded_pdf.content.attachments[0].dimensions.oversized_pdf).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Attachment 2 oversized_pdf is false\", function () {\r",
									"    pm.expect(jsonData.data.attributes.uploaded_pdf.content.attachments[1].dimensions.oversized_pdf).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//set delay so files have time to upload\r",
									"setTimeout(function(){}, pm.environment.get(\"upload_delay_ms\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads/{{uuid_valid}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"{{uuid_valid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/uploads/{uuid} missing first name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Error is displayed\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"error\");\r",
									"    pm.expect(jsonData.data.attributes.code).to.eql(\"DOC102\");\r",
									"    pm.expect(jsonData.data.attributes.detail).to.match(/^Invalid Veteran name/);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads/{{uuid_missing_first_name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"{{uuid_missing_first_name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/uploads/{uuid} missing last name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Error is displayed\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"error\");\r",
									"    pm.expect(jsonData.data.attributes.code).to.eql(\"DOC102\");\r",
									"    pm.expect(jsonData.data.attributes.detail).to.match(/^Invalid Veteran name/);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads/{{uuid_missing_last_name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"{{uuid_missing_last_name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/uploads/{uuid} digits first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Error is displayed\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"error\");\r",
									"    pm.expect(jsonData.data.attributes.code).to.eql(\"DOC102\");\r",
									"    pm.expect(jsonData.data.attributes.detail).to.match(/^Invalid Veteran name/);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads/{{uuid_digits_first}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"{{uuid_digits_first}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/uploads/{uuid} funky characters last",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Error is displayed\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"error\");\r",
									"    pm.expect(jsonData.data.attributes.code).to.eql(\"DOC102\");\r",
									"    pm.expect(jsonData.data.attributes.detail).to.match(/^Invalid Veteran name/);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads/{{uuid_funky_characters_last}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"{{uuid_funky_characters_last}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/uploads/{uuid} dashes slashes first last",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Upload is uploaded or received\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.be.oneOf([\"received\", \"uploaded\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Total documents is 2\", function () {\r",
									"    pm.expect(jsonData.data.attributes.uploaded_pdf.total_documents).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Content oversized_pdf is false\", function () {\r",
									"    pm.expect(jsonData.data.attributes.uploaded_pdf.content.dimensions.oversized_pdf).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Attachment 1 oversized_pdf is false\", function () {\r",
									"    pm.expect(jsonData.data.attributes.uploaded_pdf.content.attachments[0].dimensions.oversized_pdf).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads/{{uuid_dashes_slashes}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"{{uuid_dashes_slashes}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/uploads/{uuid} name too long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Error is displayed\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"error\");\r",
									"    pm.expect(jsonData.data.attributes.code).to.eql(\"DOC102\");\r",
									"    pm.expect(jsonData.data.attributes.detail).to.match(/^Invalid Veteran name/);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads/{{uuid_name_too_long}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"{{uuid_name_too_long}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/uploads/{uuid} space in name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Upload is uploaded or received\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.be.oneOf([\"received\", \"uploaded\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Total documents is 2\", function () {\r",
									"    pm.expect(jsonData.data.attributes.uploaded_pdf.total_documents).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Content oversized_pdf is false\", function () {\r",
									"    pm.expect(jsonData.data.attributes.uploaded_pdf.content.dimensions.oversized_pdf).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Attachment 1 oversized_pdf is false\", function () {\r",
									"    pm.expect(jsonData.data.attributes.uploaded_pdf.content.attachments[0].dimensions.oversized_pdf).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads/{{uuid_space_in_name}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"{{uuid_space_in_name}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/uploads/{uuid} attachment oversized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Upload status is error\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Total documents is 3\", function () {\r",
									"    pm.expect(jsonData.data.attributes.uploaded_pdf.total_documents).to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Content oversized_pdf is false\", function () {\r",
									"    pm.expect(jsonData.data.attributes.uploaded_pdf.content.dimensions.oversized_pdf).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"Attachment 1 oversized_pdf is true\", function () {\r",
									"    pm.expect(jsonData.data.attributes.uploaded_pdf.content.attachments[0].dimensions.oversized_pdf).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Attachment 2 oversized_pdf is false\", function () {\r",
									"    pm.expect(jsonData.data.attributes.uploaded_pdf.content.attachments[1].dimensions.oversized_pdf).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads/{{uuid_attachment_oversized}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"{{uuid_attachment_oversized}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/uploads/{uuid} content missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Error is displayed\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"error\");\r",
									"    pm.expect(jsonData.data.attributes.code).to.eql(\"DOC103\");\r",
									"    pm.expect(jsonData.data.attributes.detail).to.eql(\"Invalid PDF content, part content\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads/{{uuid_content_missing}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"{{uuid_content_missing}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/uploads/{uuid} attachment missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Error is displayed\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"error\");\r",
									"    pm.expect(jsonData.data.attributes.code).to.eql(\"DOC101\");\r",
									"    pm.expect(jsonData.data.attributes.detail).to.eql(\"Missing content-type header\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads/{{uuid_attachment_missing}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"{{uuid_attachment_missing}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/uploads/{uuid} locked content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Error is displayed\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"error\");\r",
									"    pm.expect(jsonData.data.attributes.code).to.eql(\"DOC103\");\r",
									"    pm.expect(jsonData.data.attributes.detail).to.eql(\"Invalid PDF content, part content\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads/{{uuid_locked_content}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"{{uuid_locked_content}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/uploads/{uuid} locked attachment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Error is displayed\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"error\");\r",
									"    pm.expect(jsonData.data.attributes.code).to.eql(\"DOC103\");\r",
									"    pm.expect(jsonData.data.attributes.detail).to.eql(\"Invalid PDF content, part attachment1\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads/{{uuid_locked_attachment}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"{{uuid_locked_attachment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/uploads/{uuid} non pdf doc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Error is displayed\", function () {\r",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"error\");\r",
									"    pm.expect(jsonData.data.attributes.code).to.eql(\"DOC103\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{apikey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "apikey",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads/{{uuid_non_pdf_doc}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"{{uuid_non_pdf_doc}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "/uploads/validate_document",
			"item": [
				{
					"name": "/uploads/validate_document - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Data type is documentValidation\", function () {",
									"    pm.expect(jsonData.data.type).to.eql(\"documentValidation\");",
									"});",
									"",
									"pm.test(\"Response status is valid\", function () {",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"valid\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "valid_doc.pdf"
							}
						},
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads/validate_document",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"validate_document"
							]
						}
					},
					"response": []
				},
				{
					"name": "/uploads/validate_document - Not a PDF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Detailed error is provided\", function () {",
									"    const error = jsonData.errors[0];",
									"",
									"    pm.expect(error.title).to.eql(\"Document failed validation\");",
									"    pm.expect(error.detail).to.eql(\"Document is not a PDF\");",
									"    pm.expect(error.status).to.eql(\"422\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "valid_metadata.json"
							}
						},
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads/validate_document",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"validate_document"
							]
						}
					},
					"response": []
				},
				{
					"name": "/uploads/validate_document - Not Provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Detailed error is provided\", function () {",
									"    const error = jsonData.errors[0];",
									"",
									"    pm.expect(error.title).to.eql(\"Document failed validation\");",
									"    pm.expect(error.detail).to.eql(\"Document was not provided\");",
									"    pm.expect(error.status).to.eql(\"422\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "file",
							"file": {}
						},
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads/validate_document",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"validate_document"
							]
						}
					},
					"response": []
				},
				{
					"name": "/uploads/validate_document - File Oversized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Detailed error is provided\", function () {",
									"    const error = jsonData.errors[0];",
									"",
									"    pm.expect(error.title).to.eql(\"Document failed validation\");",
									"    pm.expect(error.detail).to.eql(\"Document exceeds the file size limit of 100 MB\");",
									"    pm.expect(error.status).to.eql(\"422\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "large_file.pdf"
							}
						},
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads/validate_document",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"validate_document"
							]
						}
					},
					"response": []
				},
				{
					"name": "/uploads/validate_document - Page Oversized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Detailed error is provided\", function () {",
									"    const error = jsonData.errors[0];",
									"",
									"    pm.expect(error.title).to.eql(\"Document failed validation\");",
									"    pm.expect(error.detail).to.eql(\"Document exceeds the page size limit of 78 in. x 101 in.\");",
									"    pm.expect(error.status).to.eql(\"422\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "10x102.pdf"
							}
						},
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads/validate_document",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"validate_document"
							]
						}
					},
					"response": []
				},
				{
					"name": "/uploads/validate_document - User Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Detailed error is provided\", function () {",
									"    const error = jsonData.errors[0];",
									"",
									"    pm.expect(error.title).to.eql(\"Document failed validation\");",
									"    pm.expect(error.detail).to.eql(\"Document is locked with a user password\");",
									"    pm.expect(error.status).to.eql(\"422\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "locked.pdf"
							}
						},
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads/validate_document",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"validate_document"
							]
						}
					},
					"response": []
				},
				{
					"name": "/uploads/validate_document - Owner Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Data type is documentValidation\", function () {",
									"    pm.expect(jsonData.data.type).to.eql(\"documentValidation\");",
									"});",
									"",
									"pm.test(\"Response status is valid\", function () {",
									"    pm.expect(jsonData.data.attributes.status).to.eql(\"valid\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "encrypted.pdf"
							}
						},
						"url": {
							"raw": "{{host}}/services/vba_documents/{{version}}/uploads/validate_document",
							"host": [
								"{{host}}"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"validate_document"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get a bulk status report for a list of previous uploads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"var uuidTested;\r",
							"var i;\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"//Valid document tests\r",
							"uuidTested = false;\r",
							"for(i = 0; i < jsonData.data.length; i++){\r",
							"    if (jsonData.data[i].id == pm.environment.get(\"uuid_valid\")){\r",
							"        uuidTested = true;\r",
							"        pm.test(\"Valid upload is correct\", function () {\r",
							"            pm.expect(jsonData.data[i].attributes.status).to.be.oneOf([\"received\", \"uploaded\"]);\r",
							"            pm.expect(jsonData.data[i].attributes.uploaded_pdf.total_documents).to.eql(3);\r",
							"            pm.expect(jsonData.data[i].attributes.uploaded_pdf.content.dimensions.oversized_pdf).to.eql(false);\r",
							"            pm.expect(jsonData.data[i].attributes.uploaded_pdf.content.attachments[0].dimensions.oversized_pdf).to.eql(false);\r",
							"            pm.expect(jsonData.data[i].attributes.uploaded_pdf.content.attachments[1].dimensions.oversized_pdf).to.eql(false);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"pm.test(\"Valid upload was tested\", function () {\r",
							"    pm.expect(uuidTested).to.eql(true);\r",
							"});\r",
							"\r",
							"\r",
							"//missing first name document tests\r",
							"uuidTested = false;\r",
							"for(i = 0; i < jsonData.data.length; i++){\r",
							"    if (jsonData.data[i].id == pm.environment.get(\"uuid_missing_first_name\")){\r",
							"        uuidTested = true;\r",
							"        pm.test(\"Missing first name error is displayed correctly\", function() {\r",
							"            pm.expect(jsonData.data[i].attributes.status).to.eql(\"error\");\r",
							"            pm.expect(jsonData.data[i].attributes.code).to.eql(\"DOC102\");\r",
							"            pm.expect(jsonData.data[i].attributes.detail).to.match(/^Invalid Veteran name/);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"pm.test(\"Missing first name upload was tested\", function () {\r",
							"    pm.expect(uuidTested).to.eql(true);\r",
							"});\r",
							"    \r",
							"\r",
							"//missing last name document tests\r",
							"uuidTested = false;\r",
							"for(i = 0; i < jsonData.data.length; i++){\r",
							"    if (jsonData.data[i].id == pm.environment.get(\"uuid_missing_last_name\")){\r",
							"        uuidTested = true;\r",
							"        pm.test(\"Missing last name error is displayed correctly\", function() {\r",
							"            pm.expect(jsonData.data[i].attributes.status).to.eql(\"error\");\r",
							"            pm.expect(jsonData.data[i].attributes.code).to.eql(\"DOC102\");\r",
							"            pm.expect(jsonData.data[i].attributes.detail).to.match(/^Invalid Veteran name/);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"pm.test(\"Missing last name upload was tested\", function () {\r",
							"    pm.expect(uuidTested).to.eql(true);\r",
							"});\r",
							"    \r",
							"\r",
							"//digits first document tests\r",
							"uuidTested = false;\r",
							"for(i = 0; i < jsonData.data.length; i++){\r",
							"    if (jsonData.data[i].id == pm.environment.get(\"uuid_digits_first\")){\r",
							"        uuidTested = true;\r",
							"        pm.test(\"Digits first error is displayed correctly\", function() {\r",
							"            pm.expect(jsonData.data[i].attributes.status).to.eql(\"error\");\r",
							"            pm.expect(jsonData.data[i].attributes.code).to.eql(\"DOC102\");\r",
							"            pm.expect(jsonData.data[i].attributes.detail).to.match(/^Invalid Veteran name/);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"pm.test(\"Digits first upload was tested\", function () {\r",
							"    pm.expect(uuidTested).to.eql(true);\r",
							"});\r",
							"    \r",
							"    \r",
							"//funky characters last document tests\r",
							"uuidTested = false;\r",
							"for(i = 0; i < jsonData.data.length; i++){\r",
							"    if (jsonData.data[i].id == pm.environment.get(\"uuid_funky_characters_last\")){\r",
							"        uuidTested = true;\r",
							"        pm.test(\"Funky characters last error is displayed correctly\", function() {\r",
							"            pm.expect(jsonData.data[i].attributes.status).to.eql(\"error\");\r",
							"            pm.expect(jsonData.data[i].attributes.code).to.eql(\"DOC102\");\r",
							"            pm.expect(jsonData.data[i].attributes.detail).to.match(/^Invalid Veteran name/);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"pm.test(\"Funky characters last upload was tested\", function () {\r",
							"    pm.expect(uuidTested).to.eql(true);\r",
							"});\r",
							"\r",
							"\r",
							"//dashes slashes first last document tests\r",
							"uuidTested = false;\r",
							"for(i = 0; i < jsonData.data.length; i++){\r",
							"    if (jsonData.data[i].id == pm.environment.get(\"uuid_dashes_slashes\")){\r",
							"        uuidTested = true;\r",
							"        pm.test(\"Dashes slashes first last is correct\", function () {\r",
							"            pm.expect(jsonData.data[i].attributes.status).to.be.oneOf([\"received\", \"uploaded\"]);\r",
							"            pm.expect(jsonData.data[i].attributes.uploaded_pdf.total_documents).to.eql(2);\r",
							"            pm.expect(jsonData.data[i].attributes.uploaded_pdf.content.dimensions.oversized_pdf).to.eql(false);\r",
							"            pm.expect(jsonData.data[i].attributes.uploaded_pdf.content.attachments[0].dimensions.oversized_pdf).to.eql(false);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"pm.test(\"Dashes slashes first last was tested\", function () {\r",
							"    pm.expect(uuidTested).to.eql(true);\r",
							"});\r",
							"\r",
							"\r",
							"//name too long last document tests\r",
							"uuidTested = false;\r",
							"for(i = 0; i < jsonData.data.length; i++){\r",
							"    if (jsonData.data[i].id == pm.environment.get(\"uuid_name_too_long\")){\r",
							"        uuidTested = true;\r",
							"        pm.test(\"Name too long error is displayed correctly\", function() {\r",
							"            pm.expect(jsonData.data[i].attributes.status).to.eql(\"error\");\r",
							"            pm.expect(jsonData.data[i].attributes.code).to.eql(\"DOC102\");\r",
							"            pm.expect(jsonData.data[i].attributes.detail).to.match(/^Invalid Veteran name/);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"pm.test(\"Name too long upload was tested\", function () {\r",
							"    pm.expect(uuidTested).to.eql(true);\r",
							"});\r",
							"\r",
							"\r",
							"//Space in name document tests\r",
							"uuidTested = false;\r",
							"for(i = 0; i < jsonData.data.length; i++){\r",
							"    if (jsonData.data[i].id == pm.environment.get(\"uuid_space_in_name\")){\r",
							"        uuidTested = true;\r",
							"        pm.test(\"Space in name is correct\", function () {\r",
							"            pm.expect(jsonData.data[i].attributes.status).to.be.oneOf([\"received\", \"uploaded\"]);\r",
							"            pm.expect(jsonData.data[i].attributes.uploaded_pdf.total_documents).to.eql(2);\r",
							"            pm.expect(jsonData.data[i].attributes.uploaded_pdf.content.dimensions.oversized_pdf).to.eql(false);\r",
							"            pm.expect(jsonData.data[i].attributes.uploaded_pdf.content.attachments[0].dimensions.oversized_pdf).to.eql(false);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"pm.test(\"Space in name was tested\", function () {\r",
							"    pm.expect(uuidTested).to.eql(true);\r",
							"});\r",
							"\r",
							"\r",
							"//Attachment Oversized document tests\r",
							"uuidTested = false;\r",
							"for(i = 0; i < jsonData.data.length; i++){\r",
							"    if (jsonData.data[i].id == pm.environment.get(\"uuid_attachment_oversized\")){\r",
							"        uuidTested = true;\r",
							"        pm.test(\"Attachment oversized error is displayed\", function () {\r",
							"            pm.expect(jsonData.data[i].attributes.status).to.eql(\"error\");\r",
							"            pm.expect(jsonData.data[i].attributes.uploaded_pdf.total_documents).to.eql(3);\r",
							"            pm.expect(jsonData.data[i].attributes.uploaded_pdf.content.dimensions.oversized_pdf).to.eql(false);\r",
							"            pm.expect(jsonData.data[i].attributes.uploaded_pdf.content.attachments[0].dimensions.oversized_pdf).to.eql(true);\r",
							"            pm.expect(jsonData.data[i].attributes.uploaded_pdf.content.attachments[1].dimensions.oversized_pdf).to.eql(false);\r",
							"        });\r",
							"    }\r",
							"}\r",
							"pm.test(\"Attachment oversized was tested\", function () {\r",
							"    pm.expect(uuidTested).to.eql(true);\r",
							"});\r",
							"\r",
							"\r",
							"//Content missing document tests\r",
							"uuidTested = false;\r",
							"for(i = 0; i < jsonData.data.length; i++){\r",
							"    if (jsonData.data[i].id == pm.environment.get(\"uuid_content_missing\")){\r",
							"        uuidTested = true;\r",
							"        pm.test(\"Content missing error is displayed\", function () {\r",
							"            pm.expect(jsonData.data[i].attributes.status).to.eql(\"error\");\r",
							"            pm.expect(jsonData.data[i].attributes.code).to.eql(\"DOC103\");\r",
							"            pm.expect(jsonData.data[i].attributes.detail).to.eql(\"Invalid PDF content, part content\");\r",
							"        });\r",
							"    }\r",
							"}\r",
							"pm.test(\"Content missing was tested\", function () {\r",
							"    pm.expect(uuidTested).to.eql(true);\r",
							"});\r",
							"\r",
							"\r",
							"//Attachment missing document tests\r",
							"uuidTested = false;\r",
							"for(i = 0; i < jsonData.data.length; i++){\r",
							"    if (jsonData.data[i].id == pm.environment.get(\"uuid_attachment_missing\")){\r",
							"        uuidTested = true;\r",
							"        pm.test(\"Attachment missing error is displayed\", function () {\r",
							"            pm.expect(jsonData.data[i].attributes.status).to.eql(\"error\");\r",
							"            pm.expect(jsonData.data[i].attributes.code).to.eql(\"DOC101\");\r",
							"            pm.expect(jsonData.data[i].attributes.detail).to.eql(\"Missing content-type header\");\r",
							"        });\r",
							"    }\r",
							"}\r",
							"pm.test(\"Attachment missing was tested\", function () {\r",
							"    pm.expect(uuidTested).to.eql(true);\r",
							"});\r",
							"\r",
							"\r",
							"//Locked content document tests\r",
							"uuidTested = false;\r",
							"for(i = 0; i < jsonData.data.length; i++){\r",
							"    if (jsonData.data[i].id == pm.environment.get(\"uuid_locked_content\")){\r",
							"        uuidTested = true;\r",
							"        pm.test(\"Locked content error is displayed\", function () {\r",
							"            pm.expect(jsonData.data[i].attributes.status).to.eql(\"error\");\r",
							"            pm.expect(jsonData.data[i].attributes.code).to.eql(\"DOC103\");\r",
							"            pm.expect(jsonData.data[i].attributes.detail).to.eql(\"Invalid PDF content, part content\");\r",
							"        });\r",
							"    }\r",
							"}\r",
							"pm.test(\"Locked content was tested\", function () {\r",
							"    pm.expect(uuidTested).to.eql(true);\r",
							"});\r",
							"\r",
							"\r",
							"//Locked attachment document tests\r",
							"uuidTested = false;\r",
							"for(i = 0; i < jsonData.data.length; i++){\r",
							"    if (jsonData.data[i].id == pm.environment.get(\"uuid_locked_attachment\")){\r",
							"        uuidTested = true;\r",
							"        pm.test(\"Locked attachment error is displayed\", function () {\r",
							"            pm.expect(jsonData.data[i].attributes.status).to.eql(\"error\");\r",
							"            pm.expect(jsonData.data[i].attributes.code).to.eql(\"DOC103\");\r",
							"            pm.expect(jsonData.data[i].attributes.detail).to.eql(\"Invalid PDF content, part attachment1\");\r",
							"        });\r",
							"    }\r",
							"}\r",
							"pm.test(\"Locked attachment was tested\", function () {\r",
							"    pm.expect(uuidTested).to.eql(true);\r",
							"});\r",
							"\r",
							"\r",
							"//Non pdf document tests\r",
							"uuidTested = false;\r",
							"for(i = 0; i < jsonData.data.length; i++){\r",
							"    if (jsonData.data[i].id == pm.environment.get(\"uuid_non_pdf_doc\")){\r",
							"        uuidTested = true;\r",
							"        pm.test(\"Non pdf doc error is displayed\", function () {\r",
							"            pm.expect(jsonData.data[i].attributes.status).to.eql(\"error\");\r",
							"            pm.expect(jsonData.data[i].attributes.code).to.eql(\"DOC103\");\r",
							"        });\r",
							"    }\r",
							"}\r",
							"pm.test(\"Non pdf doc was tested\", function () {\r",
							"    pm.expect(uuidTested).to.eql(true);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{apikey}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "apikey",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "apikey",
						"value": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"ids\": [\n        \"{{uuid_valid}}\",\n        \"{{uuid_missing_first_name}}\",\n        \"{{uuid_missing_last_name}}\",\n        \"{{uuid_digits_first}}\",\n        \"{{uuid_funky_characters_last}}\",\n        \"{{uuid_dashes_slashes}}\",\n        \"{{uuid_name_too_long}}\",\n        \"{{uuid_space_in_name}}\",\n        \"{{uuid_attachment_oversized}}\",\n        \"{{uuid_content_missing}}\",\n        \"{{uuid_attachment_missing}}\",\n        \"{{uuid_locked_content}}\",\n        \"{{uuid_locked_attachment}}\",\n        \"{{uuid_non_pdf_doc}}\"\n    ]\n}"
				},
				"url": {
					"raw": "{{host}}/services/vba_documents/{{version}}/uploads/report",
					"host": [
						"{{host}}"
					],
					"path": [
						"services",
						"vba_documents",
						"{{version}}",
						"uploads",
						"report"
					]
				}
			},
			"response": [
				{
					"name": "Bad Request - invalid or missing list of guids",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ids\": [\n        \"6d8433c1-cd55-4c24-affd-f592287a7572\"\n    ]\n}"
						},
						"url": {
							"raw": "https://sandbox-api.va.gov/services/vba_documents/{{version}}/uploads/report",
							"protocol": "https",
							"host": [
								"sandbox-api",
								"va",
								"gov"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"report"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Unauthorized Request",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ids\": [\n        \"6d8433c1-cd55-4c24-affd-f592287a7572\"\n    ]\n}"
						},
						"url": {
							"raw": "https://sandbox-api.va.gov/services/vba_documents/{{version}}/uploads/report",
							"protocol": "https",
							"host": [
								"sandbox-api",
								"va",
								"gov"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"report"
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Bad API Token",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ids\": [\n        \"6d8433c1-cd55-4c24-affd-f592287a7572\"\n    ]\n}"
						},
						"url": {
							"raw": "https://sandbox-api.va.gov/services/vba_documents/{{version}}/uploads/report",
							"protocol": "https",
							"host": [
								"sandbox-api",
								"va",
								"gov"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"report"
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "unexpected error",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ids\": [\n        \"6d8433c1-cd55-4c24-affd-f592287a7572\"\n    ]\n}"
						},
						"url": {
							"raw": "https://sandbox-api.va.gov/services/vba_documents/{{version}}/uploads/report",
							"protocol": "https",
							"host": [
								"sandbox-api",
								"va",
								"gov"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"report"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"errors\": [\n  {\n   \"status\": -31480750,\n   \"details\": \"DOC104 - Upload rejected by downstream system.\"\n  },\n  {\n   \"status\": -43800033,\n   \"details\": \"DOC104 - Upload rejected by downstream system.\"\n  }\n ]\n}"
				},
				{
					"name": "Upload status report retrieved successfully",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ids\": [\n        \"6d8433c1-cd55-4c24-affd-f592287a7572\"\n    ]\n}"
						},
						"url": {
							"raw": "https://sandbox-api.va.gov/services/vba_documents/{{version}}/uploads/report",
							"protocol": "https",
							"host": [
								"sandbox-api",
								"va",
								"gov"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								"report"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"data\": [\n  {\n   \"id\": \"6d8433c1-cd55-4c24-affd-f592287a7572\",\n   \"type\": \"document_upload\",\n   \"attributes\": {\n    \"guid\": \"6d8433c1-cd55-4c24-affd-f592287a7572\",\n    \"status\": \"uploaded\",\n    \"code\": \"et pariatur dolor\",\n    \"message\": \"mollit minim do\",\n    \"detail\": \"veniam Duis\",\n    \"updated_at\": \"2018-07-30T17:31:15.958Z\"\n   }\n  },\n  {\n   \"id\": \"6d8433c1-cd55-4c24-affd-f592287a7572\",\n   \"type\": \"document_upload\",\n   \"attributes\": {\n    \"guid\": \"6d8433c1-cd55-4c24-affd-f592287a7572\",\n    \"status\": \"pending\",\n    \"code\": \"proident pariatur adipisicing\",\n    \"message\": \"consequat ex ut\",\n    \"detail\": \"commodo ex ut\",\n    \"updated_at\": \"2018-07-30T17:31:15.958Z\"\n   }\n  }\n ]\n}"
				}
			]
		},
		{
			"name": "Download zip of \"what the server sees\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{apikey}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "apikey",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "id",
							"value": "{{uuid_valid}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{host}}/services/vba_documents/{{version}}/uploads/:id/download",
					"host": [
						"{{host}}"
					],
					"path": [
						"services",
						"vba_documents",
						"{{version}}",
						"uploads",
						":id",
						"download"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{uuid_valid}}",
							"description": "(Required) ID as returned by a previous create upload request"
						}
					]
				},
				"description": "An endpoint that will allow you to see exactly what the server sees. We split apart all submitted docs and metadata and zip the file to make it available to you to help with debugging purposes. Only available in sandbox"
			},
			"response": [
				{
					"name": "Not Found",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://sandbox-api.va.gov/services/vba_documents/{{version}}/uploads/:id/download",
							"protocol": "https",
							"host": [
								"sandbox-api",
								"va",
								"gov"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								":id",
								"download"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Unauthorized request",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://sandbox-api.va.gov/services/vba_documents/{{version}}/uploads/:id/download",
							"protocol": "https",
							"host": [
								"sandbox-api",
								"va",
								"gov"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								":id",
								"download"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Zip file with the contents of your payload as parsed by our server",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://sandbox-api.va.gov/services/vba_documents/{{version}}/uploads/:id/download",
							"protocol": "https",
							"host": [
								"sandbox-api",
								"va",
								"gov"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								":id",
								"download"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/zip"
						}
					],
					"cookie": [],
					"body": "consequat ut eu amet dolor"
				},
				{
					"name": "Bad API Token",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://sandbox-api.va.gov/services/vba_documents/{{version}}/uploads/:id/download",
							"protocol": "https",
							"host": [
								"sandbox-api",
								"va",
								"gov"
							],
							"path": [
								"services",
								"vba_documents",
								"{{version}}",
								"uploads",
								":id",
								"download"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		}
	]
}