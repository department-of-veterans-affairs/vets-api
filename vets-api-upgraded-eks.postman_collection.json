{
	"info": {
		"_postman_id": "01f8fb9c-b9c0-48e8-8304-681931b023fc",
		"name": "vets-api-upgraded-eks",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "30919894"
	},
	"item": [
		{
			"name": "EKS Mock Auth",
			"item": [
				{
					"name": "authorize state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code != 200) { return }",
									"",
									"pm.test(\"Extract state from meta tag\", function () {",
									"    var responseBody = pm.response.text();",
									"",
									"    var urlMatch = responseBody.match(/<meta[^>]+content=\"0;URL=([^\"]+)\"/);",
									"    if (urlMatch && urlMatch.length > 1) {",
									"        var decodedUrl = decodeURIComponent(urlMatch[1]);",
									"        var cleanedUrl = decodedUrl.replace(/&amp;/g, '&');",
									"        var stateMatch = cleanedUrl.match(/[?&]state=([^&]+)/);",
									"        if (stateMatch && stateMatch.length > 1) {",
									"            var state = stateMatch[1];",
									"            pm.collectionVariables.set(\"mock_auth_state\", state);",
									"        } else {",
									"            console.log(\"State not found\");",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{vets_api_env}}/v0/sign_in/authorize?acr={{acr}}&client_id=vamock&response_type=code&type={{csp_type}}&code_challenge={{code_challenge}}&code_challenge_method=S256",
							"host": [
								"{{vets_api_env}}"
							],
							"path": [
								"v0",
								"sign_in",
								"authorize"
							],
							"query": [
								{
									"key": "acr",
									"value": "{{acr}}"
								},
								{
									"key": "client_id",
									"value": "vamock"
								},
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "type",
									"value": "{{csp_type}}"
								},
								{
									"key": "code_challenge",
									"value": "{{code_challenge}}"
								},
								{
									"key": "code_challenge_method",
									"value": "S256"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "credential list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{vets_api_env}}/mocked_authentication/credential_list?type={{csp_type}}",
							"host": [
								"{{vets_api_env}}"
							],
							"path": [
								"mocked_authentication",
								"credential_list"
							],
							"query": [
								{
									"key": "type",
									"value": "{{csp_type}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "mock authorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code != 200) { return }",
									"",
									"pm.test(\"Extract mock auth code from meta tag\", function () {",
									"    var responseBody = pm.response.text();",
									"",
									"    var urlMatch = responseBody.match(/<meta[^>]+content=\"0;URL=([^\"]+)\"/);",
									"    if (urlMatch && urlMatch.length > 1) {",
									"        var decodedUrl = decodeURIComponent(urlMatch[1]);",
									"        var cleanedUrl = decodedUrl.replace(/&amp;/g, '&');",
									"        var codeMatch = cleanedUrl.match(/[?&]code=([^&]+)/);",
									"        if (codeMatch && codeMatch.length > 1) {",
									"            var code = codeMatch[1];",
									"            pm.collectionVariables.set(\"auth_code\", code);",
									"        } else {",
									"            console.log(\"Code not found\");",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{vets_api_env}}/mocked_authentication/authorize?credential_info={{mock_encoded_credential}}&state={{mock_auth_state}}",
							"host": [
								"{{vets_api_env}}"
							],
							"path": [
								"mocked_authentication",
								"authorize"
							],
							"query": [
								{
									"key": "credential_info",
									"value": "{{mock_encoded_credential}}"
								},
								{
									"key": "state",
									"value": "{{mock_auth_state}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}