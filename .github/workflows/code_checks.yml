name: Code Checks
on:
  push:
    branches: [master]
  pull_request:
    types: [opened, reopened, synchronize]
permissions:
  id-token: write
  contents: read
  checks: write
jobs:
  compare_sha:
    runs-on: ubuntu-latest
    name: Compare sha
    steps:
      - name: Compare commit ids
        run: |
          echo "github.sha: ${{ github.sha }}"
          echo "github.event.push.head_commit.id: ${{ github.event.push.head_commit.id }}"
          echo "github.event.pull_request.merge_commit_sha: ${{ github.event.pull_request.merge_commit_sha }}"
          echo "github.event.head_commit.id: ${{ github.event.head_commit.id }}"

  linting_and_security:
    name: Linting and Security
    env:
      BUNDLE_ENTERPRISE__CONTRIBSYS__COM: ${{ secrets.BUNDLE_ENTERPRISE__CONTRIBSYS__COM }}
    permissions: write-all
    runs-on: ubuntu-32-cores-latest
    steps:
      - name: Debug - Print environment context
        run: |
          echo "=== LINTING & SECURITY DEBUG INFO ==="
          echo "Event name: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "SHA: ${{ github.sha }}"
          echo "Ref: ${{ github.ref }}"
          echo "Actor: ${{ github.actor }}"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "PR number: ${{ github.event.pull_request.number }}"
            echo "PR head ref: ${{ github.event.pull_request.head.ref }}"
            echo "PR head sha: ${{ github.event.pull_request.head.sha }}"
            echo "PR base ref: ${{ github.event.pull_request.base.ref }}"
            echo "PR base sha: ${{ github.event.pull_request.base.sha }}"
            echo "PR head repo: ${{ github.event.pull_request.head.repo.full_name }}"
            echo "PR base repo: ${{ github.event.pull_request.base.repo.full_name }}"
          fi
          echo "Runner OS: ${{ runner.os }}"
          echo "Runner architecture: ${{ runner.arch }}"
          echo "Workspace: ${{ github.workspace }}"
          echo "=================================="

      - name: Checkout PR
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/checkout@v4

      - name: Checkout PR HEAD ref
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Debug - Verify checkout state
        run: |
          echo "=== POST-CHECKOUT DEBUG INFO ==="
          echo "Current directory: $(pwd)"
          echo "Git status:"
          git status --porcelain || echo "Git status failed"
          echo "Current HEAD:"
          git rev-parse HEAD || echo "Git rev-parse failed" 
          echo "Current branch:"
          git branch --show-current || echo "Git branch failed"
          echo "Git log (last 3 commits):"
          git log --oneline -3 || echo "Git log failed"
          echo "File count in workspace:"
          find . -type f | wc -l || echo "File count failed"
          echo "Ruby version check:"
          which ruby || echo "Ruby not found"
          echo "Bundle version check:"
          which bundle || echo "Bundle not found"
          echo "=================================="

      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Debug - Verify Ruby setup
        run: |
          echo "=== POST-RUBY-SETUP DEBUG INFO ==="
          echo "Ruby version:"
          ruby --version || echo "Ruby version check failed"
          echo "Bundler version:"
          bundle --version || echo "Bundler version check failed"
          echo "Gemfile exists:"
          ls -la Gemfile* || echo "Gemfile check failed"
          echo "Bundle check (gems installed):"
          bundle check || echo "Bundle check failed - gems may not be installed"
          echo "Bundle list (first 10 gems):"
          bundle list | head -10 || echo "Bundle list failed"
          echo "====================================="

      - name: Run bundle-audit (checks gems for CVE issues)
        run: |
          echo "=== STARTING BUNDLE-AUDIT ==="
          echo "Command: bundle exec bundle-audit check --update --ignore CVE-2024-27456"
          bundle exec bundle-audit check --update --ignore CVE-2024-27456
          echo "Bundle-audit exit code: $?"
          echo "=== BUNDLE-AUDIT COMPLETED ==="

      - name: Run Rubocop
        run: |
          echo "=== STARTING RUBOCOP ==="
          echo "Command: bundle exec rubocop --parallel --format github"
          echo "Files to be checked:"
          bundle exec rubocop --list-files | wc -l || echo "Could not count files"
          bundle exec rubocop --parallel --format github
          echo "Rubocop exit code: $?"
          echo "=== RUBOCOP COMPLETED ==="

      - name: Run Brakeman
        run: |
          echo "=== STARTING BRAKEMAN ==="
          echo "Command: bundle exec brakeman --ensure-latest --confidence-level=2 --format github"
          bundle exec brakeman --ensure-latest --confidence-level=2 --format github
          echo "Brakeman exit code: $?"
          echo "=== BRAKEMAN COMPLETED ==="

      # Always add the "lint-failure" label on failure and remove it on success
      - name: Add Lint Failure label
        if: ${{ failure() && github.event_name == 'pull_request' }}
        uses: actions-ecosystem/action-add-labels@v1
        with:
          number: ${{ github.event.pull_request.number }}
          labels: lint-failure

      - name: Remove Lint Failure label
        if: ${{ success() && github.event_name == 'pull_request' }}
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          number: ${{ github.event.pull_request.number }}
          labels: lint-failure

  tests:
    name: Test
    runs-on: ubuntu-32-cores-latest
    permissions: write-all
    env:
      BUNDLE_ENTERPRISE__CONTRIBSYS__COM: ${{ secrets.BUNDLE_ENTERPRISE__CONTRIBSYS__COM }}
      ECR_REGISTRY_WITH_SLASH: "${{ secrets.ECR_REGISTRY }}/"
      CI: true
      RAILS_ENV: test
      TERM: xterm-256color
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
      COMPOSE_BASH_CMD: docker compose -f docker-compose.test.yml run web bash -c
    steps:
      - name: Debug - Print test environment context
        run: |
          echo "=== TEST JOB DEBUG INFO ==="
          echo "Event name: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "SHA: ${{ github.sha }}"
          echo "Ref: ${{ github.ref }}"
          echo "Actor: ${{ github.actor }}"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "PR number: ${{ github.event.pull_request.number }}"
            echo "PR head ref: ${{ github.event.pull_request.head.ref }}"
            echo "PR head sha: ${{ github.event.pull_request.head.sha }}"
            echo "PR base ref: ${{ github.event.pull_request.base.ref }}"
            echo "PR base sha: ${{ github.event.pull_request.base.sha }}"
          fi
          echo "Runner OS: ${{ runner.os }}"
          echo "Runner architecture: ${{ runner.arch }}"
          echo "Docker version:"
          docker --version || echo "Docker not available"
          echo "Docker Compose version:"
          docker compose version || echo "Docker Compose not available"
          echo "Available disk space:"
          df -h || echo "Disk space check failed"
          echo "Available memory:"
          free -h || echo "Memory check failed"
          echo "CPU info:"
          nproc || echo "CPU count failed"
          echo "============================="

      - name: Checkout PR
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/checkout@v4

      - name: Checkout PR HEAD ref
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Debug - Verify test checkout state
        run: |
          echo "=== POST-TEST-CHECKOUT DEBUG INFO ==="
          echo "Current directory: $(pwd)"
          echo "Docker compose files:"
          ls -la docker-compose* || echo "Docker compose files not found"
          echo "Git status:"
          git status --porcelain || echo "Git status failed"
          echo "Current HEAD:"
          git rev-parse HEAD || echo "Git rev-parse failed"
          echo "File count in workspace:"
          find . -type f | wc -l || echo "File count failed"
          echo "Check if ECR_REGISTRY secret is available:"
          if [ -n "${{ secrets.ECR_REGISTRY }}" ]; then
            echo "ECR_REGISTRY secret is set"
          else
            echo "ECR_REGISTRY secret is NOT set"
          fi
          echo "====================================="

      - name: Debug - Pre Docker login
        run: |
          echo "=== PRE-DOCKER-LOGIN DEBUG INFO ==="
          echo "DockerHub user secret available: ${{ secrets.DOCKERHUB_USER != '' }}"
          echo "DockerHub password secret available: ${{ secrets.DOCKERHUB_PASSWORD != '' }}"
          echo "Docker daemon status:"
          docker info --format "{{.ServerVersion}}" || echo "Docker daemon not accessible"
          echo "================================="

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Debug - Post Docker login
        run: |
          echo "=== POST-DOCKER-LOGIN DEBUG INFO ==="
          echo "Docker login successful"
          echo "Docker images available:"
          docker images || echo "Could not list docker images"
          echo "===================================="

      - name: Debug - Pre AWS configuration
        run: |
          echo "=== PRE-AWS-CONFIG DEBUG INFO ==="
          echo "AWS assume role variable: ${{ vars.AWS_ASSUME_ROLE != '' }}"
          echo "AWS CLI version:"
          aws --version || echo "AWS CLI not available"
          echo "==============================="

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ vars.AWS_ASSUME_ROLE }}
          aws-region: us-gov-west-1

      - name: Debug - Post AWS configuration
        run: |
          echo "=== POST-AWS-CONFIG DEBUG INFO ==="
          echo "AWS identity:"
          aws sts get-caller-identity || echo "AWS identity check failed"
          echo "AWS region:"
          aws configure get region || echo "AWS region check failed"
          echo "==============================="

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2.0.1
        with:
          mask-password: true

      - name: Debug - Post ECR login
        run: |
          echo "=== POST-ECR-LOGIN DEBUG INFO ==="
          echo "ECR login registry: ${{ steps.ecr-login.outputs.registry }}"
          echo "ECR registry with slash env: $ECR_REGISTRY_WITH_SLASH"
          echo "==============================="

      - name: Set Environment Variable
        run: |
          echo "=== SETTING USER ID ==="
          USER_ID=$(id -u)
          echo "VETS_API_USER_ID=$USER_ID" >> $GITHUB_ENV
          echo "User ID set to: $USER_ID"
          echo "======================="

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Debug - Pre Docker build
        run: |
          echo "=== PRE-DOCKER-BUILD DEBUG INFO ==="
          echo "VETS_API_USER_ID: ${{ env.VETS_API_USER_ID }}"
          echo "BUNDLE_ENTERPRISE secret available: ${{ env.BUNDLE_ENTERPRISE__CONTRIBSYS__COM != '' }}"
          echo "Docker buildx version:"
          docker buildx version || echo "Docker buildx not available"
          echo "Docker buildx ls:"
          docker buildx ls || echo "Could not list buildx instances"
          echo "Dockerfile exists:"
          ls -la Dockerfile* || echo "Dockerfile not found"
          echo "Available disk space before build:"
          df -h || echo "Disk space check failed"
          echo "====================================="

      - name: Build Docker Image
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILD_SUMMARY: false
        with:
          build-args: |
            BUNDLE_ENTERPRISE__CONTRIBSYS__COM=${{ env.BUNDLE_ENTERPRISE__CONTRIBSYS__COM }}
            USER_ID=${{ env.VETS_API_USER_ID }}
          context: .
          push: false
          load: true
          tags: vets-api
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Debug - Post Docker build
        run: |
          echo "=== POST-DOCKER-BUILD DEBUG INFO ==="
          echo "Docker images after build:"
          docker images | grep vets-api || echo "vets-api image not found"
          echo "Available disk space after build:"
          df -h || echo "Disk space check failed"
          echo "Docker image inspection:"
          docker inspect vets-api --format='{{.Size}}' || echo "Could not inspect image size"
          echo "====================================="

      - name: Debug - Pre database setup
        run: |
          echo "=== PRE-DATABASE-SETUP DEBUG INFO ==="
          echo "COMPOSE_BASH_CMD: ${{ env.COMPOSE_BASH_CMD }}"
          echo "Docker compose services:"
          docker compose -f docker-compose.test.yml config --services || echo "Could not list services"
          echo "Docker compose ps (before):"
          docker compose -f docker-compose.test.yml ps || echo "Could not show compose status"
          echo "Available memory before setup:"
          free -h || echo "Memory check failed"
          echo "======================================"

      - name: Setup Database
        uses: nick-fields/retry@ce71cc2ab81d554ebbe88c79ab5975992d79ba08 # v3.0.2
        with:
          timeout_minutes: 10
          retry_wait_seconds: 3 # Seconds
          max_attempts: 3
          command: >
            ${{ env.COMPOSE_BASH_CMD }}
            "bundle exec rake parallel:setup[24]"

      - name: Debug - Post database setup
        run: |
          echo "=== POST-DATABASE-SETUP DEBUG INFO ==="
          echo "Docker compose ps (after setup):"
          docker compose -f docker-compose.test.yml ps || echo "Could not show compose status"
          echo "Check database connections:"
          ${{ env.COMPOSE_BASH_CMD }} "bundle exec rails runner 'puts ActiveRecord::Base.connection.execute(\"SELECT 1\").values.first'" || echo "Database connection test failed"
          echo "Available disk space after setup:"
          df -h || echo "Disk space check failed"
          echo "Available memory after setup:"
          free -h || echo "Memory check failed"
          echo "======================================"

      - name: Setup system tmp dir
        run: |
          echo "=== SETTING UP SYSTEM TMP DIR ==="
          ${{ env.COMPOSE_BASH_CMD }} "mkdir -p tmp/systmp"
          echo "Tmp dir created successfully"
          echo "================================"

      - name: Debug - Pre test execution
        run: |
          echo "=== PRE-TEST-EXECUTION DEBUG INFO ==="
          echo "System status before tests:"
          echo "Available memory:"
          free -h || echo "Memory check failed"
          echo "Available disk space:"
          df -h || echo "Disk space check failed"
          echo "Docker container status:"
          docker compose -f docker-compose.test.yml ps || echo "Could not show compose status"
          echo "Test file count (spec files):"
          find . -name "*_spec.rb" | wc -l || echo "Could not count spec files"
          echo "Modules directory:"
          ls -la modules/ || echo "Modules directory not found"
          echo "===================================="

      - name: Run Specs
        timeout-minutes: 15
        run: |
          echo "=== STARTING TEST EXECUTION ==="
          echo "Test command: TMPDIR=tmp/systmp bundle exec rake 'parallel:spec[24, , , modules\/]'"
          echo "Starting at: $(date)"
          ${{ env.COMPOSE_BASH_CMD }} "TMPDIR=tmp/systmp bundle exec rake 'parallel:spec[24, , , modules\/]'"
          echo "Test execution completed at: $(date)"
          echo "Test exit code: $?"
          echo "==============================="

      - name: Debug - Post test execution
        if: always()
        run: |
          echo "=== POST-TEST-EXECUTION DEBUG INFO ==="
          echo "Final system status:"
          echo "Available memory:"
          free -h || echo "Memory check failed"
          echo "Available disk space:"
          df -h || echo "Disk space check failed"
          echo "Docker container logs (last 50 lines):"
          docker compose -f docker-compose.test.yml logs --tail=50 || echo "Could not get container logs"
          echo "Test artifacts generated:"
          ls -la log/ || echo "No log directory found"
          ls -la coverage/ || echo "No coverage directory found"
          ls -la tmp/ || echo "No tmp directory found"
          echo "====================================="

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Coverage Report
          path: coverage
          include-hidden-files: true

      - name: Upload Test Results (JUnit XMLs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Test Results
          path: log/*.xml
          if-no-files-found: ignore

      - name: Upload Test Artifacts (log)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test Artifacts (log directory)
          path: |
            log
            !log/*.xml
          if-no-files-found: ignore

      - name: Upload Test Artifacts (rails tmp)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: Test Artifacts (rails tmp directory)
          path: tmp
          if-no-files-found: ignore
          retention-days: 14

      - name: Remove Test Failure label
        if: ${{ success() && github.event_name == 'pull_request' }}
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          number: ${{ github.event.pull_request.number }}
          labels: test-failure

      - name: Add Test Failure label
        if: ${{ failure() && github.event_name == 'pull_request' }}
        uses: actions-ecosystem/action-add-labels@v1
        with:
          number: ${{ github.event.pull_request.number }}
          labels: test-failure

  publish_results:
    name: Publish Test Results and Coverage
    if: always()
    needs: tests
    permissions: write-all
    runs-on: ubuntu-16-cores-latest

    steps:
      - uses: actions/download-artifact@v4

      - name: Publish Test Results to GitHub
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          check_name: Test Results
          comment_mode: off
          files: Test Results/*.xml
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fix up coverage report to work with coverage-check-action
        run: sed -i 's/"line"/"covered_percent"/g' 'Coverage Report/.last_run.json'

      - name: Publish Coverage Report
        if: ${{ hashFiles('Coverage Report/.last_run.json') != '' }}
        uses: devmasx/coverage-check-action@v1.2.0
        with:
          type: simplecov
          result_path: Coverage Report/.last_run.json
          min_coverage: 90
          token: ${{ secrets.GITHUB_TOKEN }}
