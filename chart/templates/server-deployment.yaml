{{- $root := . -}}
{{- range $name, $service := $root.Values.web.webServices }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ $name }}
  name: {{ $name }}
  namespace: {{ $root.Release.Namespace }}
spec:
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: {{ $name }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ $root.Values.web.maxSurge }}
      maxUnavailable: {{ $root.Values.web.maxUnavailable }}
  template:
    metadata:
      labels:
        app: {{ $name }}
      annotations:
{{ toYaml $root.Values.annotations | indent 8 }}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: {{ $root.Values.affinityWeight }}
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: {{ $root.Values.matchExpressions.key }}
                      operator: {{ $root.Values.matchExpressions.operator }}
                      values:
                        - {{ $name }}
                topologyKey:  {{ $root.Values.topologyKey }}
      securityContext:
        fsGroup: 1000
      volumes:
{{ toYaml $root.Values.common.volumes | indent 8 }}
      {{- if $root.Values.mockData.enabled }}
      initContainers:
{{ toYaml $root.Values.common.initContainers | indent 8 }}
      {{- end }}
      containers:
        - image: "{{ $root.Values.image.value }}:{{ $root.Values.image.tag }}"
          imagePullPolicy: {{ $root.Values.image.pullPolicy }}
          name: {{ $root.Values.appName }}-web
          ports:
            {{- range $key := $root.Values.web.containers.ports }}
            - containerPort: {{ $key.containerPort }}
              name: {{ $key.name }}
            {{- end }}
          livenessProbe: #ensure app is serving requests properly and know when to restart a container
            httpGet:
              path: {{ $root.Values.web.healthCheck.requestPath }}
              port: {{ $root.Values.web.healthCheck.port }}
            initialDelaySeconds: {{ $root.Values.web.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ $root.Values.web.healthCheck.periodSeconds }}
          readinessProbe: #ensure container is ready to start accepting traffic
            httpGet:
              path: {{ $root.Values.web.healthCheck.readinessPath }}
              port: {{ $root.Values.web.healthCheck.readinessPort }}
            initialDelaySeconds: {{ $root.Values.web.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ $root.Values.web.healthCheck.periodSeconds }}
            successThreshold: {{ $root.Values.web.healthCheck.successThreshold }}
          resources:
{{ toYaml $root.Values.web.resources | indent 12 }}
          volumeMounts:
{{ toYaml $root.Values.common.volumeMounts | indent 12 }}
          env:
            - name: GIT_REVISION
              value: {{ $root.Values.image.tag}}
{{ toYaml $root.Values.web.envSecrets | indent 12 }}
          {{- range $keys, $key := $root.Values.common.secrets }}
          {{- range $secrets, $secret := $key }}
            - name: {{ $secret.env_var }}
              valueFrom:
                secretKeyRef:
                  name: {{ $keys }}
                  key:  {{ $secret.name }}
          {{- end }}
          {{- end }}
        {{- if $root.Values.clamav.enabled  }}
        - name: clamav
          image: "{{ $root.Values.clamav.image.value }}:{{ $root.Values.clamav.image.tag }}"
          imagePullPolicy: {{ $root.Values.image.pullPolicy }}
          ports:
{{ toYaml $root.Values.clamav.ports | indent 12 }}
{{ toYaml $root.Values.clamav.probes | indent 10 }}
          resources:
{{ toYaml $root.Values.clamav.resources | indent 12 }}
          volumeMounts:
{{ toYaml $root.Values.clamav.volumeMounts | indent 12 }}
        {{- end }}
        {{- if $root.Values.web.socatProxyEnabled }}
{{ toYaml $root.Values.common.socatProxy | indent 8 }}
        {{- end }}
      serviceAccountName: {{ $root.Values.serviceAccount.name }}
{{- end }}
