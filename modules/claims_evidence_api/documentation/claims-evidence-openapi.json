{
  "openapi" : "3.0.0",
  "info" : {
    "description" : "The Claim Evidence Application Programming Interface (API) is file service for handling the storage and management of files supporting VA benefit claims. It serves as a modernized point of entry to files previously only accessible through VBMS eFolder. It is designed for easier implementation by consuming systems, but also with the ability to eventually replace the eFolder logic within VBMS.",
    "license" : {
      "name" : "Apache 2.0",
      "url" : "https://www.apache.org/licenses/LICENSE-2.0"
    },
    "termsOfService" : "https://developer.va.gov/terms-of-service",
    "title" : "Claim Evidence API.",
    "version" : "0.0.1-SNAPSHOT"
  },
  "servers" : [ {
    "url" : "/api/v1/rest"
  } ],
  "security" : [ {
    "bearer-key" : [ ]
  } ],
  "tags" : [ {
    "description" : "BIP",
    "name" : "PRODUCT_SCOPE"
  }, {
    "description" : "C&P",
    "name" : "PRODUCT_LINE_SCOPE"
  }, {
    "description" : "BAM",
    "name" : "PORTFOLIO_SCOPE"
  } ],
  "paths" : {
    "/folders/files:search" : {
      "post" : {
        "description" : "### Searches files by provided FolderIdentifier, and search request filers.",
        "operationId" : "searchFiles",
        "parameters" : [ {
          "description" : "The Folder Identifier that the file will be associated to. The example provided is for identifying a veteran.<br><br>**Header Format**: folder-type:identifier-type:ID<br><br>**Valid Folder-Types**:<br> <br>* VETERAN - Allows: FILENUMBER, SSN, PARTICIPANT_ID, SEARCH, and EDIPI <br>* PERSON - Allows: PARTICIPANT_ID, SEARCH <br> <br> For search identifiers as a type, the ssn, date of birth, last name, and first name must be supplied on the ID field as query params encoded.",
          "example" : "VETERAN:FILENUMBER:987267855",
          "in" : "header",
          "name" : "X-Folder-URI",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/searchFileRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchFileResponse"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchFileResponse"
                }
              }
            },
            "description" : "Search was successful given provided search request."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchFiles_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchFiles_403_response"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchFiles_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Search Files",
        "tags" : [ "Folder" ]
      }
    },
    "/files" : {
      "post" : {
        "description" : "### Upload a file.\n This endpoint when given a file and associated data returns a UUID which can be used to retrieve back the latest data provided. Information on how to properly create a payload object for this endpoint is available in the schema section <a href=\"#model-payload\">here</a>. (Upload Payload)",
        "operationId" : "upload",
        "parameters" : [ {
          "description" : "The Folder Identifier that the file will be associated to. The example provided is for identifying a veteran.<br><br>**Header Format**: folder-type:identifier-type:ID<br><br>**Valid Folder-Types**:<br> <br>* VETERAN - Allows: FILENUMBER, SSN, PARTICIPANT_ID, SEARCH, ICN and EDIPI <br>* PERSON - Allows: PARTICIPANT_ID, SEARCH <br> <br> For search identifiers as a type, the ssn, date of birth, last name, and first name must be supplied on the ID field as query params encoded.",
          "example" : "VETERAN:FILENUMBER:987267855",
          "in" : "header",
          "name" : "X-Folder-URI",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "encoding" : {
                "file" : {
                  "contentType" : "image/png, image/jpeg"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/uploadRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/uploadResponse"
                }
              }
            },
            "description" : "Response containing the file UUID, the owner, and the calculated MD5 Hash. As well as conversion information if the document has been converted."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/upload_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchFiles_403_response"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource"
          },
          "415" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/upload_415_response"
                }
              }
            },
            "description" : "Unsupported Media Type. This is common when uploading an unacceptable file type."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/upload_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Upload a file with associated provider data",
        "tags" : [ "File" ]
      }
    },
    "/files/{uuid}/" : {
      "post" : {
        "description" : "### Update a file.\n This endpoint when given a file and associated data returns a UUID which can be used to retrieve back the latest data provided. Information on how to properly create a payload object for this endpoint is available in the schema section <a href=\"#model-payload_2\">here</a>. (Update Payload)",
        "operationId" : "update",
        "parameters" : [ {
          "description" : "The UUID of the file.",
          "in" : "path",
          "name" : "uuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        }, {
          "description" : "The Folder Identifier that the file will be associated to. The example provided is for identifying a veteran.<br><br>**Header Format**: folder-type:identifier-type:ID<br><br>**Valid Folder-Types**:<br> <br>* VETERAN - Allows: FILENUMBER, SSN, PARTICIPANT_ID, SEARCH, and EDIPI <br>* PERSON - Allows: PARTICIPANT_ID, SEARCH <br> <br> For search identifiers as a type, the ssn, date of birth, last name, and first name must be supplied on the ID field as query params encoded.",
          "example" : "VETERAN:FILENUMBER:987267855",
          "in" : "header",
          "name" : "X-Folder-URI",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "encoding" : {
                "file" : {
                  "contentType" : "image/png, image/jpeg"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/updateRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/updateResponse"
                }
              }
            },
            "description" : "Response containing the file UUID, the owner, as well as conversion information if the document has been converted."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/update_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchFiles_403_response"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CURRENT_VERSION_NOT_FOUND"
                }
              }
            },
            "description" : "Resource Not Found"
          },
          "415" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/upload_415_response"
                }
              }
            },
            "description" : "Unsupported Media Type. This is common when uploading an unacceptable file type."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/update_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Update a file with associated provider data",
        "tags" : [ "File" ]
      }
    },
    "/files/{uuid}/data" : {
      "get" : {
        "description" : "Retrieve file data.",
        "operationId" : "getData",
        "parameters" : [ {
          "description" : "The UUID of the file data.",
          "in" : "path",
          "name" : "uuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        }, {
          "description" : "Optional param to include or exclude raw text data associated with the current version of the document in the response. Default behavior is exclusion. Providers must implement processing of this flag in their corresponding handler chain in order to utilize this addition to the default response. Valid values for this query parameter are \"0\"/\"1\" or \"false\"/\"true\"; anything else will result in a 400 Bad Request response.",
          "in" : "query",
          "name" : "includeRawTextData",
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getData_200_response"
                }
              }
            },
            "description" : "File data is returned. If includeRawTextData is true, then raw text data associated with the file data will also be included in the response."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/INVALID_JWT"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CURRENT_VERSION_NOT_FOUND"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getData_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Retrieve file data.",
        "tags" : [ "File" ]
      },
      "put" : {
        "description" : "### Update File Data.\n This endpoint when given data returns a status success or error message. Information on how to properly creae a payload object for this endpoint is available in the schema section.",
        "operationId" : "updateData",
        "parameters" : [ {
          "description" : "The UUID of the file data.",
          "in" : "path",
          "name" : "uuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/updateDataRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Response indicating a successful data update."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/update_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchFiles_403_response"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CURRENT_VERSION_NOT_FOUND"
                }
              }
            },
            "description" : "Resource Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/updateData_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Update a file with associated provider data",
        "tags" : [ "File" ]
      }
    },
    "/files/{uuid}/data/ocr" : {
      "get" : {
        "description" : "### Retrieve File OCR Data\nRetrieve OCR data (text content and geometry) for an existing file.",
        "operationId" : "retrieveOcrData",
        "parameters" : [ {
          "description" : "The UUID of the file.",
          "in" : "path",
          "name" : "uuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ocrDataResponse"
                }
              }
            },
            "description" : "Response indicating a successful OCR data retrieval"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/INVALID_JWT"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/retrieveOcrData_404_response"
                }
              }
            },
            "description" : "Resource Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/retrieveOcrData_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Retrieve OCR data related to a file",
        "tags" : [ "File" ]
      },
      "post" : {
        "description" : "### Upload File OCR Data\nUploads OCR data (text content and geometry) for an existing file, and indexes the file's text content to make it available for full-text search.",
        "operationId" : "uploadOcrData",
        "parameters" : [ {
          "description" : "The UUID of the file.",
          "in" : "path",
          "name" : "uuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ocrDataRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Response indicating a successful OCR data upload"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/updateOcrData_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CURRENT_VERSION_NOT_FOUND"
                }
              }
            },
            "description" : "Resource Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/updateOcrData_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Upload OCR data related to a file",
        "tags" : [ "File" ]
      },
      "put" : {
        "description" : "### Update File OCR Data\nUpdates OCR data (text content and/or geometry) to an existing OCR data file, and indexes the file's text content to make it available for full-text search.",
        "operationId" : "updateOcrData",
        "parameters" : [ {
          "description" : "The UUID of the file.",
          "in" : "path",
          "name" : "uuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ocrDataRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Response indicating a successful OCR data update"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/updateOcrData_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/retrieveOcrData_404_response"
                }
              }
            },
            "description" : "Resource Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/updateOcrData_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Updates OCR data to an existing OCR data file",
        "tags" : [ "File" ]
      }
    },
    "/files/{uuid}/content" : {
      "get" : {
        "description" : "Downloads file content.",
        "operationId" : "getContent",
        "parameters" : [ {
          "description" : "UUID of the file you wish to download",
          "in" : "path",
          "name" : "uuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/pdf" : { }
            },
            "description" : "File content is returned."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/INVALID_JWT"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/retrieveOcrData_404_response"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getContent_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Downloads file content",
        "tags" : [ "File" ]
      }
    },
    "/files/{uuid}/annotations" : {
      "get" : {
        "description" : "Retrieves File Annotation Objects.",
        "operationId" : "getAnnotations",
        "parameters" : [ {
          "description" : "The UUID of the file data.",
          "in" : "path",
          "name" : "uuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/annotationResponseModel"
                }
              }
            },
            "description" : "annotations are returned."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/INVALID_JWT"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CURRENT_VERSION_NOT_FOUND"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getData_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Retrieves annotations.",
        "tags" : [ "File" ]
      },
      "post" : {
        "description" : "### Add annotations.\n This endpoint when given data returns a status success or error message. The annotation object schema is listed at the bottom of this swagger page.",
        "operationId" : "addAnnotations",
        "parameters" : [ {
          "description" : "The UUID of the file data.",
          "in" : "path",
          "name" : "uuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Annotation_Request"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Save_Annotation_Response"
                }
              }
            },
            "description" : "Response indicating a successful annotation save"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/addAnnotations_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CURRENT_VERSION_NOT_FOUND"
                }
              }
            },
            "description" : "Resource Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/addAnnotations_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Add annotations on content.",
        "tags" : [ "File" ]
      }
    },
    "/files/{uuid}/bookmarks" : {
      "delete" : {
        "description" : "Deletes File Bookmarks keyed by Type.",
        "operationId" : "deleteBookmarks",
        "parameters" : [ {
          "description" : "The UUID of the file data.",
          "in" : "path",
          "name" : "uuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        }, {
          "description" : "The Folder Identifier that the file will be associated to. The example provided is for identifying a veteran.<br><br>**Header Format**: folder-type:identifier-type:ID<br><br>**Valid Folder-Types**:<br> <br>* VETERAN - Allows: FILENUMBER, SSN, PARTICIPANT_ID, SEARCH, and EDIPI <br>* PERSON - Allows: PARTICIPANT_ID, SEARCH <br> <br> For search identifiers as a type, the ssn, date of birth, last name, and first name must be supplied on the ID field as query params encoded.",
          "example" : "VETERAN:FILENUMBER:987267855",
          "in" : "header",
          "name" : "X-Folder-URI",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/deleteBookmarksRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/bookmarkResponseModel"
                }
              }
            },
            "description" : "Successfully deleted the Bookmark(s). Return the saved file query."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/deleteBookmarks_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchFiles_403_response"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CURRENT_VERSION_NOT_FOUND"
                }
              }
            },
            "description" : "Resource Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/saveBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Delete Bookmarks",
        "tags" : [ "File" ]
      },
      "get" : {
        "description" : "Retrieves File Bookmarks keyed by Realm.",
        "operationId" : "getBookmarks",
        "parameters" : [ {
          "description" : "The UUID of the file data.",
          "in" : "path",
          "name" : "uuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarksResponseModel"
                }
              }
            },
            "description" : "bookmarks are returned."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/INVALID_JWT"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CURRENT_VERSION_NOT_FOUND"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Retrieves bookmarks.",
        "tags" : [ "File" ]
      },
      "put" : {
        "description" : "Saves File Bookmarks keyed by Type. Updates Comments of Existing Bookmarks.",
        "operationId" : "saveBookmarks",
        "parameters" : [ {
          "description" : "The UUID of the file data.",
          "in" : "path",
          "name" : "uuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        }, {
          "description" : "The Folder Identifier that the file will be associated to. The example provided is for identifying a veteran.<br><br>**Header Format**: folder-type:identifier-type:ID<br><br>**Valid Folder-Types**:<br> <br>* VETERAN - Allows: FILENUMBER, SSN, PARTICIPANT_ID, SEARCH, and EDIPI <br>* PERSON - Allows: PARTICIPANT_ID, SEARCH <br> <br> For search identifiers as a type, the ssn, date of birth, last name, and first name must be supplied on the ID field as query params encoded.",
          "example" : "VETERAN:FILENUMBER:987267855",
          "in" : "header",
          "name" : "X-Folder-URI",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/saveBookmarksRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/bookmarkResponseModel"
                }
              }
            },
            "description" : "Successfully saved the Bookmark(s). Return the saved file query."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/saveBookmarks_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchFiles_403_response"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CURRENT_VERSION_NOT_FOUND"
                }
              }
            },
            "description" : "Resource Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/saveBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Save and Update Bookmarks",
        "tags" : [ "File" ]
      }
    },
    "/files/{uuid}/annotations/{annotationUuid}" : {
      "delete" : {
        "description" : "Deletes an annotation.",
        "operationId" : "deleteAnnotation",
        "parameters" : [ {
          "description" : "The UUID of the file data.",
          "in" : "path",
          "name" : "uuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        }, {
          "description" : "The UUID of the annotation.",
          "in" : "path",
          "name" : "annotationUuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The annotation was deleted successfully."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/INVALID_JWT"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CURRENT_VERSION_NOT_FOUND"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          }
        },
        "summary" : "Deletes an annotation.",
        "tags" : [ "File" ]
      },
      "put" : {
        "description" : "### Update annotations.\nUpdates annotation data on a document. The annotation object schema is listed at the bottom of this swagger page.",
        "operationId" : "updateAnnotations",
        "parameters" : [ {
          "description" : "The UUID of the file data.",
          "in" : "path",
          "name" : "uuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        }, {
          "description" : "The UUID of the annotation data.",
          "in" : "path",
          "name" : "annotationUuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Update_Annotation_Request"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Empty response indicates a successful annotation save"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/updateOcrData_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CURRENT_VERSION_NOT_FOUND"
                }
              }
            },
            "description" : "Resource Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/updateAnnotations_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Update annotation on a document.",
        "tags" : [ "File" ]
      }
    },
    "/files/{uuid}/associations/claims" : {
      "get" : {
        "description" : "this endpoint retrieves the claim associations on a given document",
        "operationId" : "getAssociation",
        "parameters" : [ {
          "description" : "The UUID of the file.",
          "in" : "path",
          "name" : "uuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getAssociation_200_response"
                }
              }
            },
            "description" : "Response containing the file UUID, the owner, as well as conversion information if the document has been converted."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/INVALID_JWT"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CURRENT_VERSION_NOT_FOUND"
                }
              }
            },
            "description" : "Resource Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "tags" : [ "Association" ]
      },
      "put" : {
        "description" : "This endpoint when given a array of claim Ids compared the claim Ids to already associated ones and removes the missing claim associarions and adds the new ones.",
        "operationId" : "associate",
        "parameters" : [ {
          "description" : "The UUID of the file.",
          "in" : "path",
          "name" : "uuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/associate_request"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Response indicating a successful data update."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/associate_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CURRENT_VERSION_NOT_FOUND"
                }
              }
            },
            "description" : "Resource Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/saveBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Add/remove claim associations to a given document",
        "tags" : [ "Association" ]
      }
    },
    "/files/uuids:exchange" : {
      "post" : {
        "description" : "### Exchange UUIDs\n This endpoint, when given historical version uuids, exchanges them with the main file identifiers (uuid).",
        "operationId" : "UUIDExchange",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "example" : {
                "versionUuids" : [ "862809db-1d91-4727-95c1-c3a9f3836e7c", "1c28dd40-f8a0-4c8a-905a-01692b3683b5" ]
              },
              "schema" : {
                "$ref" : "#/components/schemas/uuidExchangeRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "example" : {
                  "uuids" : {
                    "862809db-1d91-4727-95c1-c3a9f3836e7c" : "5578e33c-0d52-40b7-bee0-d1aac49ae18b",
                    "1c28dd40-f8a0-4c8a-905a-01692b3683b5" : "b4840322-5e32-49ab-b118-f2901f6c8825"
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/uuidExchangeResponse"
                }
              }
            },
            "description" : "Exchange of versionUUIDs for UUIDs was successful."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/vefsErrorResponse"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/vefsErrorResponse"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/vefsErrorResponse"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/vefsErrorResponse"
                }
              }
            },
            "description" : "Resource Not Found"
          },
          "405" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/vefsErrorResponse"
                }
              }
            },
            "description" : "Method Not Allowed"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/vefsErrorResponse"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/vefsErrorResponse"
                }
              }
            },
            "description" : "This request is not yet implemented."
          }
        },
        "security" : [ {
          "bearer-key" : [ ]
        } ],
        "summary" : "Map CurrentVersionUuids to UUIDs Endpoint",
        "tags" : [ "File" ]
      }
    },
    "/permissions/folders" : {
      "get" : {
        "description" : "Retrieves folder level permissions for the requesting user.",
        "operationId" : "getFolderPermissions",
        "parameters" : [ {
          "description" : "The Folder Identifier that the file will be associated to. The example provided is for identifying a veteran.<br><br>**Header Format**: folder-type:identifier-type:ID<br><br>**Valid Folder-Types**:<br> <br>* VETERAN - Allows: FILENUMBER, SSN, PARTICIPANT_ID, SEARCH, and EDIPI <br>* PERSON - Allows: PARTICIPANT_ID, SEARCH <br> <br> For search identifiers as a type, the ssn, date of birth, last name, and first name must be supplied on the ID field as query params encoded.",
          "example" : "VETERAN:FILENUMBER:987267855",
          "in" : "header",
          "name" : "X-Folder-URI",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/folderPermissionsResponse"
                }
              }
            },
            "description" : "permission info is returned"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/deleteBookmarks_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchFiles_403_response"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Retrieves folder level permissions.",
        "tags" : [ "Permissions" ]
      }
    },
    "/permissions/post/files" : {
      "get" : {
        "description" : "Retrieves upload permissions for the requesting user.",
        "operationId" : "getUploadPermissions",
        "parameters" : [ {
          "description" : "The Folder Identifier that the file will be associated to. The example provided is for identifying a veteran.<br><br>**Header Format**: folder-type:identifier-type:ID<br><br>**Valid Folder-Types**:<br> <br>* VETERAN - Allows: FILENUMBER, SSN, PARTICIPANT_ID, SEARCH, and EDIPI <br>* PERSON - Allows: PARTICIPANT_ID, SEARCH <br> <br> For search identifiers as a type, the ssn, date of birth, last name, and first name must be supplied on the ID field as query params encoded.",
          "example" : "VETERAN:FILENUMBER:987267855",
          "in" : "header",
          "name" : "X-Folder-URI",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/postPermissionsResponse"
                }
              }
            },
            "description" : "permission info is returned"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/deleteBookmarks_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchFiles_403_response"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Retrieves upload permissions.",
        "tags" : [ "Permissions" ]
      }
    },
    "/permissions/put/files/{uuid}/data" : {
      "get" : {
        "description" : "Retrieves update file data permissions for the requesting user.",
        "operationId" : "getUpdateDataPermissions",
        "parameters" : [ {
          "description" : "The UUID of the file.",
          "in" : "path",
          "name" : "uuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/putPermissionsResponse"
                }
              }
            },
            "description" : "permission info is returned"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/INVALID_JWT"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CURRENT_VERSION_NOT_FOUND"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Retrieves update file data permissions.",
        "tags" : [ "Permissions" ]
      }
    },
    "/permissions/post/folders/files:search" : {
      "get" : {
        "description" : "Retrieves file search permissions for the requesting user.",
        "operationId" : "getSearchPermissions",
        "parameters" : [ {
          "description" : "The Folder Identifier that the file will be associated to. The example provided is for identifying a veteran.<br><br>**Header Format**: folder-type:identifier-type:ID<br><br>**Valid Folder-Types**:<br> <br>* VETERAN - Allows: FILENUMBER, SSN, PARTICIPANT_ID, SEARCH, and EDIPI <br>* PERSON - Allows: PARTICIPANT_ID, SEARCH <br> <br> For search identifiers as a type, the ssn, date of birth, last name, and first name must be supplied on the ID field as query params encoded.",
          "example" : "VETERAN:FILENUMBER:987267855",
          "in" : "header",
          "name" : "X-Folder-URI",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/postPermissionsResponse"
                }
              }
            },
            "description" : "permission info is returned"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/deleteBookmarks_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchFiles_403_response"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Retrieves file search permissions.",
        "tags" : [ "Permissions" ]
      }
    },
    "/permissions/post/files/{fileUuid}/annotations" : {
      "get" : {
        "description" : "Retrieves create annotations permissions for the requesting user.",
        "operationId" : "getCreateAnnotationsPermissions",
        "parameters" : [ {
          "description" : "The UUID of the file.",
          "in" : "path",
          "name" : "fileUuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/postPermissionsResponse"
                }
              }
            },
            "description" : "permission info is returned"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/INVALID_JWT"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CURRENT_VERSION_NOT_FOUND"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Retrieves create annotations permissions.",
        "tags" : [ "Permissions" ]
      }
    },
    "/permissions/put/files/{fileUuid}/annotations/{annotationUuid}" : {
      "get" : {
        "description" : "Retrieves update annotations permissions for the requesting user.",
        "operationId" : "getUpdateAnnotationsPermissions",
        "parameters" : [ {
          "description" : "The UUID of the file.",
          "in" : "path",
          "name" : "fileUuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        }, {
          "description" : "The UUID of the annotation.",
          "in" : "path",
          "name" : "annotationUuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/putPermissionsResponse"
                }
              }
            },
            "description" : "permission info is returned"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/INVALID_JWT"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CURRENT_VERSION_NOT_FOUND"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Retrieves update annotations permissions.",
        "tags" : [ "Permissions" ]
      }
    },
    "/permissions/delete/files/{fileUuid}/annotations/{annotationUuid}" : {
      "get" : {
        "description" : "Retrieves delete annotations permissions for the requesting user.",
        "operationId" : "getDeleteAnnotationsPermissions",
        "parameters" : [ {
          "description" : "The UUID of the file.",
          "in" : "path",
          "name" : "fileUuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        }, {
          "description" : "The UUID of the annotation.",
          "in" : "path",
          "name" : "annotationUuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/deletePermissionsResponse"
                }
              }
            },
            "description" : "permission info is returned"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/INVALID_JWT"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CURRENT_VERSION_NOT_FOUND"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Retrieves delete annotations permissions.",
        "tags" : [ "Permissions" ]
      }
    },
    "/permissions/notes" : {
      "get" : {
        "description" : "Retrieves note permissions for all the lines of business.",
        "operationId" : "getNotePermissions",
        "parameters" : [ {
          "description" : "The Folder Identifier that the file will be associated to. The example provided is for identifying a veteran.<br><br>**Header Format**: folder-type:identifier-type:ID<br><br>**Valid Folder-Types**:<br> <br>* VETERAN - Allows: FILENUMBER, SSN, PARTICIPANT_ID, SEARCH, and EDIPI <br>* PERSON - Allows: PARTICIPANT_ID, SEARCH <br> <br> For search identifiers as a type, the ssn, date of birth, last name, and first name must be supplied on the ID field as query params encoded.",
          "example" : "VETERAN:FILENUMBER:987267855",
          "in" : "header",
          "name" : "X-Folder-URI",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "example" : [ {
                    "lineOfBusiness" : "VRE",
                    "hasCreateAccess" : true,
                    "hasAlertAccess" : false,
                    "hasSearchAccess" : true,
                    "hasArchiveAccess" : true
                  }, {
                    "lineOfBusiness" : "EDU",
                    "hasCreateAccess" : false,
                    "hasAlertAccess" : false,
                    "hasSearchAccess" : true,
                    "hasArchiveAccess" : false
                  } ],
                  "items" : {
                    "$ref" : "#/components/schemas/notePermissionsResponse"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "Note permission info is returned for each line of business."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/deleteBookmarks_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchFiles_403_response"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Retrieves note permissions.",
        "tags" : [ "Permissions" ]
      }
    },
    "/permissions/patch/files:move" : {
      "get" : {
        "description" : "Retrieves unassociate and move permissions for the requesting user.",
        "operationId" : "getMovePermissions",
        "parameters" : [ {
          "description" : "The Folder Identifier is the **source** file that wants to be moved. The example provided is for identifying a veteran.<br><br>**Header Format**: folder-type:identifier-type:ID<br><br>**Valid Folder-Types**:<br> <br>* **VETERAN** - Allows: FILENUMBER, SSN, PARTICIPANT_ID, SEARCH, and EDIPI <br>* **PERSON** - Allows: PARTICIPANT_ID <br>* **BIN** - Format: BIN:NAME:Unassociated <br>",
          "example" : "VETERAN:FILENUMBER:987267855",
          "in" : "header",
          "name" : "X-Folder-URI",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/movePermissionsResponse"
                }
              }
            },
            "description" : "permission info is returned"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/deleteBookmarks_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchFiles_403_response"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Retrieves user move permissions.",
        "tags" : [ "Permissions" ]
      }
    },
    "/permissions/manage/saved-filters" : {
      "get" : {
        "description" : "### Retrieves a user's permission to publish saved filters.\n This endpoint returns a user's permission to publish saved filters.",
        "operationId" : "getPublishSavedFiltersPermission",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/postPermissionsResponse"
                }
              }
            },
            "description" : "permission info is returned"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/INVALID_JWT"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Retrieves a user's permission to publish saved filters.",
        "tags" : [ "Permissions" ]
      }
    },
    "/folders/lastreadbycurrentuser" : {
      "get" : {
        "description" : "Returns the UUID of the document last read by the user within the specified folder.",
        "operationId" : "getLastReadDocumentId",
        "parameters" : [ {
          "description" : "The Folder Identifier being searched for last read document. The example provided is for identifying a veteran.<br><br>**Header Format**: folder-type:identifier-type:ID<br><br>**Valid Folder-Types**:<br> <br>* VETERAN - Allows: FILENUMBER, SSN, PARTICIPANT_ID, SEARCH, and EDIPI <br>* PERSON - Allows: PARTICIPANT_ID, SEARCH <br> <br> For identifiers as a type, the ssn, date of birth, last name, and first name must be supplied on the ID field as query params encoded.",
          "example" : "VETERAN:FILENUMBER:987267855",
          "in" : "header",
          "name" : "X-Folder-URI",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/lastReadDocumentResponse"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/lastReadDocumentResponse"
                }
              }
            },
            "description" : "Lookup was successful for the given folder identifier."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/deleteBookmarks_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchFiles_403_response"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Get Last Read Document",
        "tags" : [ "Last Read" ]
      }
    },
    "/documenttypes" : {
      "get" : {
        "description" : "Retrieves document types and alternative document types based on role.",
        "operationId" : "getDocumentTypes",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getDocumentTypesResponse"
                }
              }
            },
            "description" : "document types and alternative document types are returned"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/INVALID_JWT"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Retrieves document types and alternative document types.",
        "tags" : [ "Document Types" ]
      }
    },
    "/contentsources" : {
      "get" : {
        "description" : "Retrieves content sources for UI consumption.",
        "operationId" : "getContentSources",
        "parameters" : [ {
          "description" : "The Folder Identifier that the file will be associated to. The example provided is for identifying a veteran.<br><br>**Header Format**: folder-type:identifier-type:ID<br><br>**Valid Folder-Types**:<br> <br>* VETERAN - Allows: FILENUMBER, SSN, PARTICIPANT_ID, SEARCH, and EDIPI <br>* PERSON - Allows: PARTICIPANT_ID, SEARCH <br> <br> For search identifiers as a type, the ssn, date of birth, last name, and first name must be supplied on the ID field as query params encoded.",
          "example" : "VETERAN:FILENUMBER:987267855",
          "in" : "header",
          "name" : "X-Folder-URI",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getContentSourcesResponse"
                }
              }
            },
            "description" : "content sources are returned"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/deleteBookmarks_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchFiles_403_response"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Retrieves content sources.",
        "tags" : [ "Content Sources" ]
      }
    },
    "/folders/uploadsources" : {
      "get" : {
        "description" : "Retrieves upload sources for UI consumption.",
        "operationId" : "getUploadSources",
        "parameters" : [ {
          "description" : "The Folder Identifier that the file will be associated to. The example provided is for identifying a veteran.<br><br>**Header Format**: folder-type:identifier-type:ID<br><br>**Valid Folder-Types**:<br> <br>* VETERAN - Allows: FILENUMBER, SSN, PARTICIPANT_ID, SEARCH, and EDIPI <br>* PERSON - Allows: PARTICIPANT_ID, SEARCH <br> <br> For search identifiers as a type, the ssn, date of birth, last name, and first name must be supplied on the ID field as query params encoded.",
          "example" : "VETERAN:FILENUMBER:987267855",
          "in" : "header",
          "name" : "X-Folder-URI",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getUploadSourcesResponse"
                }
              }
            },
            "description" : "upload sources are returned"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/deleteBookmarks_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchFiles_403_response"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Retrieves upload sources.",
        "tags" : [ "Upload Sources" ]
      }
    },
    "/files/{uuid}/data/rawtext/ocr/raw" : {
      "get" : {
        "description" : "This endpoint will retrieve raw OCR data for the current version of a document represented by the UUID.",
        "operationId" : "getOcrRaw",
        "parameters" : [ {
          "description" : "The UUID of the raw OCR data to retrieve.",
          "in" : "path",
          "name" : "uuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "example" : {
                    "ocrRaw" : "This is example text to demonstrate the format of the response from this endpoint. Any text can be stored and retrieved, but it will be treated as plain text for the response."
                  },
                  "maxProperties" : 1,
                  "minProperties" : 1,
                  "type" : "object"
                }
              }
            },
            "description" : "Raw OCR text for the current version of a document is returned."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/INVALID_JWT"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getOcrRaw_404_response"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request. Response will contain a \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Retrieve raw OCR data for the current version of a document",
        "tags" : [ "OCR" ]
      },
      "post" : {
        "description" : "Create raw OCR text for the current version of the given document UUID. If raw OCR text data already exists for the given UUID, an error will occur.",
        "operationId" : "createOcrRaw",
        "parameters" : [ {
          "description" : "The UUID of the document on which to create OCR raw text.",
          "in" : "path",
          "name" : "uuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "text/plain" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "description" : "The raw OCR text to store for the current version of this document. This value will be treated as plain text.",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "A response which indicates the raw OCR data was successfully created."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/INVALID_JWT"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/vefsErrorResponse"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/updateOcrRaw_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request. Response will contain a \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Create raw OCR text for the current version of the given document UUID",
        "tags" : [ "OCR" ]
      },
      "put" : {
        "description" : "Update raw OCR text for the current version of the given document UUID. If raw OCR text data does not already exist for the given UUID in order to be updated, an error will occur.",
        "operationId" : "updateOcrRaw",
        "parameters" : [ {
          "description" : "The UUID of the document on which to update OCR raw text.",
          "in" : "path",
          "name" : "uuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "text/plain" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "description" : "The raw OCR text to store for the current version of this document. This value will be treated as plain text.",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "A response which indicates the raw OCR data was successfully updated."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/INVALID_JWT"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/vefsErrorResponse"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/updateOcrRaw_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request. Response will contain a \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Update raw OCR text for the current version of the given document UUID",
        "tags" : [ "OCR" ]
      }
    },
    "/files/{uuid}/data/rawtext/ocr/perspective/{key}" : {
      "get" : {
        "description" : "This endpoint will retrieve an OCR perspective text for the current version of a document represented by the UUID, and identified by a given perspective key.",
        "operationId" : "getOcrPerspective",
        "parameters" : [ {
          "description" : "The UUID of the OCR perspective data to retrieve.",
          "in" : "path",
          "name" : "uuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        }, {
          "description" : "The key of the OCR perspective data to retrieve.",
          "in" : "path",
          "name" : "key",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "example" : {
                    "testPerspective" : "This is example text to demonstrate the format of the response from this endpoint. Any text can be stored and retrieved, but it will be treated as plain text for the response."
                  },
                  "maxProperties" : 1,
                  "minProperties" : 1,
                  "type" : "object"
                }
              }
            },
            "description" : "Requested OCR perspective text for the current version of a document is returned."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getOcrPerspective_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getOcrRaw_404_response"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/vefsErrorResponse"
                }
              }
            },
            "description" : "There was an error encountered processing the Request. Response will contain a \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Retrieve OCR perspective text for the current version of a document by perspective key",
        "tags" : [ "OCR" ]
      },
      "post" : {
        "description" : "Creates an OCR perspective for the current version of the given document UUID. If the perspective key already exists for the given UUID, an error will occur.",
        "operationId" : "createOcrPerspective",
        "parameters" : [ {
          "description" : "The UUID of the document on which to create OCR perspective data.",
          "in" : "path",
          "name" : "uuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        }, {
          "description" : "The key of the OCR perspective data to create.",
          "in" : "path",
          "name" : "key",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "text/plain" : {
              "schema" : {
                "example" : "This is example text to demonstrate the format of the request body for this endpoint. Any text format can be stored and retrieved, but it will be treated as plain text.",
                "minLength" : 1,
                "type" : "string"
              }
            }
          },
          "description" : "Plain text data to store under the OCR perspective key in the current version of a document.",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "A response which indicates the OCR perspective data was successfully updated."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/INVALID_JWT"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/vefsErrorResponse"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/updateOcrRaw_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request. Response will contain a \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Create an OCR perspective for the current version of the given document UUID",
        "tags" : [ "OCR" ]
      },
      "put" : {
        "description" : "Updates an OCR perspective for the current version of the given document UUID. If the perspective key does not exist for the given UUID, an error will occur.",
        "operationId" : "updateOcrPerspective",
        "parameters" : [ {
          "description" : "The UUID of the document on which to update OCR perspective data.",
          "in" : "path",
          "name" : "uuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        }, {
          "description" : "The key of the OCR perspective data to update.",
          "in" : "path",
          "name" : "key",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "text/plain" : {
              "schema" : {
                "example" : "This is example text to demonstrate the format of the request body for this endpoint. Any text format can be stored and retrieved, but it will be treated as plain text.",
                "minLength" : 1,
                "type" : "string"
              }
            }
          },
          "description" : "Plain text data to store under the OCR perspective key in the current version of a document.",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "A response which indicates the OCR perspective data was successfully updated."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/INVALID_JWT"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/vefsErrorResponse"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/updateOcrRaw_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request. Response will contain a \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Update an OCR perspective for the current version of the given document UUID",
        "tags" : [ "OCR" ]
      }
    },
    "/ocr/reprocess/file" : {
      "post" : {
        "description" : "### Upload a file.\n This endpoint when given a csv file containing existing textract job ids is able to reanalyze those jobs",
        "operationId" : "upload",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "encoding" : {
                "file" : {
                  "contentType" : "text/csv"
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/ocrReanalyze"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ocrReanalyzeResponse"
                }
              }
            },
            "description" : "Returns json obect containing duplicates, totalProcessed, failed counts and a UUID"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/INVALID_JWT"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/upload_500_response_1"
                }
              }
            },
            "description" : "There was an error encountered processing the Request. Response will contain a \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Upload a csv file with textract job ids to be reprocessed",
        "tags" : [ "OCR" ]
      }
    },
    "/notes" : {
      "post" : {
        "description" : "### Create a new note.\n This endpoint allows a new note to be added for a Veteran",
        "operationId" : "createNote",
        "parameters" : [ {
          "description" : "The Folder Identifier that the note will be associated to. The example provided is for identifying a veteran.<br><br>**Header Format**: folder-type:identifier-type:ID<br><br>**Valid Folder Types**:<br><br>* VETERAN<br><br>**Valid Identifier Types**:<br><br>* FILENUMBER<br>* SSN<br>* PARTICIPANT_ID<br>* EDIPI",
          "example" : "VETERAN:FILENUMBER:987267855",
          "in" : "header",
          "name" : "X-Folder-URI",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/createNoteRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/createNoteResponse"
                }
              }
            },
            "description" : "Response containing the newly created note UUID."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/saveBookmarks_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchFiles_403_response"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/createNote_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Create a new note",
        "tags" : [ "Notes" ]
      }
    },
    "/notes:search" : {
      "post" : {
        "description" : "### Searches Notes by provided FolderIdentifier, and search request filers.",
        "operationId" : "searchNotes",
        "parameters" : [ {
          "description" : "The Folder Identifier that the file will be associated to. The example provided is for identifying a veteran.<br><br>**Header Format**: folder-type:identifier-type:ID<br><br>**Valid Folder-Types**:<br> <br>* VETERAN - Allows: FILENUMBER, SSN, PARTICIPANT_ID, SEARCH, and EDIPI <br>* PERSON - Allows: PARTICIPANT_ID, SEARCH <br> <br> For search identifiers as a type, the ssn, date of birth, last name, and first name must be supplied on the ID field as query params encoded.",
          "example" : "VETERAN:FILENUMBER:987267855",
          "in" : "header",
          "name" : "X-Folder-URI",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/searchNotesRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchNotesResponse"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchNotesResponse"
                }
              }
            },
            "description" : "Search was successful given provided search request."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchNotes_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchFiles_403_response"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchNotes_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Search Notes",
        "tags" : [ "Notes" ]
      }
    },
    "/notes/{uuid}" : {
      "delete" : {
        "description" : "Archives a note.",
        "operationId" : "archiveNote",
        "parameters" : [ {
          "description" : "The UUID of the note.",
          "in" : "path",
          "name" : "uuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Note has been Archived"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/INVALID_JWT"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CURRENT_VERSION_NOT_FOUND"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getContent_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Archive a note.",
        "tags" : [ "Notes" ]
      }
    },
    "/migrate/note" : {
      "post" : {
        "description" : "### Migrate a new note.\n This endpoint allows a note to be migrated from an external system for a Veteran.\n It mirrors the creation endpoint with the ability to also send in existing audit information.",
        "operationId" : "migrateNote",
        "parameters" : [ {
          "description" : "The Folder Identifier that the file will be associated to. The example provided is for identifying a veteran.<br><br>**Header Format**: folder-type:identifier-type:ID<br><br>**Valid Folder-Types**:<br> <br>* VETERAN - Allows: FILENUMBER, SSN, PARTICIPANT_ID, SEARCH, and EDIPI <br>* PERSON - Allows: PARTICIPANT_ID, SEARCH <br> <br> For search identifiers as a type, the ssn, date of birth, last name, and first name must be supplied on the ID field as query params encoded.",
          "example" : "VETERAN:FILENUMBER:987267855",
          "in" : "header",
          "name" : "X-Folder-URI",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "items" : {
                  "$ref" : "#/components/schemas/migrateNoteRequest"
                },
                "type" : "array"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/migrateNoteResponse"
                }
              }
            },
            "description" : "Response containing the newly created note UUID."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchFiles_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchFiles_403_response"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/migrateNote_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Migrates a note",
        "tags" : [ "Notes" ]
      }
    },
    "/publishedfilters" : {
      "get" : {
        "description" : "### Get Published and Active Filters.\nThis endpoint will retrieve all the published file filters that are currently active.",
        "operationId" : "getPublishedFilters",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseObject"
                }
              }
            },
            "description" : "Successfully returns the list of published active filters."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/INVALID_JWT"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "The request is not authorized. Please verify credentials used in the request."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Retrieve the list of published file filters",
        "tags" : [ "Saved Filter" ]
      }
    },
    "/savedfilters" : {
      "get" : {
        "description" : "### Get Saved Subscribed and Personal Filters. \nThis endpoint will return a list containing both a users saved subscribed filters\nas well as their saved personal filters.",
        "operationId" : "retrieveSavedFilters",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseObject_1"
                }
              }
            },
            "description" : "Successfully returns the list of both subscribed and personal filters for the requesting user."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/INVALID_JWT"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "The request is not authorized. Please verify credentials used in the request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RESOURCE_NOT_FOUND"
                }
              }
            },
            "description" : "Resource Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNABLE_TO_RETRIEVE_USER"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/retrieveSavedFilters_501_response"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Retrieve list of user saved filters",
        "tags" : [ "Saved Filter" ]
      },
      "post" : {
        "description" : "### Save and Publish a Filter.  \nAllows admin to save and publish a filter.",
        "operationId" : "saveAndPublishFilter",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilterRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/saveAndPublishFilter_200_response"
                }
              }
            },
            "description" : "Successfully saves and publishes filter."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/associate_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence action is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "The request is not authorized. Please verify credentials used in the request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RESOURCE_NOT_FOUND"
                }
              }
            },
            "description" : "Resource Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/saveBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Save and publish a filter.",
        "tags" : [ "Saved Filter" ]
      }
    },
    "/savedfilters/{id}" : {
      "patch" : {
        "description" : "### Edit Existing Personal Filter. \nAllows the requesting user to edit the name and content of personal filters.\nIf requesting user is a NWQ admin then they will also be able to edit the published\nstatus of the filter.",
        "operationId" : "updateSavedFilter",
        "parameters" : [ {
          "description" : "The id of the filter to be amended.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/updateSavedFilter_200_response"
                }
              }
            },
            "description" : "Successfully edit the chosen filter."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/associate_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "The request is not authorized. Please verify credentials used in the request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RESOURCE_NOT_FOUND"
                }
              }
            },
            "description" : "Resource Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Allows user to edit existing filter",
        "tags" : [ "Saved Filter" ]
      }
    },
    "/publishedfilters/{id}/subscribe" : {
      "post" : {
        "description" : "### Subscribe to Published Filter.  \nAllows the requesting user to subscribe to a published filter which will be added\nto their list of saved subscribed filters.",
        "operationId" : "subscribeToPublishedSavedFilter",
        "parameters" : [ {
          "description" : "The id of the filter user wishes to subscribe to.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/subscribeToPublishedSavedFilter_200_response"
                }
              }
            },
            "description" : "Successfully returns the newly created record in VBMSUI.SAVED_FILTER_SUBSCRIPTION."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/INVALID_JWT"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "The request is not authorized. Please verify credentials used in the request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RESOURCE_NOT_FOUND"
                }
              }
            },
            "description" : "Resource Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Allows user to subscribe to a published filter",
        "tags" : [ "Saved Filter" ]
      }
    },
    "/publishedfilters/{id}/unsubscribe" : {
      "post" : {
        "description" : "### Unsubscribe to a Filter. \nAllows the requesting user to unsubscribe to a published filter which will then\nremove this filter from their list of saved subscribed filters.",
        "operationId" : "unsubscribeFromPublishedSavedFilter",
        "parameters" : [ {
          "description" : "The id of the filter to which the user wants to unsubscribe",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/unsubscribeFromPublishedSavedFilter_200_response"
                }
              }
            },
            "description" : "Successfully unsubscribes to user filter and removes it from their subscribed list of filters."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/INVALID_JWT"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "The request is not authorized. Please verify credentials used in the request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RESOURCE_NOT_FOUND"
                }
              }
            },
            "description" : "Resource Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Allows user to unsubscribe to a published filter",
        "tags" : [ "Saved Filter" ]
      }
    },
    "/manage/queries/{id}" : {
      "delete" : {
        "description" : "### Deletes a saved file query.\n This endpoint allows a user to delete a saved file query using an id.",
        "operationId" : "deleteSavedFileQuery",
        "parameters" : [ {
          "description" : "id of the saved file query you wish to delete.",
          "in" : "path",
          "name" : "queryId",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/deleteSavedFileQuery_200_response"
                }
              }
            },
            "description" : "Saved file query for the matching id is deleted."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/INVALID_JWT"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RESOURCE_NOT_FOUND"
                }
              }
            },
            "description" : "Resource Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Delete a saved file query",
        "tags" : [ "File Queries" ]
      }
    },
    "/folders/notifications/move" : {
      "delete" : {
        "description" : "Updates notification to be acknowledged.",
        "operationId" : "deleteMoveNotifications",
        "parameters" : [ {
          "description" : "The Folder Identifier is the **source** file that wants to be moved. The example provided is for identifying a veteran.<br><br>**Header Format**: folder-type:identifier-type:ID<br><br>**Valid Folder-Types**:<br> <br>* **VETERAN** - Allows: FILENUMBER, SSN, PARTICIPANT_ID, SEARCH, and EDIPI <br>* **PERSON** - Allows: PARTICIPANT_ID <br>* **BIN** - Format: BIN:NAME:Unassociated <br>",
          "example" : "VETERAN:FILENUMBER:987267855",
          "in" : "header",
          "name" : "X-Folder-URI",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Notification Dismissal was successful"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/deleteBookmarks_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchFiles_403_response"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Deletes move notifications.",
        "tags" : [ "Move Notifications" ]
      },
      "get" : {
        "description" : "Retrieves all the move notifications.",
        "operationId" : "getMoveNotifications",
        "parameters" : [ {
          "description" : "The Folder Identifier is the **source** file that wants to be moved. The example provided is for identifying a veteran.<br><br>**Header Format**: folder-type:identifier-type:ID<br><br>**Valid Folder-Types**:<br> <br>* **VETERAN** - Allows: FILENUMBER, SSN, PARTICIPANT_ID, SEARCH, and EDIPI <br>* **PERSON** - Allows: PARTICIPANT_ID <br>* **BIN** - Format: BIN:NAME:Unassociated <br>",
          "example" : "VETERAN:FILENUMBER:987267855",
          "in" : "header",
          "name" : "X-Folder-URI",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/moveNotificationsResponse"
                }
              }
            },
            "description" : "Response indicates a successful move notification retrieval"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/deleteBookmarks_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchFiles_403_response"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Retrieves move notifications.",
        "tags" : [ "Move Notifications" ]
      }
    },
    "/files/{uuid}/periodOfService" : {
      "get" : {
        "description" : "### Retrieves the Period of Service Documents of a Veteran. This includes information such as EOD, RAD, Verified/Vads Verified Status.\n This endpoint allows to get the Period of Service Information.",
        "operationId" : "getPeriodOfServiceInfo",
        "parameters" : [ {
          "description" : "The UUID of the file data.",
          "in" : "path",
          "name" : "uuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/periodOfServiceDocumentsResponse"
                }
              }
            },
            "description" : "Successfully retrieved the Period of Service Documents"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CURRENT_VERSION_NOT_FOUND"
                }
              }
            },
            "description" : "Not Found"
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Retrieves Period Of Service Documents",
        "tags" : [ "Period Of Service" ]
      }
    },
    "/files/{uuid}/{versionuuid}/content" : {
      "get" : {
        "description" : "Retrieves content based on file UUID and version UUID",
        "operationId" : "getVersionContent",
        "parameters" : [ {
          "description" : "The UUID of the file data.",
          "in" : "path",
          "name" : "uuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        }, {
          "description" : "Version uuid of the file data.",
          "in" : "path",
          "name" : "versionUuid",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/pdf" : { }
            },
            "description" : "Content for specified version file is returned."
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/INVALID_JWT"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "JWT contains claims which indicate the consumer is not authorized to access the resource."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UNAUTHORIZED"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CURRENT_VERSION_NOT_FOUND"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getContent_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Retrieves file content for given version UUID",
        "tags" : [ "Version Content" ]
      }
    },
    "/manifest" : {
      "post" : {
        "operationId" : "uploadManifest",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/uploadRequest_1"
              }
            }
          },
          "description" : "File upload manifest request with associated document identifiers to upload"
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/uploadResponse_1"
                }
              }
            },
            "description" : "Successful creation of the manifest"
          }
        },
        "summary" : "Create a new file upload manifest with a list of associated documents",
        "tags" : [ "Manifest" ]
      }
    },
    "/manifest/{fileNumber}/manifest/{manifestId}" : {
      "get" : {
        "description" : "Retrieves the manifest data from the database.",
        "operationId" : "getManifestById",
        "parameters" : [ {
          "description" : "The file number associated with the manifest.",
          "in" : "path",
          "name" : "fileNumber",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The manifest ID.",
          "in" : "path",
          "name" : "manifestId",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getManifestResponse"
                }
              }
            },
            "description" : "Successful retrieval of the manifest"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/deleteBookmarks_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchFiles_403_response"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Retrieves the manifest using manifest id.",
        "tags" : [ "Manifest" ]
      },
      "patch" : {
        "description" : "Updates a manifest by adding documents or setting a claim ID.",
        "operationId" : "updateManifest",
        "parameters" : [ {
          "description" : "The file number associated with the manifest.",
          "in" : "path",
          "name" : "fileNumber",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The manifest ID.",
          "in" : "path",
          "name" : "manifestId",
          "required" : true,
          "schema" : {
            "format" : "uuid",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/manifestPatchRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "description" : "Standard VEFS response indicating a successful operation",
                  "type" : "object"
                }
              }
            },
            "description" : "Successful update of the manifest"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/deleteBookmarks_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchFiles_403_response"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used invefsResponse.yml the request."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "description" : "Standard VEFS response indicating the manifest was not found",
                  "type" : "object"
                }
              }
            },
            "description" : "The requested manifest was not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Updates an existing manifest.",
        "tags" : [ "Manifest" ]
      }
    },
    "/manifest/{fileNumber}/claim/{claimId}" : {
      "get" : {
        "description" : "Retrieves the manifest data from the database.",
        "operationId" : "getManifestByClaimId",
        "parameters" : [ {
          "description" : "The file number associated with the manifest.",
          "in" : "path",
          "name" : "fileNumber",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "The claim ID.",
          "in" : "path",
          "name" : "claimId",
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getManifestResponse"
                }
              }
            },
            "description" : "Successful retrieval of the manifest"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/deleteBookmarks_400_response"
                }
              }
            },
            "description" : "Server was unable to understand the request. This may come back as an empty response if the json is malformed or not understood by the server."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/noJwtResponse"
                }
              }
            },
            "description" : "The authentication mechanism failed and hence access is forbidden."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/searchFiles_403_response"
                }
              }
            },
            "description" : "The request is not authorized.  Please verify credentials used in the request."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getBookmarks_500_response"
                }
              }
            },
            "description" : "There was an error encountered processing the Request.  Response will contain a  \"messages\" element that will provide further information on the error.  Please retry.  If problem persists, please contact support with a copy of the Response."
          },
          "501" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
                }
              }
            },
            "description" : "This endpoint is not enabled."
          }
        },
        "summary" : "Retrieves the manifest using claim id.",
        "tags" : [ "Manifest" ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "searchFileRequest" : {
        "description" : "Request containing search filters, sorting information, and paging information. The filter block is required, but the individual filters are optional.",
        "properties" : {
          "pageRequest" : {
            "$ref" : "#/components/schemas/pageRequest"
          },
          "filters" : {
            "$ref" : "#/components/schemas/Filters"
          },
          "sorts" : {
            "$ref" : "#/components/schemas/Sorts"
          }
        },
        "required" : [ "filters", "pageRequest" ],
        "title" : "Search Files Request",
        "type" : "object"
      },
      "Filters" : {
        "properties" : {
          "providerData.documentTypeId" : {
            "$ref" : "#/components/schemas/documentTypeIdFilter"
          },
          "providerData.documentCategoryId" : {
            "$ref" : "#/components/schemas/documentCategoryIdFilter"
          },
          "providerData.subject" : {
            "$ref" : "#/components/schemas/subjectFilter"
          },
          "systemData.contentName" : {
            "$ref" : "#/components/schemas/contentNameFilter"
          },
          "providerData.contentSource" : {
            "$ref" : "#/components/schemas/contentSourceFilter"
          },
          "providerData.dateVaReceivedDocument" : {
            "$ref" : "#/components/schemas/dateVaReceivedDocumentFilter"
          },
          "providerData.endProductCode" : {
            "$ref" : "#/components/schemas/endProductCodeFilter"
          },
          "providerData.associatedClaimId" : {
            "$ref" : "#/components/schemas/associatedClaimId"
          },
          "providerData.associationDateTime" : {
            "$ref" : "#/components/schemas/associationDateTimeFilter"
          },
          "systemData.uploadedDateTime" : {
            "$ref" : "#/components/schemas/associationDateTimeFilter"
          },
          "systemData.mimeType" : {
            "$ref" : "#/components/schemas/mimeTypeFilter"
          },
          "systemData.uploadSource" : {
            "$ref" : "#/components/schemas/uploadSourceFilter"
          },
          "providerData.claimantFirstName" : {
            "$ref" : "#/components/schemas/claimantFirstNameFilter"
          },
          "providerData.claimantLastName" : {
            "$ref" : "#/components/schemas/claimantLastNameFilter"
          },
          "providerData.claimantMiddleInitial" : {
            "$ref" : "#/components/schemas/claimantMiddleInitialFilter"
          },
          "providerData.claimantSsn" : {
            "$ref" : "#/components/schemas/claimantSsnFilter"
          },
          "providerData.claimantDateOfBirth" : {
            "$ref" : "#/components/schemas/claimantDateOfBirthFilter"
          },
          "providerData.benefitTypeId" : {
            "$ref" : "#/components/schemas/benefitTypeIdFilter"
          },
          "rawTextData.ocrPerspective" : {
            "$ref" : "#/components/schemas/ocrPerspectiveFilter"
          },
          "providerData.payeeCode" : {
            "$ref" : "#/components/schemas/payeeCodeFilter"
          },
          "providerData.regionalProcessingOffice" : {
            "$ref" : "#/components/schemas/regionalProcessingOfficeFilter"
          },
          "providerData.facilityCode" : {
            "$ref" : "#/components/schemas/facilityCodeFilter"
          },
          "providerData.claimantParticipantId" : {
            "$ref" : "#/components/schemas/claimantParticipantIdFilter"
          },
          "providerData.lineOfBusinessId" : {
            "$ref" : "#/components/schemas/lineOfBusinessIdFilter"
          },
          "providerData.duplicateInformation.groupId" : {
            "$ref" : "#/components/schemas/duplicateGroupIdFilter"
          },
          "providerData.textSearchable" : {
            "$ref" : "#/components/schemas/textSearchableFilter"
          },
          "providerData.hasAnnotations" : {
            "$ref" : "#/components/schemas/hasAnnotationsFilter"
          },
          "providerData.annotationType" : {
            "$ref" : "#/components/schemas/annotationTypeFilter"
          },
          "providerData.annotationKeyword" : {
            "$ref" : "#/components/schemas/annotationKeywordFilter"
          },
          "providerData.hasNotes" : {
            "$ref" : "#/components/schemas/hasNotesFilter"
          },
          "providerData.ocrStatus" : {
            "$ref" : "#/components/schemas/ocrStatusFilter"
          },
          "textContent" : {
            "$ref" : "#/components/schemas/textContentFilter"
          }
        }
      },
      "Sorts" : {
        "items" : { },
        "type" : "array"
      },
      "searchFileResponse" : {
        "description" : "Response containing results from search with applied filters.",
        "properties" : {
          "page" : {
            "$ref" : "#/components/schemas/pageResponse"
          },
          "files" : {
            "items" : {
              "$ref" : "#/components/schemas/currentFileDataComposition"
            },
            "type" : "array"
          }
        },
        "title" : "Search File Response",
        "type" : "object"
      },
      "INVALID_JWT" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR40009" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "JWT provided does not contain expected claims, or contains invalid claim value(s)." ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "INVALID_REQUEST" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR40010" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "Invalid request data." ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "INVALID_X_EFOLDER_URI" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR40008" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "Header X-EFOLDER-URI contained invalid value %s" ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "UNABLE_TO_VERIFY_FOLDER" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR50014" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "Unable to confirm validity of folder with Type %s using Identifier Type %s." ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "DOES_NOT_CONFORM_TO_SCHEMA" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR40001" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "Error message" ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "VALIDATE_INVALID_VALUE" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR40003" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "Key: %s contained invalid value(s) %s" ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "noJwtResponse" : {
        "description" : "Error response when no JWT is present on the request",
        "properties" : {
          "messages" : {
            "items" : {
              "$ref" : "#/components/schemas/noJwtResponse_messages_inner"
            },
            "type" : "array"
          }
        },
        "title" : "Vefs No JWT Error Response",
        "type" : "object"
      },
      "UNABLE_TO_RETRIEVE_PERSON" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR40302" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "Unable to retrieve folder of Type: %s using Identifier: %s." ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "UNABLE_TO_RETRIEVE_VETERAN" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR40302" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "Unable to retrieve folder of Type: %s using Identifier: %s." ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "UNAUTHORIZED" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR40301" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "Unauthorized." ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "UNABLE_TO_RETRIEVE_USER" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR50006" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "Unknown error encountered retrieving user information." ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "NO_RESULTS_RETURNED" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR50006" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "No results returned for %s." ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "INVALID_EVALUATION_TYPE" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR50015" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "Error encountered processing - %s is not a valid filter evaluation type for %s" ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "NULL_RESPONSE" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR50051" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "Null response found on payload." ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "UNKNOWN_ERROR" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR50009" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "Unknown system error occurred." ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "JSON_DESERIALIZATION" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR50011" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "JSON deserialization error." ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "JSON_SERIALIZATION" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR50010" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "JSON serialization error." ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "OPERATION_NOT_ENABLED" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR50102" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "Operation not enabled." ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "uploadRequest" : {
        "description" : "Upload request containing the file binary and upload payload data",
        "properties" : {
          "payload" : {
            "$ref" : "#/components/schemas/payload"
          },
          "file" : {
            "format" : "binary",
            "type" : "string"
          }
        },
        "required" : [ "file", "payload" ],
        "title" : "Upload Request",
        "type" : "object"
      },
      "uploadResponse" : {
        "properties" : {
          "uuid" : {
            "description" : "UUID representing the file as a whole. This is used for all primary VEFS-Operations.",
            "example" : "c30626c9-954d-4dd1-9f70-1e38756d9d97",
            "format" : "uuid",
            "type" : "string"
          },
          "currentVersionUuid" : {
            "description" : "UUID representing the single point-in-time version of the document.",
            "example" : "c30626c9-954d-4dd1-9f70-1e38756d9d98",
            "format" : "uuid",
            "type" : "string"
          },
          "conversionInformation" : {
            "$ref" : "#/components/schemas/conversionInformation"
          }
        },
        "title" : "Upload Response",
        "type" : "object"
      },
      "DUPLICATE_PROVIDERDATA_KEYS" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR40002" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "Duplicate key: providerData contained duplicate keys %s" ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "DISABLED_IDENTIFER" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR40059" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "Identifier %s is not enabled" ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "INVALID_MIMETYPE" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR41501" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "File binary content contained magic bytes indicates mime type: %s which does not match accepted mime types: %s" ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "WRONG_MIMETYPE_EXTENSION" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR41502" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "File binary content contained magic bytes indicates mime type: %s which does not match filename extension: %s" ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "UNABLE_TO_DETERMINE_MIMETYPE" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR50001" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "File binary content's mime type was unable to be determined. Accepted Type(s): %s" ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "UNABLE_TO_UPLOAD_DOCUMENT_CONTENT" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR50002" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "Unknown error encountered uploading content." ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "UNABLE_TO_PERSIST_DATA" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR50003" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "Unknown error encountered saving data." ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "UNABLE_TO_CONVERT" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR50012" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "Unable to convert document from mime type %s to mime type %s" ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "updateRequest" : {
        "description" : "Request containing the updated file binary and payload data",
        "properties" : {
          "payload" : {
            "$ref" : "#/components/schemas/payload_1"
          },
          "file" : {
            "format" : "binary",
            "type" : "string"
          }
        },
        "required" : [ "file", "payload" ],
        "title" : "Update File Request",
        "type" : "object"
      },
      "updateResponse" : {
        "properties" : {
          "uuid" : {
            "description" : "UUID representing the file as a whole. This is used for all primary  Operations.",
            "example" : "c30626c9-954d-4dd1-9f70-1e38756d9d97",
            "format" : "uuid",
            "type" : "string"
          },
          "currentVersionUuid" : {
            "description" : "UUID representing the single point-in-time version of the document.",
            "example" : "c30626c9-954d-4dd1-9f70-1e38756d9d98",
            "format" : "uuid",
            "type" : "string"
          },
          "conversionInformation" : {
            "$ref" : "#/components/schemas/conversionInformation"
          }
        },
        "title" : "Update File Response",
        "type" : "object"
      },
      "CURRENT_VERSION_NOT_FOUND" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR40402" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "Current Version not found for UUID %s." ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "UNABLE_TO_REMEDIATE_DATA" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR50013" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "Unknown error encountered remediating data." ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "currentFileDataComposition" : {
        "description" : "Schema for the response data for getFileData and search endpoints.",
        "properties" : {
          "owner" : {
            "$ref" : "#/components/schemas/folderIdentifier"
          },
          "uuid" : {
            "format" : "uuid",
            "type" : "string"
          },
          "currentVersionUuid" : {
            "format" : "uuid",
            "type" : "string"
          },
          "currentVersion" : {
            "$ref" : "#/components/schemas/versionComposition"
          }
        },
        "title" : "Current File Data Response",
        "type" : "object"
      },
      "currentFileDataCompositionWithRawTextData" : {
        "description" : "Schema for the response data for getFileData and search endpoints that contains raw text data.",
        "properties" : {
          "owner" : {
            "$ref" : "#/components/schemas/folderIdentifier"
          },
          "uuid" : {
            "format" : "uuid",
            "type" : "string"
          },
          "currentVersionUuid" : {
            "format" : "uuid",
            "type" : "string"
          },
          "currentVersion" : {
            "$ref" : "#/components/schemas/versionCompositionWithRawTextData"
          }
        },
        "title" : "Current File Data Response including Raw Text Data",
        "type" : "object"
      },
      "INVALID_RESPONSE" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR50050" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "Invalid response found on payload." ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "updateDataRequest" : {
        "description" : "Request containing the provider data for the update file data endpoint.",
        "properties" : {
          "providerData" : {
            "$ref" : "#/components/schemas/updateDataProviderData"
          }
        },
        "title" : "Update File Data Request",
        "type" : "object"
      },
      "ocrDataResponse" : {
        "description" : "Response containing OCR data for a file",
        "properties" : {
          "processingInformation" : {
            "$ref" : "#/components/schemas/processingInformation"
          },
          "file" : {
            "$ref" : "#/components/schemas/file"
          }
        },
        "required" : [ "file", "processingInformation" ],
        "title" : "OCR Data Response",
        "type" : "object"
      },
      "RESOURCE_NOT_FOUND" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "description" : "Enumerated Error Code indicating the error classification.",
              "enum" : [ "VEFSERR40401" ],
              "title" : "Error Code",
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "Expected resource not found." ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "ocrDataRequest" : {
        "description" : "Request containing OCR data for a file",
        "properties" : {
          "processingInformation" : {
            "$ref" : "#/components/schemas/processingInformation"
          },
          "file" : {
            "$ref" : "#/components/schemas/file"
          }
        },
        "required" : [ "file", "processingInformation" ],
        "title" : "OCR Data Request",
        "type" : "object"
      },
      "PAYLOAD_VALIDATION" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR50008" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "Payload invalid." ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "annotationResponseModel" : {
        "description" : "Annotations for UI consumption.",
        "properties" : {
          "rectangles" : {
            "items" : {
              "$ref" : "#/components/schemas/basic"
            },
            "type" : "array"
          },
          "ovals" : {
            "items" : {
              "$ref" : "#/components/schemas/basic"
            },
            "type" : "array"
          },
          "lines" : {
            "items" : {
              "$ref" : "#/components/schemas/lines"
            },
            "type" : "array"
          },
          "callout" : {
            "items" : {
              "$ref" : "#/components/schemas/callout"
            },
            "type" : "array"
          },
          "freetext" : {
            "items" : {
              "$ref" : "#/components/schemas/freetext"
            },
            "type" : "array"
          },
          "icons" : {
            "items" : {
              "$ref" : "#/components/schemas/notes"
            },
            "type" : "array"
          },
          "stamps" : {
            "items" : {
              "$ref" : "#/components/schemas/stamps"
            },
            "type" : "array"
          },
          "highlights" : {
            "items" : {
              "$ref" : "#/components/schemas/textSelection"
            },
            "type" : "array"
          },
          "underlines" : {
            "items" : {
              "$ref" : "#/components/schemas/textSelection"
            },
            "type" : "array"
          },
          "strikeouts" : {
            "items" : {
              "$ref" : "#/components/schemas/textSelection"
            },
            "type" : "array"
          }
        },
        "title" : "Annotation Response Model",
        "type" : "object"
      },
      "basicAnnotationRequest" : {
        "additionalProperties" : false,
        "description" : "Schema for circle and square type annotations.",
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/basicAnnotations"
          },
          "title" : {
            "type" : "string"
          },
          "comment" : {
            "type" : "string"
          },
          "pageNumber" : {
            "example" : 1,
            "type" : "integer"
          },
          "position" : {
            "$ref" : "#/components/schemas/position"
          },
          "size" : {
            "$ref" : "#/components/schemas/annotationSize"
          }
        },
        "required" : [ "pageNumber", "position", "size", "title", "type" ],
        "title" : "Basic Annotation Save Request",
        "type" : "object"
      },
      "lineAnnotationRequest" : {
        "properties" : {
          "type" : {
            "example" : "line",
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "pageNumber" : {
            "example" : 1,
            "type" : "integer"
          },
          "points" : {
            "$ref" : "#/components/schemas/points"
          }
        },
        "required" : [ "Points", "pageNumber", "title", "type" ],
        "title" : "Line Annotation Save Request",
        "type" : "object"
      },
      "calloutAnnotationRequest" : {
        "additionalProperties" : false,
        "properties" : {
          "type" : {
            "example" : "callout",
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "pageNumber" : {
            "example" : 1,
            "type" : "integer"
          },
          "comment" : {
            "type" : "string"
          },
          "tailDirection" : {
            "$ref" : "#/components/schemas/tailDirection"
          },
          "position" : {
            "$ref" : "#/components/schemas/position"
          },
          "size" : {
            "$ref" : "#/components/schemas/annotationSize"
          }
        },
        "required" : [ "pageNumber", "position", "size", "tailDirection", "title", "type" ],
        "title" : "Callout Annotation Save Request",
        "type" : "object"
      },
      "freetextAnnotationRequest" : {
        "additionalProperties" : false,
        "properties" : {
          "type" : {
            "example" : "freetext",
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "comment" : {
            "type" : "string"
          },
          "pageNumber" : {
            "example" : 1,
            "type" : "integer"
          },
          "position" : {
            "$ref" : "#/components/schemas/position"
          },
          "size" : {
            "$ref" : "#/components/schemas/annotationSize"
          }
        },
        "required" : [ "pageNumber", "position", "size", "title", "type" ],
        "title" : "Freetext Annotation Request",
        "type" : "object"
      },
      "noteAnnotationRequest" : {
        "additionalProperties" : false,
        "properties" : {
          "type" : {
            "example" : "icon",
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "comment" : {
            "type" : "string"
          },
          "pageNumber" : {
            "example" : 1,
            "type" : "integer"
          },
          "position" : {
            "$ref" : "#/components/schemas/position"
          },
          "size" : {
            "$ref" : "#/components/schemas/annotationSize"
          },
          "icon" : {
            "$ref" : "#/components/schemas/icon"
          }
        },
        "required" : [ "icon", "pageNumber", "position", "size", "title", "type" ],
        "title" : "Icon Annotation Request",
        "type" : "object"
      },
      "stampAnnotationRequest" : {
        "additionalProperties" : false,
        "properties" : {
          "type" : {
            "example" : "stamp",
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "comment" : {
            "type" : "string"
          },
          "pageNumber" : {
            "example" : 1,
            "type" : "integer"
          },
          "position" : {
            "$ref" : "#/components/schemas/position"
          },
          "size" : {
            "$ref" : "#/components/schemas/annotationSize"
          },
          "image" : {
            "$ref" : "#/components/schemas/stamp"
          }
        },
        "required" : [ "image", "pageNumber", "position", "size", "title", "type" ],
        "title" : "Stamp Annotation Request",
        "type" : "object"
      },
      "textSelectionRequest" : {
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/textSelectionAnnotations"
          },
          "title" : {
            "type" : "string"
          },
          "comment" : {
            "type" : "string"
          },
          "pageNumber" : {
            "example" : 1,
            "type" : "integer"
          },
          "selectedAreas" : {
            "$ref" : "#/components/schemas/selectedAreas"
          }
        },
        "required" : [ "pageNumber", "selectedAreas", "title", "type" ],
        "title" : "Text Selection Annotation Request",
        "type" : "object"
      },
      "getBookmarksResponseModel" : {
        "description" : "Bookmarks for UI consumption.",
        "properties" : {
          "VBA" : {
            "$ref" : "#/components/schemas/bookmarkRealmResponseModel"
          },
          "VRO" : {
            "$ref" : "#/components/schemas/bookmarkRealmResponseModel"
          },
          "BVA" : {
            "$ref" : "#/components/schemas/bookmarkRealmResponseModel"
          }
        },
        "title" : "Get Bookmarks Response Model",
        "type" : "object"
      },
      "saveBookmarksRequest" : {
        "additionalProperties" : false,
        "properties" : {
          "appeals" : {
            "$ref" : "#/components/schemas/saveBookmarksRequest_appeals"
          },
          "workingNotes" : {
            "$ref" : "#/components/schemas/saveBookmarksRequest_workingNotes"
          },
          "medical" : {
            "$ref" : "#/components/schemas/saveBookmarksRequest_medical"
          },
          "deferral" : {
            "$ref" : "#/components/schemas/saveBookmarksRequest_deferral"
          },
          "dependency" : {
            "$ref" : "#/components/schemas/saveBookmarksRequest_dependency"
          },
          "peerReview" : {
            "$ref" : "#/components/schemas/saveBookmarksRequest_peerReview"
          }
        },
        "title" : "Save Bookmark Request",
        "type" : "object"
      },
      "bookmarkResponseModel" : {
        "properties" : {
          "type" : {
            "example" : "WORKING_NOTES",
            "type" : "string"
          },
          "uuid" : {
            "example" : "00000000-0000-0000-0000-00000229ece2",
            "type" : "string"
          },
          "created" : {
            "$ref" : "#/components/schemas/bookmarkResponseModel_created"
          },
          "updated" : {
            "$ref" : "#/components/schemas/bookmarkResponseModel_created"
          },
          "comment" : {
            "example" : "Comments are optional",
            "type" : "string"
          },
          "fileNumber" : {
            "example" : "03232015",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "deleteBookmarksRequest" : {
        "additionalProperties" : false,
        "properties" : {
          "types" : {
            "example" : "[\"appeals\", \"dependency\" ]",
            "items" : {
              "enum" : [ "appeals", "medical", "peerReview", "workingNotes", "dependency", "deferral" ],
              "type" : "string"
            },
            "maxItems" : 6,
            "minItems" : 1,
            "type" : "array",
            "uniqueItems" : true
          }
        },
        "title" : "Delete Bookmark Request",
        "type" : "object"
      },
      "basicAnnotationUpdateRequest" : {
        "additionalProperties" : false,
        "description" : "Schema for basic annotation update. This supports updates for oval, rectangle, icon, freetext, callout, and stamp annotations",
        "properties" : {
          "title" : {
            "type" : "string"
          },
          "comment" : {
            "type" : "string"
          },
          "position" : {
            "$ref" : "#/components/schemas/position"
          },
          "size" : {
            "$ref" : "#/components/schemas/annotationSize"
          }
        },
        "title" : "Basic Annotation Update Request",
        "type" : "object"
      },
      "lineAnnotationUpdateRequest" : {
        "properties" : {
          "title" : {
            "type" : "string"
          },
          "comment" : {
            "type" : "string"
          },
          "points" : {
            "$ref" : "#/components/schemas/points"
          }
        },
        "title" : "Line Annotation Update Request",
        "type" : "object"
      },
      "uuidExchangeRequest" : {
        "properties" : {
          "versionUuids" : {
            "description" : "A list of version UUIDs to exchange.",
            "items" : {
              "format" : "uuid",
              "type" : "string"
            },
            "type" : "array"
          }
        },
        "required" : [ "versionUuids" ],
        "title" : "VersionUuidsRequest",
        "type" : "object"
      },
      "uuidExchangeResponse" : {
        "properties" : {
          "exchangeUuids" : {
            "additionalProperties" : {
              "format" : "uuid",
              "type" : "string"
            },
            "description" : "A map where the key is the document ID (version UUID) and the value is the UUID.",
            "type" : "object"
          }
        },
        "required" : [ "exchangeUuids" ],
        "title" : "UuidExchangeResponse",
        "type" : "object"
      },
      "vefsErrorResponse" : {
        "additionalProperties" : false,
        "description" : "The root schema comprises generic File Store Errors.",
        "properties" : {
          "uuid" : {
            "description" : "UUID used to trace the error response",
            "format" : "uuid",
            "title" : "Error UUID",
            "type" : "string"
          },
          "code" : {
            "description" : "Enumerated Error Code indicating the error classification.",
            "title" : "Error Code",
            "type" : "string"
          },
          "message" : {
            "description" : "The message describing the error.",
            "title" : "The message schema",
            "type" : "string"
          }
        },
        "title" : "Vefs Error Response",
        "type" : "object"
      },
      "folderPermissionsResponse" : {
        "description" : "Responses contain permission information for the folder permission endpoint",
        "properties" : {
          "update_data" : {
            "$ref" : "#/components/schemas/folderPermission"
          },
          "upload" : {
            "$ref" : "#/components/schemas/folderPermission"
          },
          "bookmarks" : {
            "$ref" : "#/components/schemas/bookmarkPermissions"
          },
          "priorityOcr" : {
            "$ref" : "#/components/schemas/folderPermission"
          },
          "newMail" : {
            "$ref" : "#/components/schemas/folderPermission"
          },
          "pendingScanning" : {
            "$ref" : "#/components/schemas/pendingScanningPermissions"
          },
          "bvaNotes" : {
            "$ref" : "#/components/schemas/bvaNotesPermissions"
          },
          "importEvidence" : {
            "$ref" : "#/components/schemas/folderPermission"
          },
          "militaryServiceInfo" : {
            "$ref" : "#/components/schemas/militaryServiceInfoPermission"
          }
        },
        "title" : "Folder Permissions Response",
        "type" : "object"
      },
      "postPermissionsResponse" : {
        "description" : "Responses contain permission information for the endpoint by POST verb",
        "properties" : {
          "post" : {
            "$ref" : "#/components/schemas/verbPermission"
          }
        },
        "title" : "Post Permissions Response",
        "type" : "object"
      },
      "putPermissionsResponse" : {
        "description" : "Responses contain permission information for the endpoint by PUT verb",
        "properties" : {
          "put" : {
            "$ref" : "#/components/schemas/verbPermission"
          }
        },
        "title" : "Put Permissions Response",
        "type" : "object"
      },
      "deletePermissionsResponse" : {
        "description" : "Responses contain permission information for the endpoint by DELETE verb",
        "properties" : {
          "delete" : {
            "$ref" : "#/components/schemas/verbPermission"
          }
        },
        "title" : "Delete Permissions Response",
        "type" : "object"
      },
      "notePermissionsResponse" : {
        "description" : "Note permission response that indicates what functions a line of business is permitted to perform.",
        "properties" : {
          "lineOfBusiness" : {
            "$ref" : "#/components/schemas/lineOfBusiness"
          },
          "hasSearchAccess" : {
            "type" : "boolean"
          },
          "hasCreateAccess" : {
            "type" : "boolean"
          },
          "hasAlertAccess" : {
            "type" : "boolean"
          },
          "hasArchiveAccess" : {
            "type" : "boolean"
          }
        },
        "title" : "Note Permissions Response",
        "type" : "object"
      },
      "movePermissionsResponse" : {
        "description" : "Responses contain permission information for the endpoint by PATCH verb",
        "properties" : {
          "patch" : {
            "$ref" : "#/components/schemas/patchVerbPermission"
          }
        },
        "title" : "PATCH Permissions Response",
        "type" : "object"
      },
      "lastReadDocumentResponse" : {
        "additionalProperties" : false,
        "properties" : {
          "lastReadDocumentId" : {
            "description" : "The UUID of the document last read by the user within the folder specified.",
            "format" : "uuid",
            "type" : "string"
          }
        },
        "title" : "Last Read Document",
        "type" : "object"
      },
      "getDocumentTypesResponse" : {
        "description" : "Get document types and alternative document types response object.",
        "properties" : {
          "documentTypes" : {
            "items" : {
              "$ref" : "#/components/schemas/documentType"
            },
            "type" : "array"
          },
          "alternativeDocumentTypes" : {
            "items" : {
              "$ref" : "#/components/schemas/alternativeDocumentType"
            },
            "type" : "array"
          }
        },
        "title" : "Get Document Types Response",
        "type" : "object"
      },
      "getContentSourcesResponse" : {
        "description" : "Get content sources UI consumption.",
        "properties" : {
          "contentSources" : {
            "items" : {
              "$ref" : "#/components/schemas/contentSource"
            },
            "type" : "array"
          }
        },
        "title" : "Get Content Sources Response",
        "type" : "object"
      },
      "getUploadSourcesResponse" : {
        "description" : "Get upload sources for UI consumption. The array containing the upload sources available for the folder specified on the request header.",
        "properties" : {
          "uploadSources" : {
            "items" : {
              "$ref" : "#/components/schemas/uploadSource"
            },
            "type" : "array"
          }
        },
        "title" : "Get Upload Sources Response",
        "type" : "object"
      },
      "DATA_NOT_FOUND_FOR_CURRENT_VERSION" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/baseErrorResponse"
        }, {
          "properties" : {
            "code" : {
              "enum" : [ "VEFSERR40403" ],
              "type" : "string"
            },
            "message" : {
              "description" : "The message describing the error.",
              "enum" : [ "Requested data could not be found for current version of UUID %s" ],
              "title" : "The message schema",
              "type" : "string"
            }
          },
          "type" : "object"
        } ]
      },
      "ocrReanalyze" : {
        "description" : "Reprocessing of existing textract job ids",
        "title" : "OCR Reanalysis",
        "type" : "object"
      },
      "ocrReanalyzeResponse" : {
        "description" : "Response for OCR Reanalyze List",
        "properties" : {
          "failed" : {
            "format" : "int64",
            "type" : "integer"
          },
          "duplicates" : {
            "format" : "int64",
            "type" : "integer"
          },
          "totalProcessed" : {
            "format" : "int64",
            "type" : "integer"
          },
          "UUID" : {
            "format" : "uuid",
            "type" : "string"
          }
        },
        "title" : "OCR Reanalyze List",
        "type" : "object"
      },
      "createNoteRequest" : {
        "additionalProperties" : false,
        "description" : "Create note request containing the note data",
        "properties" : {
          "text" : {
            "description" : "The content of the note.",
            "example" : "This is a note.",
            "maxLength" : 4000,
            "pattern" : "^[a-zA-Z0-9\\s.\\-_|\\Q\\\\E@#~=%,;?!'\"`():$+*^\\[\\]&<>{}\\Q/\\E]*$",
            "title" : "Note Text",
            "type" : "string"
          },
          "alert" : {
            "default" : false,
            "description" : "Indicator of whether or not this note should be shown as an alert banner on the UI.",
            "type" : "boolean"
          },
          "noteData" : {
            "$ref" : "#/components/schemas/createNoteRequest_noteData"
          }
        },
        "required" : [ "text" ],
        "title" : "Create Note Request",
        "type" : "object"
      },
      "createNoteResponse" : {
        "properties" : {
          "uuid" : {
            "description" : "UUID associated with the note that has been created.",
            "example" : "a851b030-e70b-4564-a400-250a51a4ec28",
            "format" : "uuid",
            "type" : "string"
          }
        },
        "title" : "Create Note Response",
        "type" : "object"
      },
      "searchNotesRequest" : {
        "description" : "Request containing search filters, sorting information, and paging information. The filter block is required, but the individual filters are optional.",
        "properties" : {
          "pageRequest" : {
            "$ref" : "#/components/schemas/notePageRequest"
          },
          "filters" : {
            "$ref" : "#/components/schemas/NoteFilters"
          },
          "sorts" : {
            "$ref" : "#/components/schemas/NoteSorts"
          }
        },
        "required" : [ "filters", "pageRequest" ],
        "title" : "Search Notes Request",
        "type" : "object"
      },
      "NoteFilters" : {
        "properties" : {
          "noteData.alert" : {
            "$ref" : "#/components/schemas/alertFilter"
          },
          "noteData.archived" : {
            "$ref" : "#/components/schemas/archivedFilter"
          },
          "noteData.claimantParticipantId" : {
            "$ref" : "#/components/schemas/claimantParticipantIdFilter_1"
          },
          "noteData.createdBy" : {
            "$ref" : "#/components/schemas/createdByFilter"
          },
          "noteData.lineOfBusiness" : {
            "$ref" : "#/components/schemas/lineOfBusinessFilter"
          }
        }
      },
      "NoteSorts" : {
        "items" : { },
        "type" : "array"
      },
      "searchNotesResponse" : {
        "description" : "Response containing results from search with applied filters.",
        "properties" : {
          "page" : {
            "$ref" : "#/components/schemas/notePageResponse"
          },
          "folderNotes" : {
            "items" : {
              "$ref" : "#/components/schemas/currentNoteDataComposition"
            },
            "type" : "array"
          }
        },
        "title" : "Search File Response",
        "type" : "object"
      },
      "migrateNoteRequest" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/createNoteRequest"
        }, {
          "properties" : {
            "createdBy" : {
              "example" : "jbezos",
              "type" : "string"
            },
            "createdDateTime" : {
              "example" : "2022-03-23T14:35:44",
              "type" : "string"
            },
            "archivedBy" : {
              "example" : "emusk",
              "type" : "string"
            },
            "archivedDateTime" : {
              "example" : "2021-12-15T01:13:57",
              "type" : "string"
            }
          },
          "type" : "object"
        } ],
        "description" : "Migrate note request containing the existing note data",
        "title" : "Migrate Note Request",
        "type" : "object"
      },
      "migrateNoteResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/createNoteResponse"
        } ],
        "title" : "Migrate Note Response",
        "type" : "object"
      },
      "ResponseObject" : {
        "properties" : {
          "published" : {
            "items" : {
              "$ref" : "#/components/schemas/FilterObject"
            },
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "ResponseObject_1" : {
        "properties" : {
          "subscribed" : {
            "items" : {
              "$ref" : "#/components/schemas/FilterObject"
            },
            "type" : "array"
          },
          "personal" : {
            "items" : {
              "$ref" : "#/components/schemas/FilterObject"
            },
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "FilterRequest" : {
        "properties" : {
          "name" : {
            "example" : "filterName",
            "type" : "string"
          },
          "publish" : {
            "example" : true,
            "type" : "boolean"
          },
          "filters" : {
            "$ref" : "#/components/schemas/FilterRequest_filters"
          }
        },
        "required" : [ "filters", "name", "publish" ],
        "type" : "object"
      },
      "moveNotificationsResponse" : {
        "description" : "Move Notifications Response Object Containing Information about the Move",
        "properties" : {
          "sent" : {
            "items" : {
              "$ref" : "#/components/schemas/moveNotificationsResponse_sent_inner"
            },
            "type" : "array"
          },
          "received" : {
            "items" : {
              "$ref" : "#/components/schemas/moveNotificationsResponse_received_inner"
            },
            "type" : "array"
          }
        },
        "title" : "GET Move Notification Response",
        "type" : "object"
      },
      "periodOfServiceDocumentsResponse" : {
        "description" : "Schema for the periodOfService block in the response object for the getPeriodOfServiceInfo endpoint.",
        "properties" : {
          "periodOfServiceInformationList" : {
            "items" : {
              "$ref" : "#/components/schemas/periodOfServiceDocumentsResponse_periodOfServiceInformationList_inner"
            },
            "type" : "array"
          }
        },
        "title" : "Period Of Service Response",
        "type" : "object"
      },
      "uploadRequest_1" : {
        "description" : "Upload manifest request containing the document upload manifest data",
        "properties" : {
          "uploads" : {
            "items" : {
              "$ref" : "#/components/schemas/uploadRequest_1_uploads_inner"
            },
            "type" : "array"
          },
          "fileNumber" : {
            "description" : "The file number related to the manifest",
            "type" : "string"
          },
          "claimId" : {
            "description" : "The claim ID associated with this manifest",
            "format" : "int64",
            "type" : "integer"
          },
          "automationTrigger" : {
            "description" : "The type of automation trigger for the manifest (e.g., NONE, AUTOMATED_DELIVERY_SYSTEM, AUTOMATED_DELIVERY_SYSTEM_WITH_4142)",
            "enum" : [ "NONE", "AUTOMATED_DELIVERY_SYSTEM", "AUTOMATED_DELIVERY_SYSTEM_WITH_4142" ],
            "type" : "string"
          }
        },
        "required" : [ "automationTrigger", "fileNumber", "uploads" ],
        "title" : "Upload Manifest Request",
        "type" : "object"
      },
      "uploadResponse_1" : {
        "description" : "A response containing the manifest ID upon successful creation of the manifest",
        "properties" : {
          "manifestId" : {
            "description" : "The UUID of the created manifest",
            "example" : "123e4567-e89b-12d3-a456-426614174000",
            "format" : "uuid",
            "type" : "string"
          }
        },
        "title" : "Upload Manifest Response",
        "type" : "object"
      },
      "getManifestResponse" : {
        "description" : "Response object for Manifest for the getManifestById and getManifestByClaimId endpoints.",
        "properties" : {
          "id" : {
            "description" : "manifest identification",
            "format" : "uuid",
            "type" : "string"
          },
          "fileNumber" : {
            "description" : "file number",
            "type" : "string"
          },
          "claimId" : {
            "description" : "claim identification",
            "format" : "int64",
            "type" : "integer"
          },
          "status" : {
            "description" : "the status of the manifest",
            "enum" : [ "NEW", "RECEIVING", "FULFILLED" ],
            "type" : "string"
          },
          "automationTrigger" : {
            "description" : "the automation type of the manifest",
            "enum" : [ "NONE", "AUTOMATED_DELIVERY_SYSTEM" ],
            "type" : "string"
          },
          "documentUploadResponses" : {
            "description" : "a list of document upload responses",
            "items" : {
              "$ref" : "#/components/schemas/getManifestResponse_documentUploadResponses_inner"
            },
            "type" : "array"
          }
        },
        "title" : "Manifest Response",
        "type" : "object"
      },
      "manifestPatchRequest" : {
        "anyOf" : [ {
          "required" : [ "uploads" ],
          "type" : "object"
        }, {
          "required" : [ "claimId" ],
          "type" : "object"
        } ],
        "description" : "Request object for updating an existing Manifest.",
        "properties" : {
          "uploads" : {
            "description" : "A list of documents to add to the manifest",
            "items" : {
              "properties" : {
                "documentId" : {
                  "description" : "The unique identifier of the document to add",
                  "format" : "uuid",
                  "type" : "string"
                },
                "title" : {
                  "description" : "Optional title for the document",
                  "type" : "string"
                }
              },
              "required" : [ "documentId" ],
              "type" : "object"
            },
            "type" : "array"
          },
          "claimId" : {
            "description" : "The claim ID to set (only if not already set)",
            "format" : "int64",
            "type" : "integer"
          }
        },
        "title" : "Manifest Patch Request",
        "type" : "object"
      },
      "pageRequest" : {
        "description" : "Paging request from user.",
        "properties" : {
          "resultsPerPage" : {
            "example" : 10,
            "format" : "int32",
            "type" : "integer"
          },
          "page" : {
            "example" : 1,
            "format" : "int32",
            "type" : "integer"
          }
        },
        "title" : "Paging Request",
        "type" : "object"
      },
      "documentTypeIdFilter" : {
        "description" : "Filters results on DocumentTypeId.",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "description" : "This is a stringified json array of integers",
            "example" : "\"[131]\"",
            "type" : "string"
          }
        },
        "title" : "Document Type Id Filter Request",
        "type" : "object"
      },
      "documentCategoryIdFilter" : {
        "description" : "Filters results on DocumentCategoryId.",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "description" : "This is a stringified json array of integers",
            "example" : "\"[14]\"",
            "type" : "string"
          }
        },
        "title" : "Document Category Id Filter Request",
        "type" : "object"
      },
      "subjectFilter" : {
        "description" : "Filters results on Subject.",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "CONTAINS" ],
            "type" : "string"
          },
          "value" : {
            "description" : "This is a stringified json array of strings.",
            "example" : "\"[\\\"subject\\\", \\\"subject1\\\"]\"",
            "type" : "string"
          }
        },
        "title" : "Subject Filter Request",
        "type" : "object"
      },
      "contentNameFilter" : {
        "description" : "Filters results on ContentName.",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "example" : "testFileName0.12713919732752.pdf",
            "type" : "string"
          }
        },
        "title" : "Content Name Filter Request",
        "type" : "object"
      },
      "contentSourceFilter" : {
        "description" : "Filters results based on ContentSource.",
        "properties" : {
          "evluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "example" : "VISTA",
            "type" : "string"
          }
        },
        "title" : "Content Source Filter Request",
        "type" : "object"
      },
      "dateVaReceivedDocumentFilter" : {
        "description" : "Filters results on range for DateVaReceivedDocument.",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "BETWEEN" ],
            "type" : "string"
          },
          "value" : {
            "description" : "This is a stringified json array of dates",
            "example" : "\"[\\\"2020-10-09\\\",\\\"2020-10-11\\\"]\"",
            "type" : "string"
          }
        },
        "title" : "Date Va Received Document Filter Request",
        "type" : "object"
      },
      "endProductCodeFilter" : {
        "description" : "Filters results on EndProductCode.",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "example" : "030BGR",
            "type" : "string"
          }
        },
        "title" : "End Product Code Filter Request",
        "type" : "object"
      },
      "associatedClaimId" : {
        "description" : "Filter based on the claims associated to the documents.",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "description" : "This is a stringified json array of integers",
            "example" : "\"[137,12837]\"",
            "type" : "string"
          }
        },
        "title" : "Associated Claim ID Request",
        "type" : "object"
      },
      "associationDateTimeFilter" : {
        "description" : "Filters results on range for AssociationDateTime.",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "BETWEEN" ],
            "type" : "string"
          },
          "value" : {
            "description" : "This is a stringified json array of dates",
            "example" : "\"[\\\"2020-10-09\\\",\\\"2020-10-11\\\"]\"",
            "type" : "string"
          }
        },
        "title" : "Document Association Date Filter Request",
        "type" : "object"
      },
      "mimeTypeFilter" : {
        "description" : "Filters results on MimeType.",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "description" : "This is a stringified json array of mime types",
            "example" : "\"[\\\"application/pdf\\\", \\\"image/tiff\\\"]\"",
            "type" : "string"
          }
        },
        "title" : "Mime Type Filter Request",
        "type" : "object"
      },
      "uploadSourceFilter" : {
        "description" : "Filters results on uploadSource.",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "example" : "VBMS-UI",
            "type" : "string"
          }
        },
        "title" : "Upload Source Filter Request",
        "type" : "object"
      },
      "claimantFirstNameFilter" : {
        "description" : "Filters results on claimant's first name.",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "example" : "John",
            "type" : "string"
          }
        },
        "title" : "Claimant First Name Filter Request",
        "type" : "object"
      },
      "claimantLastNameFilter" : {
        "description" : "Filters results on claimant's last name.",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "example" : "Smith",
            "type" : "string"
          }
        },
        "title" : "Claimant Last Name Filter Request",
        "type" : "object"
      },
      "claimantMiddleInitialFilter" : {
        "description" : "Filters results on claimant's middle initial.",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "example" : "M",
            "type" : "string"
          }
        },
        "title" : "Claimant Middle Initial Filter Request",
        "type" : "object"
      },
      "claimantSsnFilter" : {
        "description" : "Filters results on claimant's Ssn.",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "example" : "123456789",
            "type" : "string"
          }
        },
        "title" : "Claimant Ssn Filter Request",
        "type" : "object"
      },
      "claimantDateOfBirthFilter" : {
        "description" : "Filters results on range for claimantDobFilter.",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "description" : "This is the claimant DOB",
            "example" : "2020-10-09",
            "type" : "string"
          }
        },
        "title" : "Claimant DOB Filter Request",
        "type" : "object"
      },
      "benefitTypeIdFilter" : {
        "description" : "Filters results on Benefit Type Id. This filter only accepts string numbers 0-9",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "example" : "\"12\"",
            "type" : "string"
          }
        },
        "title" : "Benefit Type Id Filter Request",
        "type" : "object"
      },
      "ocrPerspectiveFilter" : {
        "description" : "Filters results on OCR perspective.",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "example" : "persp1",
            "type" : "string"
          }
        },
        "title" : "OCR Perspective Filter Request",
        "type" : "object"
      },
      "payeeCodeFilter" : {
        "description" : "Filters results on payee code.",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "example" : "01",
            "type" : "string"
          }
        },
        "title" : "Payee Code Filter Request",
        "type" : "object"
      },
      "regionalProcessingOfficeFilter" : {
        "description" : "Filters results on regional processing office.",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "example" : "Buffalo",
            "type" : "string"
          }
        },
        "title" : "Regional Processing Office Filter Request",
        "type" : "object"
      },
      "facilityCodeFilter" : {
        "description" : "Filters results on facility code.",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "example" : "Facility",
            "type" : "string"
          }
        },
        "title" : "Facility Code Filter Request",
        "type" : "object"
      },
      "claimantParticipantIdFilter" : {
        "description" : "Filters results on claimant participant Id.",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "example" : "00000000",
            "type" : "string"
          }
        },
        "title" : "Claimant Participant Id Filter Request",
        "type" : "object"
      },
      "lineOfBusinessIdFilter" : {
        "description" : "Filters results based on documents that are associated with the provided line of business through their type or content source",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "example" : "VRE",
            "type" : "string"
          }
        },
        "title" : "Line of Business Id Filter Request",
        "type" : "object"
      },
      "duplicateGroupIdFilter" : {
        "description" : "Filters results based on the duplicate group they belong to",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "example" : "2",
            "type" : "string"
          }
        },
        "title" : "Duplicate Group Filter Request",
        "type" : "object"
      },
      "textSearchableFilter" : {
        "description" : "Filters results based on the text searchable status of a document",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "example" : true,
            "type" : "boolean"
          }
        },
        "title" : "Text Searchable Filter Request",
        "type" : "object"
      },
      "hasAnnotationsFilter" : {
        "description" : "Filters results based on the existence of annotations for a document",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "example" : true,
            "type" : "boolean"
          }
        },
        "title" : "Has Annotations Filter Request",
        "type" : "object"
      },
      "annotationTypeFilter" : {
        "description" : "Filters results based on the annotation types associated with the document",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "example" : "[\"FREETEXT\",\"CALLOUT\",\"CONTENTION\",\"NOTE\"]",
            "type" : "string"
          }
        },
        "title" : "Annotation Type Filter Request",
        "type" : "object"
      },
      "annotationKeywordFilter" : {
        "description" : "Filters results based on keywords in the title and comments of associated annotations",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "CONTAINS" ],
            "type" : "string"
          },
          "value" : {
            "example" : "[\"keyword1\",\"keyword2\"]",
            "type" : "string"
          }
        },
        "title" : "Annotation Keyword Filter Request",
        "type" : "object"
      },
      "hasNotesFilter" : {
        "description" : "Filters results based on the notes",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "example" : "true",
            "type" : "string"
          }
        },
        "title" : "Notes Filter Request",
        "type" : "object"
      },
      "ocrStatusFilter" : {
        "description" : "Filters results based on the ocr status of a document",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "example" : "['Searchable', 'Not Searchable', 'Failure to Process']",
            "type" : "string"
          }
        },
        "title" : "Ocr Status Filter Request",
        "type" : "object"
      },
      "textContentFilter" : {
        "description" : "Filters results based on text search content in the documents",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "example" : "galaxy",
            "type" : "string"
          }
        },
        "title" : "Text search Filter Request",
        "type" : "object"
      },
      "pageResponse" : {
        "description" : "Information on paging of results.",
        "properties" : {
          "totalPages" : {
            "format" : "int32",
            "type" : "integer"
          },
          "requestedResultsPerPage" : {
            "format" : "int32",
            "type" : "integer"
          },
          "currentPage" : {
            "format" : "int32",
            "type" : "integer"
          },
          "totalResults" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "title" : "Page Response",
        "type" : "object"
      },
      "baseErrorResponse" : {
        "description" : "The root schema comprises generic File Store Errors.",
        "properties" : {
          "uuid" : {
            "description" : "UUID used to trace the error response",
            "format" : "uuid",
            "title" : "Error UUID",
            "type" : "string"
          }
        },
        "title" : "Vefs Error Response",
        "type" : "object"
      },
      "payload" : {
        "description" : "Payload containing content name and the provider specific data. <a href=\"#model-payload\">Schema can be found here.</a>",
        "properties" : {
          "contentName" : {
            "$ref" : "#/components/schemas/contentName"
          },
          "providerData" : {
            "$ref" : "#/components/schemas/uploadProviderDataRequest"
          },
          "ocr" : {
            "$ref" : "#/components/schemas/ocrDataRequest"
          }
        },
        "required" : [ "contentName", "providerData" ],
        "title" : "Upload Payload",
        "type" : "object"
      },
      "conversionInformation" : {
        "description" : "Details about a file's conversion. This is optional, and will only be present on responses where the file has been converted.",
        "properties" : {
          "preprocessed" : {
            "$ref" : "#/components/schemas/conversionMetadata"
          },
          "converted" : {
            "$ref" : "#/components/schemas/conversionMetadata"
          }
        },
        "title" : "Conversion Information",
        "type" : "object"
      },
      "payload_1" : {
        "description" : "Payload containing content name and the provider specific data. <a href=\"#model-payload_2\">Schema can be found here.</a>",
        "properties" : {
          "providerData" : {
            "$ref" : "#/components/schemas/uploadProviderDataRequest"
          }
        },
        "required" : [ "providerData" ],
        "title" : "Update File Payload",
        "type" : "object"
      },
      "folderIdentifier" : {
        "description" : "Details on the owner associated to the file.",
        "properties" : {
          "type" : {
            "enum" : [ "VETERAN", "PARTICIPANT", "ORGANIZATION", "BIN", "ANY", "UNSUPPORTED" ],
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          }
        },
        "title" : "Folder Identifier",
        "type" : "object"
      },
      "versionComposition" : {
        "description" : "Response data containing the system and provider data for a file. This will always be a response containing the latest information for the file.",
        "properties" : {
          "systemData" : {
            "$ref" : "#/components/schemas/systemDataComposition"
          },
          "providerData" : {
            "$ref" : "#/components/schemas/providerData"
          }
        },
        "title" : "Current Version Response",
        "type" : "object"
      },
      "versionCompositionWithRawTextData" : {
        "description" : "Response data containing the system, provider and raw text data for a file. This response will always contain the latest information for the file.",
        "properties" : {
          "systemData" : {
            "$ref" : "#/components/schemas/systemDataComposition"
          },
          "providerData" : {
            "$ref" : "#/components/schemas/providerData"
          },
          "rawTextData" : {
            "$ref" : "#/components/schemas/rawTextData"
          }
        },
        "title" : "Current Version Response including Raw Text Data",
        "type" : "object"
      },
      "updateDataProviderData" : {
        "additionalProperties" : false,
        "description" : "Claim Evidence API Update Provider Data. This endpoint accepts any of the following properties, if you are only updating one property, it is possible to make the call with just one of them. For example if you wanted to just update subject, the request can be made with only the subject property in the providerData object on the request.",
        "properties" : {
          "contentSource" : {
            "description" : "String field designating the originating source of the content being uploaded. This must match a valid content source from the /contentSources endpoint. This can only be updated by a limited subset of users.",
            "example" : "VISTA",
            "maximum" : 500,
            "minimum" : 1,
            "pattern" : "^[a-zA-Z0-9\\'\\,\\s.\\-\\_\\|\\/@\\(\\)]*$",
            "title" : "Document content source",
            "type" : "string"
          },
          "claimantFirstName" : {
            "description" : "String field designating the Claimant's first name.",
            "example" : "John",
            "maxLength" : 64,
            "pattern" : "^[a-zA-Z0-9\\\\'\\\\,\\\\s.\\\\-\\\\_\\\\|\\\\/@\\\\(\\\\)]*$",
            "title" : "Claimant First Name",
            "type" : "string"
          },
          "claimantMiddleInitial" : {
            "description" : "String field designating the Claimant's middle initial.",
            "example" : "M",
            "maxLength" : 4,
            "pattern" : "^[a-zA-Z]*$",
            "title" : "Claimant Middle Initial",
            "type" : "string"
          },
          "claimantLastName" : {
            "description" : "String field designating the Claimant's last name.",
            "example" : "Smith",
            "maxLength" : 64,
            "pattern" : "^[a-zA-Z0-9\\\\'\\\\,\\\\s.\\\\-\\\\_\\\\|\\\\/@\\\\(\\\\)]*$",
            "title" : "Claimant Last Name",
            "type" : "string"
          },
          "claimantSsn" : {
            "description" : "String field designating the Claimant's SSN. Only accepts exactly 9 characters.",
            "example" : "123456789",
            "maxLength" : 9,
            "pattern" : "^[0-9]*$",
            "title" : "Claimant SSN",
            "type" : "string"
          },
          "benefitTypeId" : {
            "description" : "Number field designating the Benefit Type ID.",
            "example" : 10,
            "minimum" : 0,
            "title" : "Benefit Type ID",
            "type" : "integer"
          },
          "documentTypeId" : {
            "description" : "Number field correlating to a Claim Evidence document type ID. Document types primary use is loosely categorizing their contents.",
            "example" : 131,
            "minimum" : 1,
            "title" : "Document Type ID",
            "type" : "integer"
          },
          "dateVaReceivedDocument" : {
            "description" : "Date field indicating the date the VA received the document. This can be any date in format of YYYY-MM-DD from 1900 until today",
            "example" : "2022-01-01",
            "format" : "string",
            "maxLength" : 10,
            "minLength" : 10,
            "pattern" : "([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))",
            "title" : "Date VA Received Document",
            "type" : "string"
          },
          "subject" : {
            "description" : "Free text describing the document. This is primarily notes used to assist claim developers.",
            "maxLength" : 256,
            "pattern" : "^[a-zA-Z0-9\\s.\\-_|\\Q\\\\E@#~=%,;?!'\"`():$+*^\\[\\]&<>{}\\Q/\\E]*$",
            "title" : "Subject",
            "type" : "string"
          },
          "alternativeDocumentTypeIds" : {
            "description" : "List of integers which relate to an alternative document type Id. This must match a valid alternative document type Id from the /documentTypes endpoint.",
            "example" : [ 1 ],
            "items" : {
              "minimum" : 0,
              "type" : "integer"
            },
            "minItems" : 1,
            "title" : "Alternative Document Type Ids",
            "type" : "array",
            "uniqueItems" : true
          },
          "actionable" : {
            "default" : false,
            "description" : "Boolean true/false for if the document is considered 'actionable' or whether claim action can be taken based on the content.",
            "title" : "Actionable",
            "type" : "boolean"
          },
          "certified" : {
            "default" : false,
            "description" : "Boolean true/false for if the document is considered 'certified'.",
            "title" : "Actionable",
            "type" : "boolean"
          },
          "endProductCode" : {
            "description" : "Free text describing the document. This is primarily notes used to assist claim developers. This field must match a valid known end product code.",
            "example" : "130DPNDCY",
            "maxLength" : 64,
            "minLength" : 1,
            "pattern" : "^[a-zA-Z0-9\\s.\\\\\\-\\_\\|\\/@&><\\(\\))\\'\\+\\,\\$]*$",
            "title" : "Subject",
            "type" : "string"
          },
          "notes" : {
            "description" : "Notes to describe the document.",
            "example" : "[This is a note for a document, These replace editing the document summary]",
            "maxLength" : 100,
            "pattern" : "^[a-zA-Z0-9\\s.\\-_|\\Q\\\\E@#~=%,;?!'\"`():$+*^\\[\\]&<>{}\\Q/\\E]*$",
            "title" : "Document Notes",
            "type" : "string"
          },
          "sourceComment" : {
            "description" : "String field containing any comments from the source of the document",
            "example" : "source comment",
            "maxLength" : 1200,
            "pattern" : "^[a-zA-Z0-9\\s.\\-_|\\Q\\\\E@#~=%,;?!'\"`():$+*^\\[\\]&<>{}\\Q/\\E]*$",
            "title" : "Source comment",
            "type" : "string"
          },
          "payeeCode" : {
            "description" : "String field designating the Payee Code. Only accepts 2 digits as a string with leading 0 if below 10.",
            "example" : "00",
            "maxLength" : 2,
            "minLength" : 2,
            "pattern" : "^[0-9]*$",
            "title" : "Payee Code",
            "type" : "string"
          },
          "regionalProcessingOffice" : {
            "description" : "String field designating the regional processing office.",
            "example" : "Buffalo",
            "maxLength" : 15,
            "minLength" : 3,
            "pattern" : "^[a-zA-Z0-9\\'\\,\\s.\\-\\_\\|\\/@\\(\\)]*$",
            "title" : "Regional Processing Office",
            "type" : "string"
          },
          "facilityCode" : {
            "description" : "String field designating the Facility Code.",
            "example" : "Facility",
            "maxLength" : 8,
            "pattern" : "^[a-zA-Z0-9\\'\\,\\s.\\-\\_\\|\\/@\\(\\)]*$",
            "title" : "Facility Code",
            "type" : "string"
          },
          "claimantParticipantId" : {
            "description" : "String field designating the claimant participant Id.",
            "example" : "000000000",
            "maxLength" : 15,
            "pattern" : "^[0-9]*$",
            "title" : "Claimant Participant Id",
            "type" : "string"
          },
          "claimantDateOfBirth" : {
            "description" : "Date field indicating the date the claimant was born. This can be any date in format of YYYY-MM-DD from 1900 until today",
            "example" : "2022-01-01",
            "format" : "string",
            "maxLength" : 10,
            "pattern" : "([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))",
            "title" : "Claimant Date of Birth",
            "type" : "string"
          },
          "newMail" : {
            "default" : false,
            "description" : "Boolean true/false for if the document is considered 'new mail'",
            "example" : false,
            "title" : "New Mail",
            "type" : "boolean"
          },
          "periodOfServiceInformationList" : {
            "description" : "List of Period of Service Information",
            "example" : {
              "enteredOnDutyDate" : "2023-01-01",
              "releasedActiveDuty" : "2024-01-01",
              "linkageTypes" : [ "STR", "OMPF", "Service Verification" ]
            },
            "items" : {
              "$ref" : "#/components/schemas/Period_Of_Service_Information_List_inner"
            },
            "title" : "Period Of Service Information List",
            "type" : "array"
          }
        },
        "title" : "Update File Provider Data",
        "type" : "object"
      },
      "processingInformation" : {
        "description" : "Information describing the OCR processing that occured to generate the OCR data.",
        "properties" : {
          "ocrDateTime" : {
            "example" : "2022-01-11T02:37:14",
            "format" : "string",
            "pattern" : "^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(\\.\\d{1,3})?$",
            "type" : "string"
          }
        },
        "title" : "OCR Data Processing Information",
        "type" : "object"
      },
      "file" : {
        "description" : "OCR data describing the file",
        "properties" : {
          "text" : {
            "type" : "string"
          },
          "pages" : {
            "items" : {
              "$ref" : "#/components/schemas/page"
            },
            "type" : "array"
          },
          "totalPages" : {
            "example" : 3,
            "minimum" : 1,
            "type" : "integer"
          }
        },
        "required" : [ "pages", "text", "totalPages" ],
        "title" : "OCR Data File",
        "type" : "object"
      },
      "basic" : {
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "type" : {
            "$ref" : "#/components/schemas/basicAnnotations"
          },
          "created" : {
            "$ref" : "#/components/schemas/audit"
          },
          "modified" : {
            "$ref" : "#/components/schemas/audit"
          },
          "title" : {
            "type" : "string"
          },
          "comment" : {
            "type" : "string"
          },
          "pageNumber" : {
            "example" : 1,
            "type" : "integer"
          },
          "position" : {
            "$ref" : "#/components/schemas/position"
          },
          "size" : {
            "$ref" : "#/components/schemas/annotationSize"
          },
          "border" : {
            "$ref" : "#/components/schemas/border"
          },
          "color" : {
            "example" : "#000000",
            "type" : "string"
          }
        },
        "title" : "Basic Annotation Response",
        "type" : "object"
      },
      "lines" : {
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "created" : {
            "$ref" : "#/components/schemas/audit"
          },
          "modified" : {
            "$ref" : "#/components/schemas/audit"
          },
          "rawXfdf" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "pageNumber" : {
            "type" : "integer"
          },
          "thickness" : {
            "type" : "integer"
          },
          "points" : {
            "$ref" : "#/components/schemas/points"
          },
          "color" : {
            "example" : "#000000",
            "type" : "string"
          }
        },
        "title" : "Line Annotation Response",
        "type" : "object"
      },
      "callout" : {
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "type" : {
            "example" : "callout",
            "type" : "string"
          },
          "created" : {
            "$ref" : "#/components/schemas/audit"
          },
          "modified" : {
            "$ref" : "#/components/schemas/audit"
          },
          "rawXfdf" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "pageNumber" : {
            "example" : 1,
            "type" : "integer"
          },
          "tailDirection" : {
            "$ref" : "#/components/schemas/tailDirection"
          },
          "position" : {
            "$ref" : "#/components/schemas/position"
          },
          "size" : {
            "$ref" : "#/components/schemas/annotationSize"
          },
          "text" : {
            "$ref" : "#/components/schemas/text"
          },
          "color" : {
            "example" : "#000000",
            "type" : "string"
          }
        },
        "title" : "Callout Annotation Response",
        "type" : "object"
      },
      "freetext" : {
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "type" : {
            "example" : "freetext",
            "type" : "string"
          },
          "created" : {
            "$ref" : "#/components/schemas/audit"
          },
          "modified" : {
            "$ref" : "#/components/schemas/audit"
          },
          "rawXfdf" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "comment" : {
            "type" : "string"
          },
          "pageNumber" : {
            "example" : 1,
            "type" : "integer"
          },
          "position" : {
            "$ref" : "#/components/schemas/position"
          },
          "size" : {
            "$ref" : "#/components/schemas/annotationSize"
          },
          "text" : {
            "$ref" : "#/components/schemas/text"
          },
          "color" : {
            "example" : "#000000",
            "type" : "string"
          }
        },
        "title" : "Free Text Annotation Response",
        "type" : "object"
      },
      "notes" : {
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "created" : {
            "$ref" : "#/components/schemas/audit"
          },
          "modified" : {
            "$ref" : "#/components/schemas/audit"
          },
          "rawXfdf" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "comment" : {
            "type" : "string"
          },
          "pageNumber" : {
            "type" : "integer"
          },
          "size" : {
            "$ref" : "#/components/schemas/annotationSize"
          },
          "position" : {
            "$ref" : "#/components/schemas/position"
          },
          "icon" : {
            "$ref" : "#/components/schemas/icon"
          },
          "color" : {
            "example" : "#000000",
            "type" : "string"
          }
        },
        "title" : "Icon Annotation Response",
        "type" : "object"
      },
      "stamps" : {
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "type" : {
            "example" : "stamp",
            "type" : "string"
          },
          "created" : {
            "$ref" : "#/components/schemas/audit"
          },
          "modified" : {
            "$ref" : "#/components/schemas/audit"
          },
          "rawXfdf" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "comment" : {
            "type" : "string"
          },
          "pageNumber" : {
            "example" : 1,
            "type" : "integer"
          },
          "size" : {
            "$ref" : "#/components/schemas/annotationSize"
          },
          "position" : {
            "$ref" : "#/components/schemas/position"
          },
          "image" : {
            "$ref" : "#/components/schemas/stamp"
          }
        },
        "title" : "Stamp Annotation Response",
        "type" : "object"
      },
      "textSelection" : {
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "type" : {
            "$ref" : "#/components/schemas/textSelectionAnnotations"
          },
          "created" : {
            "$ref" : "#/components/schemas/audit"
          },
          "modified" : {
            "$ref" : "#/components/schemas/audit"
          },
          "rawXfdf" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "pageNumber" : {
            "example" : 1,
            "type" : "integer"
          },
          "selectedAreas" : {
            "$ref" : "#/components/schemas/selectedAreas"
          },
          "color" : {
            "type" : "string"
          }
        },
        "title" : "Text Selection Annotation Response",
        "type" : "object"
      },
      "basicAnnotations" : {
        "enum" : [ "rectangle", "oval" ],
        "title" : "Basic Annotation Enum",
        "type" : "string"
      },
      "position" : {
        "additionalProperties" : false,
        "description" : "bottom and left coordinate from bottom left corner of page.",
        "properties" : {
          "bottom" : {
            "description" : "Number of pixels from bottom of the page.",
            "example" : 75,
            "minimum" : 0,
            "title" : "Bottom",
            "type" : "integer"
          },
          "left" : {
            "description" : "Number of pixels from left of the page.",
            "example" : 50,
            "minimum" : 0,
            "title" : "Left",
            "type" : "integer"
          }
        },
        "required" : [ "bottom", "left" ],
        "title" : "Position (Annotation)",
        "type" : "object"
      },
      "annotationSize" : {
        "additionalProperties" : false,
        "description" : "Width and height of annotation.",
        "properties" : {
          "width" : {
            "description" : "Number of pixels wide the annotation appears.",
            "example" : 150,
            "minimum" : 0,
            "title" : "Width",
            "type" : "integer"
          },
          "height" : {
            "description" : "Number of pixels tall thhe annotation appears.",
            "example" : 100,
            "minimum" : 0,
            "title" : "Height",
            "type" : "integer"
          }
        },
        "required" : [ "height", "width" ],
        "title" : "Size (Annotation)",
        "type" : "object"
      },
      "points" : {
        "properties" : {
          "startX" : {
            "example" : 50,
            "type" : "integer"
          },
          "startY" : {
            "example" : 75,
            "type" : "integer"
          },
          "endX" : {
            "example" : 100,
            "type" : "integer"
          },
          "endY" : {
            "example" : 75,
            "type" : "integer"
          }
        },
        "required" : [ "endX", "endY", "startX", "startY" ],
        "title" : "Points (Annotation)",
        "type" : "object"
      },
      "tailDirection" : {
        "enum" : [ "up", "down", "right", "left" ],
        "title" : "Tail Direction Enum",
        "type" : "string"
      },
      "icon" : {
        "enum" : [ "callout", "check", "circle", "comment", "cross", "help", "insert", "key", "newparagraph", "note", "paragraph", "star", "rightpointer", "rightarrow", "upleftarrow", "uparrow" ],
        "title" : "Icon Type Enum",
        "type" : "string"
      },
      "stamp" : {
        "enum" : [ "Certified", "BestCopy", "Original" ],
        "title" : "Stamp Type Enum",
        "type" : "string"
      },
      "textSelectionAnnotations" : {
        "enum" : [ "underline", "strikeout", "highlight" ],
        "title" : "Text Selection Annotation Enum",
        "type" : "string"
      },
      "selectedAreas" : {
        "items" : {
          "$ref" : "#/components/schemas/selectedAreas_inner"
        },
        "title" : "Selected Areas (Annotation)",
        "type" : "array"
      },
      "bookmarkRealmResponseModel" : {
        "properties" : {
          "isDefaultRealm" : {
            "type" : "boolean"
          },
          "appeals" : {
            "$ref" : "#/components/schemas/bookmarkResponseModel"
          },
          "medical" : {
            "$ref" : "#/components/schemas/bookmarkResponseModel"
          },
          "peerReview" : {
            "$ref" : "#/components/schemas/bookmarkResponseModel"
          },
          "workingNotes" : {
            "$ref" : "#/components/schemas/bookmarkResponseModel"
          },
          "deferral" : {
            "$ref" : "#/components/schemas/bookmarkResponseModel"
          },
          "dependency" : {
            "$ref" : "#/components/schemas/bookmarkResponseModel"
          }
        },
        "type" : "object"
      },
      "folderPermission" : {
        "description" : "Contains permission information",
        "properties" : {
          "hasAccess" : {
            "description" : "flag indicating whether the requesting user has access to the endpoint",
            "type" : "boolean"
          }
        },
        "title" : "Folder Permission",
        "type" : "object"
      },
      "bookmarkPermissions" : {
        "properties" : {
          "create" : {
            "$ref" : "#/components/schemas/folderPermission"
          },
          "update" : {
            "$ref" : "#/components/schemas/folderPermission"
          },
          "deferralAccess" : {
            "$ref" : "#/components/schemas/folderPermission"
          }
        },
        "title" : "Bookmark Permissions",
        "type" : "object"
      },
      "pendingScanningPermissions" : {
        "properties" : {
          "listItems" : {
            "$ref" : "#/components/schemas/folderPermission"
          },
          "scanningStatus" : {
            "$ref" : "#/components/schemas/folderPermission"
          },
          "mangeEvidence" : {
            "$ref" : "#/components/schemas/folderPermission"
          }
        },
        "title" : "Pending Scanning Permissions",
        "type" : "object"
      },
      "bvaNotesPermissions" : {
        "properties" : {
          "view" : {
            "$ref" : "#/components/schemas/folderPermission"
          },
          "create" : {
            "$ref" : "#/components/schemas/folderPermission"
          },
          "edit" : {
            "$ref" : "#/components/schemas/folderPermission"
          }
        },
        "title" : "BVA Notes Permissions",
        "type" : "object"
      },
      "militaryServiceInfoPermission" : {
        "properties" : {
          "view" : {
            "$ref" : "#/components/schemas/folderPermission"
          },
          "update" : {
            "$ref" : "#/components/schemas/folderPermission"
          }
        },
        "title" : "Military Service Information Permissions",
        "type" : "object"
      },
      "verbPermission" : {
        "description" : "Contains permission information for an endpoint based on the HTTP verb",
        "properties" : {
          "hasAccess" : {
            "description" : "flag indicating whether the requesting user has access to the endpoint",
            "type" : "boolean"
          },
          "systemData" : {
            "description" : "array of strings indicating which system data fields are accessible. For Upload and update endpoints this block is not available. This block is also unavailable on annotation endpoints.",
            "example" : [ "systemDataField1", "systemDataField2" ],
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "providerData" : {
            "description" : "array of strings indicating which provider data fields are accessible. For some endpoints this may be empty due to the endpoint not returning or requesting data.",
            "example" : [ "providerDataField1", "providerDataField2" ],
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        },
        "title" : "Verb Permission",
        "type" : "object"
      },
      "lineOfBusiness" : {
        "description" : "The various lines of business known by CE.",
        "example" : "EDU",
        "title" : "Line of Business",
        "type" : "string"
      },
      "patchVerbPermission" : {
        "description" : "Contains permission information for an endpoint based on the HTTP verb",
        "properties" : {
          "Unassociate" : {
            "$ref" : "#/components/schemas/Unassociate_Permission"
          },
          "Move" : {
            "$ref" : "#/components/schemas/Move_Permission"
          }
        },
        "required" : [ "user jwt" ],
        "title" : "Verb Permission",
        "type" : "object"
      },
      "documentType" : {
        "description" : "Response object for Document Types from the Get Document Types endpoint.",
        "properties" : {
          "id" : {
            "format" : "int64",
            "type" : "integer"
          },
          "isUpdateSubjectRestricted" : {
            "type" : "boolean"
          },
          "createDateTime" : {
            "type" : "string"
          },
          "modifiedDateTime" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "isUserUploadable" : {
            "type" : "boolean"
          },
          "is526" : {
            "type" : "boolean"
          },
          "documentCategory" : {
            "$ref" : "#/components/schemas/documentCategory"
          }
        },
        "title" : "Document Type Response",
        "type" : "object"
      },
      "alternativeDocumentType" : {
        "description" : "Response object for Alternative Document Type as returned by the documentTypes endpoint.",
        "properties" : {
          "id" : {
            "format" : "int64",
            "type" : "integer"
          },
          "createDateTime" : {
            "type" : "string"
          },
          "modifiedDateTime" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "categoryDescription" : {
            "type" : "string"
          }
        },
        "title" : "Alternative Document Type Response",
        "type" : "object"
      },
      "contentSource" : {
        "description" : "Content sources for UI consumption.",
        "properties" : {
          "id" : {
            "format" : "int64",
            "type" : "integer"
          },
          "createDateTime" : {
            "example" : "2011-09-20T04:00:00",
            "type" : "string"
          },
          "name" : {
            "example" : "VBMS",
            "type" : "string"
          }
        },
        "title" : "Content Source",
        "type" : "object"
      },
      "uploadSource" : {
        "description" : "Upload sources response object.",
        "properties" : {
          "name" : {
            "example" : "VBMS-UI",
            "type" : "string"
          }
        },
        "title" : "Upload Source Response",
        "type" : "object"
      },
      "notePageRequest" : {
        "description" : "Paging request from user.",
        "properties" : {
          "resultsPerPage" : {
            "example" : 10,
            "format" : "int32",
            "type" : "integer"
          },
          "page" : {
            "example" : 1,
            "format" : "int32",
            "type" : "integer"
          }
        },
        "title" : "Paging Request",
        "type" : "object"
      },
      "alertFilter" : {
        "description" : "Filters results on alert.",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "example" : true,
            "type" : "boolean"
          }
        },
        "title" : "Alert Indicator Filter Request",
        "type" : "object"
      },
      "archivedFilter" : {
        "description" : "Filters results on archived.",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "EQUALS" ],
            "type" : "string"
          },
          "value" : {
            "example" : false,
            "type" : "boolean"
          }
        },
        "title" : "Archived Indicator Filter Request",
        "type" : "object"
      },
      "claimantParticipantIdFilter_1" : {
        "description" : "Filters results on claimant participant Id.",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "CONTAINS" ],
            "type" : "string"
          },
          "value" : {
            "description" : "This is a stringified JSON array of strings.",
            "example" : "\"[\\\"83941120\\\", \\\"659432892\\\"]\"",
            "type" : "string"
          }
        },
        "title" : "Claimant Participant Id Filter Request",
        "type" : "object"
      },
      "createdByFilter" : {
        "description" : "Filters results on creator username.",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "CONTAINS" ],
            "type" : "string"
          },
          "value" : {
            "description" : "This is a stringified JSON array of strings.",
            "example" : "\"[\\\"PAULL_EDUVCE\\\", \\\"STANLEYP_EDUCC\\\"]\"",
            "type" : "string"
          }
        },
        "title" : "Created By Filter Request",
        "type" : "object"
      },
      "lineOfBusinessFilter" : {
        "description" : "Filters results based on notes that are associated with the provided line of business through their type or content source",
        "properties" : {
          "evaluationType" : {
            "enum" : [ "CONTAINS" ],
            "type" : "string"
          },
          "value" : {
            "description" : "This is a stringified JSON array of strings.",
            "example" : "\"[\\\"EDU\\\", \\\"VHA\\\", \\\"VBA\\\"]\"",
            "type" : "string"
          }
        },
        "title" : "Line of Business Filter Request",
        "type" : "object"
      },
      "notePageResponse" : {
        "description" : "Information on paging of results.",
        "properties" : {
          "totalPages" : {
            "format" : "int32",
            "type" : "integer"
          },
          "requestedResultsPerPage" : {
            "format" : "int32",
            "type" : "integer"
          },
          "currentPage" : {
            "format" : "int32",
            "type" : "integer"
          },
          "totalResults" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "title" : "Page Response",
        "type" : "object"
      },
      "currentNoteDataComposition" : {
        "description" : "Schema for the response data for note search endpoints.",
        "properties" : {
          "alert" : {
            "type" : "boolean"
          },
          "text" : {
            "example" : "This is a note that we created.",
            "type" : "string"
          },
          "uuid" : {
            "format" : "uuid",
            "type" : "string"
          },
          "noteData" : {
            "$ref" : "#/components/schemas/noteData"
          }
        },
        "title" : "Current Note Data Response",
        "type" : "object"
      },
      "FilterObject" : {
        "properties" : {
          "id" : {
            "example" : 1111,
            "type" : "integer"
          },
          "name" : {
            "example" : "filterName",
            "type" : "string"
          },
          "filter" : {
            "$ref" : "#/components/schemas/FilterObject_filter"
          },
          "published" : {
            "example" : true,
            "type" : "boolean"
          }
        },
        "type" : "object"
      },
      "contentName" : {
        "description" : "The content name of the document being uploaded. This must be unique for the folder being uploaded to. For instance the document \"pdf.pdf\" cannot be uploaded twice for fileNumber 987654321. The acceptable file extensions are png, pdf, tif, tiff, txt, jpg, jpeg, and bmp.",
        "example" : "filename.pdf",
        "maxLength" : 256,
        "minLength" : 4,
        "pattern" : "^[a-zA-Z0-9 Q`'~=+#^@$&-_.(){};[]E]+.[a-zA-Z]{3,4}$",
        "title" : "Content Name",
        "type" : "string"
      },
      "uploadProviderDataRequest" : {
        "additionalProperties" : false,
        "description" : "Claim Evidence API Provider Data.",
        "properties" : {
          "contentSource" : {
            "description" : "String field designating the originating source of the content being uploaded.",
            "example" : "VBMS",
            "maximum" : 500,
            "minimum" : 1,
            "pattern" : "^[a-zA-Z0-9\\'\\,\\s.\\-\\_\\|\\/@\\(\\)]*$",
            "title" : "Document content source",
            "type" : "string"
          },
          "claimantFirstName" : {
            "description" : "String field designating the Claimant's first name.",
            "example" : "John",
            "maxLength" : 64,
            "pattern" : "^[a-zA-Z0-9\\\\'\\\\,\\\\s.\\\\-\\\\_\\\\|\\\\/@\\\\(\\\\)]*$",
            "title" : "Claimant First Name",
            "type" : "string"
          },
          "claimantMiddleInitial" : {
            "description" : "String field designating the Claimant's middle initial.",
            "example" : "M",
            "maxLength" : 4,
            "pattern" : "^[a-zA-Z]*$",
            "title" : "Claimant Middle Initial",
            "type" : "string"
          },
          "claimantLastName" : {
            "description" : "String field designating the Claimant's last name.",
            "example" : "Smith",
            "maxLength" : 64,
            "pattern" : "^[a-zA-Z0-9\\\\'\\\\,\\\\s.\\\\-\\\\_\\\\|\\\\/@\\\\(\\\\)]*$",
            "title" : "Claimant Last Name",
            "type" : "string"
          },
          "claimantSsn" : {
            "description" : "String field designating the Claimant's SSN. Only accepts exactly 9 characters.",
            "example" : "123456789",
            "maxLength" : 9,
            "pattern" : "^[0-9]*$",
            "title" : "Claimant SSN",
            "type" : "string"
          },
          "benefitTypeId" : {
            "description" : "Number field designating the Benefit Type ID.",
            "example" : 10,
            "minimum" : 0,
            "title" : "Benefit Type ID",
            "type" : "integer"
          },
          "documentTypeId" : {
            "description" : "Number field correlating to a Claim Evidence document type ID. Document types primary use is loosely categorizing their contents.",
            "example" : 131,
            "minimum" : 1,
            "title" : "Document Type ID",
            "type" : "integer"
          },
          "dateVaReceivedDocument" : {
            "description" : "Date field indicating the date the VA received the document. This can be any date in format of YYYY-MM-DD from 1900 until today",
            "example" : "2022-02-01",
            "format" : "string",
            "maxLength" : 10,
            "minLength" : 10,
            "pattern" : "([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))",
            "title" : "Date VA Received Document",
            "type" : "string"
          },
          "subject" : {
            "description" : "Free text describing the document. This is primarily notes used to assist claim developers.",
            "example" : "subject",
            "maxLength" : 256,
            "pattern" : "^[a-zA-Z0-9\\s.\\-_|\\Q\\\\E@#~=%,;?!'\"`():$+*^\\[\\]&<>{}\\Q/\\E]*$",
            "title" : "Subject",
            "type" : "string"
          },
          "contentions" : {
            "description" : "list of contentions by name associated to the document. This is only available for files where the documentType is 526 as evidenced by the is526 property on the /DocumentTypes endpoint response. If there are no contentions supplied, this key should not be on the request.",
            "example" : "[\"contention1\"]",
            "items" : {
              "maxLength" : 128,
              "minLength" : 1,
              "pattern" : "^[a-zA-Z0-9\\s.\\-_|\\Q\\\\E@#~=%,;?!'\"`():$+*^\\[\\]&<>{}\\Q/\\E]*$",
              "type" : "string"
            },
            "title" : "Contentions",
            "type" : "array"
          },
          "alternativeDocumentTypeIds" : {
            "description" : "list of associated document type Ids.",
            "example" : "[1]",
            "items" : {
              "minimum" : 0,
              "type" : "integer"
            },
            "title" : "Alternative Document Type Ids",
            "type" : "array"
          },
          "actionable" : {
            "default" : false,
            "description" : "Boolean true/false for if the document is considered 'actionable' or whether claim action can be taken based on the content.",
            "title" : "Actionable",
            "type" : "boolean"
          },
          "manifestId" : {
            "description" : "UUID that uniquely identifies the manifest",
            "example" : "550e8400-e29b-41d4-a716-446655440000",
            "maxLength" : 36,
            "minLength" : 36,
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "title" : "Manifest Id",
            "type" : "string"
          },
          "documentId" : {
            "description" : "UUID that uniquely identifies the document",
            "example" : "550e8400-e29b-41d4-a716-446655440001",
            "maxLength" : 36,
            "minLength" : 36,
            "pattern" : "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
            "title" : "Document Id",
            "type" : "string"
          },
          "associatedClaimIds" : {
            "description" : "list of associated claim ids.",
            "example" : "[\"1\"]",
            "items" : {
              "maxLength" : 128,
              "minLength" : 1,
              "pattern" : "^[a-zA-Z0-9\\s.\\-_|\\Q\\\\E@#~=%,;?!'\"`():$+*^\\[\\]&<>{}\\Q/\\E]*$",
              "type" : "string"
            },
            "title" : "Associated Claim Ids",
            "type" : "array"
          },
          "notes" : {
            "description" : "Notes to describe the document.",
            "example" : "[This is a note for a document, These replace editing the document summary]",
            "maxLength" : 100,
            "pattern" : "^[a-zA-Z0-9\\s.\\-_|\\Q\\\\E@#~=%,;?!'\"`():$+*^\\[\\]&<>{}\\Q/\\E]*$",
            "title" : "Document Notes",
            "type" : "string"
          },
          "payeeCode" : {
            "description" : "String field designating the Payee Code. Only accepts 2 digits as a string with leading 0 if below 10.",
            "example" : "00",
            "maxLength" : 2,
            "minLength" : 2,
            "pattern" : "^[0-9]*$",
            "title" : "Payee Code",
            "type" : "string"
          },
          "endProductCode" : {
            "description" : "Free text describing the document. This is primarily notes used to assist claim developers. This field must match a valid known end product code.",
            "example" : "130DPNDCY",
            "maxLength" : 64,
            "minLength" : 1,
            "pattern" : "^[a-zA-Z0-9\\s.\\\\\\-\\_\\|\\/@&><\\(\\))\\'\\+\\,\\$]*$",
            "title" : "Subject",
            "type" : "string"
          },
          "regionalProcessingOffice" : {
            "description" : "String field designating the regional processing office.",
            "example" : "Buffalo",
            "maxLength" : 15,
            "minLength" : 3,
            "pattern" : "^[a-zA-Z0-9\\'\\,\\s.\\-\\_\\|\\/@\\(\\)]*$",
            "title" : "Regional Processing Office",
            "type" : "string"
          },
          "facilityCode" : {
            "description" : "String field designating the Facility Code.",
            "example" : "Facility",
            "maxLength" : 8,
            "pattern" : "^[a-zA-Z0-9\\'\\,\\s.\\-\\_\\|\\/@\\(\\)]*$",
            "title" : "Facility Code",
            "type" : "string"
          },
          "claimantParticipantId" : {
            "description" : "String field designating the claimant participant Id.",
            "example" : "000000000",
            "maxLength" : 15,
            "pattern" : "^[0-9]*$",
            "title" : "Claimant Participant Id",
            "type" : "string"
          },
          "sourceComment" : {
            "description" : "String field containing any comments from the source of the document",
            "example" : "source comment",
            "maxLength" : 1200,
            "pattern" : "^[a-zA-Z0-9\\s.\\-_|\\Q\\\\E@#~=%,;?!'\"`():$+*^\\[\\]&<>{}\\Q/\\E]*$",
            "title" : "Source comment",
            "type" : "string"
          },
          "claimantDateOfBirth" : {
            "description" : "Date field indicating the date the claimant was born. This can be any date in format of YYYY-MM-DD from 1900 until today",
            "example" : "2022-01-01",
            "format" : "string",
            "maxLength" : 10,
            "pattern" : "([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))",
            "title" : "Claimant Date of Birth",
            "type" : "string"
          },
          "newMail" : {
            "default" : false,
            "description" : "Boolean true/false for if the document is considered 'new mail'",
            "example" : false,
            "title" : "New Mail",
            "type" : "boolean"
          },
          "documentControlSheet" : {
            "$ref" : "#/components/schemas/Document_Control_Sheet"
          }
        },
        "required" : [ "contentSource", "dateVaReceivedDocument", "documentTypeId" ],
        "title" : "Upload / Update Provider Data",
        "type" : "object"
      },
      "conversionMetadata" : {
        "description" : "Information only present if the document has been converted. Details the previous version mime type, md5, and time of file conversion.",
        "properties" : {
          "versionUuid" : {
            "description" : "UUID identifying the particular version.",
            "format" : "uuid",
            "title" : "Version Uuid",
            "type" : "string"
          },
          "mimeType" : {
            "description" : "Mime Type of the indicated versionUuid.",
            "title" : "Mime Type",
            "type" : "string"
          },
          "uploadedDateTime" : {
            "description" : "Date and time the document was uploaded.",
            "title" : "Uploaded Date Time",
            "type" : "string"
          }
        },
        "title" : "Conversion Meta-data",
        "type" : "object"
      },
      "systemDataComposition" : {
        "description" : "Schema for the systemData block in the response object of the getFileData and search endpoints.",
        "properties" : {
          "uploadedDateTime" : {
            "example" : "2022-03-22T15:24:24",
            "type" : "string"
          },
          "contentName" : {
            "example" : "bf52e49f-5351-4211-b1db-734e3d3c5b64.pdf",
            "type" : "string"
          },
          "contentSize" : {
            "example" : 1234567,
            "type" : "integer"
          },
          "mimeType" : {
            "example" : "application/pdf",
            "type" : "string"
          },
          "uploadSource" : {
            "example" : "VBMS-UI",
            "type" : "string"
          }
        },
        "title" : "System Data Response",
        "type" : "object"
      },
      "providerData" : {
        "description" : "Schema for the providerData block in the response object of the getFileData and search endpoints.",
        "properties" : {
          "modifiedDateTime" : {
            "example" : "2022-03-22T15:24:49",
            "type" : "string"
          },
          "dateVaReceivedDocument" : {
            "example" : "2020-02-20",
            "type" : "string"
          },
          "actionable" : {
            "type" : "boolean"
          },
          "certified" : {
            "type" : "boolean"
          },
          "claimantFirstName" : {
            "type" : "string"
          },
          "claimantMiddleInitial" : {
            "type" : "string"
          },
          "claimantLastName" : {
            "type" : "string"
          },
          "claimantSsn" : {
            "example" : "123-45-6789",
            "type" : "string"
          },
          "contentSource" : {
            "example" : "VISTA",
            "type" : "string"
          },
          "benefitTypeId" : {
            "example" : 13,
            "type" : "integer"
          },
          "regionalProcessingOffice" : {
            "example" : "Buffalo",
            "type" : "string"
          },
          "payeeCode" : {
            "example" : "00",
            "type" : "string"
          },
          "facilityCode" : {
            "example" : "Facility",
            "type" : "string"
          },
          "claimantParticipantId" : {
            "example" : "000000000",
            "type" : "string"
          },
          "documentTypeId" : {
            "example" : 137,
            "format" : "int64",
            "type" : "integer"
          },
          "documentCategoryId" : {
            "example" : 14,
            "format" : "int64",
            "type" : "integer"
          },
          "endProductCode" : {
            "example" : "130DPNDCY",
            "type" : "string"
          },
          "subject" : {
            "example" : "File contains evidence related to the claim.",
            "type" : "string"
          },
          "systemSource" : {
            "example" : "VBMS-UI",
            "type" : "string"
          },
          "veteranFirstName" : {
            "type" : "string"
          },
          "veteranLastName" : {
            "type" : "string"
          },
          "veteranMiddleName" : {
            "type" : "string"
          },
          "veteranSuffix" : {
            "type" : "string"
          },
          "claimantDateOfBirth" : {
            "example" : "2020-02-20",
            "type" : "string"
          },
          "newMail" : {
            "example" : true,
            "type" : "boolean"
          },
          "readByCurrentUser" : {
            "example" : false,
            "type" : "boolean"
          },
          "lastOpenedDocument" : {
            "example" : false,
            "type" : "boolean"
          },
          "duplicateInformation" : {
            "$ref" : "#/components/schemas/providerData_duplicateInformation"
          },
          "ocrStatus" : {
            "example" : "Searchable",
            "type" : "string"
          },
          "isAnnotated" : {
            "example" : true,
            "type" : "boolean"
          },
          "hasContentionAnnotation" : {
            "example" : true,
            "type" : "boolean"
          },
          "notes" : {
            "example" : "This is a note.",
            "type" : "string"
          },
          "bookmarks" : {
            "$ref" : "#/components/schemas/providerData_bookmarks"
          }
        },
        "title" : "Provider Data Response",
        "type" : "object"
      },
      "rawTextData" : {
        "description" : "Schema for the rawTextData block in the response object of the getFileData and search endpoints. (Schema is not currently defined.)",
        "example" : {
          "rawOcrData" : "sample text",
          "ocrDataPerspectives" : {
            "watson" : "sample text processed by ibm",
            "other" : "sample text processed by other"
          }
        },
        "title" : "Raw Text Data Response",
        "type" : "object"
      },
      "page" : {
        "description" : "Object representing OCR data for a page within a file.",
        "properties" : {
          "text" : {
            "type" : "string"
          },
          "lines" : {
            "items" : {
              "$ref" : "#/components/schemas/line"
            },
            "type" : "array"
          },
          "pageNumber" : {
            "minimum" : 1,
            "type" : "integer"
          }
        },
        "required" : [ "pageNumber" ],
        "title" : "OCR Data Page",
        "type" : "object"
      },
      "audit" : {
        "properties" : {
          "dateTime" : {
            "example" : "2022-03-23T14:35:44",
            "type" : "string"
          },
          "userId" : {
            "example" : 269300,
            "type" : "integer"
          },
          "userName" : {
            "type" : "string"
          }
        },
        "title" : "Audit Info (Annotation)",
        "type" : "object"
      },
      "border" : {
        "description" : "Informatiom on the border of the annotation.",
        "properties" : {
          "width" : {
            "description" : "Number of pixels wide border appears.",
            "example" : 1,
            "minimum" : 0,
            "title" : "Border width",
            "type" : "integer"
          },
          "color" : {
            "description" : "Hex color of border. (#XXXXXX) format",
            "example" : "#000000",
            "title" : "Border color",
            "type" : "string"
          }
        },
        "title" : "Border (Annotation)",
        "type" : "object"
      },
      "text" : {
        "properties" : {
          "size" : {
            "example" : 14,
            "type" : "integer"
          },
          "font" : {
            "example" : "Courier-Oblique",
            "type" : "string"
          },
          "alignment" : {
            "example" : "left",
            "type" : "string"
          },
          "color" : {
            "example" : "#000000",
            "type" : "string"
          }
        },
        "title" : "Text (Annotation)",
        "type" : "object"
      },
      "documentCategory" : {
        "description" : "Document type category information for UI consumption.",
        "properties" : {
          "id" : {
            "format" : "int64",
            "type" : "integer"
          },
          "createDateTime" : {
            "type" : "string"
          },
          "modifiedDateTime" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "subDescription" : {
            "type" : "string"
          }
        },
        "title" : "Document Type Category",
        "type" : "object"
      },
      "noteData" : {
        "description" : "Schema for the noteData block in the response object of the search endpoints.",
        "properties" : {
          "archivedBy" : {
            "example" : "jtimbers",
            "type" : "string"
          },
          "archivedDateTime" : {
            "example" : "2022-03-22T15:24:24",
            "type" : "string"
          },
          "claimantParticipantId" : {
            "example" : "192874623",
            "type" : "string"
          },
          "createdDateTime" : {
            "example" : "2022-03-22T15:24:24",
            "type" : "string"
          },
          "createdBy" : {
            "example" : "pmetin",
            "type" : "string"
          },
          "lineOfBusiness" : {
            "example" : "EDU",
            "type" : "string"
          }
        },
        "title" : "Note Data Response",
        "type" : "object"
      },
      "bookmarkSearchResponseModel" : {
        "properties" : {
          "comment" : {
            "example" : "Comment",
            "type" : "string"
          },
          "realm" : {
            "example" : "VBA",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "bookmarkRealmSearchResponseModel" : {
        "properties" : {
          "isDefaultRealm" : {
            "type" : "boolean"
          },
          "appeals" : {
            "$ref" : "#/components/schemas/bookmarkSearchResponseModel"
          },
          "medical" : {
            "$ref" : "#/components/schemas/bookmarkSearchResponseModel"
          },
          "peerReview" : {
            "$ref" : "#/components/schemas/bookmarkSearchResponseModel"
          },
          "workingNotes" : {
            "$ref" : "#/components/schemas/bookmarkSearchResponseModel"
          },
          "deferral" : {
            "$ref" : "#/components/schemas/bookmarkSearchResponseModel"
          },
          "dependency" : {
            "$ref" : "#/components/schemas/bookmarkSearchResponseModel"
          }
        },
        "type" : "object"
      },
      "line" : {
        "description" : "Object representing OCR data for a line within a page.",
        "properties" : {
          "text" : {
            "type" : "string"
          },
          "words" : {
            "items" : {
              "$ref" : "#/components/schemas/word"
            },
            "type" : "array"
          },
          "geometry" : {
            "$ref" : "#/components/schemas/geometry"
          },
          "pageNumber" : {
            "minimum" : 1,
            "type" : "integer"
          }
        },
        "required" : [ "geometry", "pageNumber", "text", "words" ],
        "title" : "OCR Data Line",
        "type" : "object"
      },
      "word" : {
        "description" : "Object representing OCR data for a word within a line.",
        "properties" : {
          "text" : {
            "type" : "string"
          },
          "confidence" : {
            "format" : "float",
            "type" : "number"
          },
          "geometry" : {
            "$ref" : "#/components/schemas/geometry"
          },
          "pageNumber" : {
            "minimum" : 1,
            "type" : "integer"
          }
        },
        "required" : [ "geometry", "pageNumber", "text" ],
        "title" : "OCR Data Word",
        "type" : "object"
      },
      "geometry" : {
        "description" : "Object describing the geometry (location) of an object (line or word) on a page",
        "properties" : {
          "top" : {
            "format" : "float",
            "type" : "number"
          },
          "left" : {
            "format" : "float",
            "type" : "number"
          },
          "width" : {
            "format" : "float",
            "type" : "number"
          },
          "height" : {
            "format" : "float",
            "type" : "number"
          }
        },
        "required" : [ "height", "left", "top", "width" ],
        "title" : "OCR Data - Geometry",
        "type" : "object"
      },
      "searchFiles_400_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/INVALID_JWT"
        }, {
          "$ref" : "#/components/schemas/INVALID_REQUEST"
        }, {
          "$ref" : "#/components/schemas/INVALID_X_EFOLDER_URI"
        }, {
          "$ref" : "#/components/schemas/UNABLE_TO_VERIFY_FOLDER"
        }, {
          "$ref" : "#/components/schemas/DOES_NOT_CONFORM_TO_SCHEMA"
        }, {
          "$ref" : "#/components/schemas/VALIDATE_INVALID_VALUE"
        } ]
      },
      "searchFiles_403_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/UNABLE_TO_RETRIEVE_PERSON"
        }, {
          "$ref" : "#/components/schemas/UNABLE_TO_RETRIEVE_VETERAN"
        }, {
          "$ref" : "#/components/schemas/UNAUTHORIZED"
        } ]
      },
      "searchFiles_500_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/UNABLE_TO_RETRIEVE_USER"
        }, {
          "$ref" : "#/components/schemas/NO_RESULTS_RETURNED"
        }, {
          "$ref" : "#/components/schemas/INVALID_EVALUATION_TYPE"
        }, {
          "$ref" : "#/components/schemas/NULL_RESPONSE"
        }, {
          "$ref" : "#/components/schemas/UNKNOWN_ERROR"
        }, {
          "$ref" : "#/components/schemas/JSON_DESERIALIZATION"
        }, {
          "$ref" : "#/components/schemas/JSON_SERIALIZATION"
        } ]
      },
      "upload_400_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/INVALID_JWT"
        }, {
          "$ref" : "#/components/schemas/INVALID_REQUEST"
        }, {
          "$ref" : "#/components/schemas/INVALID_X_EFOLDER_URI"
        }, {
          "$ref" : "#/components/schemas/UNABLE_TO_VERIFY_FOLDER"
        }, {
          "$ref" : "#/components/schemas/DOES_NOT_CONFORM_TO_SCHEMA"
        }, {
          "$ref" : "#/components/schemas/VALIDATE_INVALID_VALUE"
        }, {
          "$ref" : "#/components/schemas/DUPLICATE_PROVIDERDATA_KEYS"
        }, {
          "$ref" : "#/components/schemas/DISABLED_IDENTIFER"
        } ]
      },
      "upload_415_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/INVALID_MIMETYPE"
        }, {
          "$ref" : "#/components/schemas/WRONG_MIMETYPE_EXTENSION"
        } ]
      },
      "upload_500_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/UNABLE_TO_DETERMINE_MIMETYPE"
        }, {
          "$ref" : "#/components/schemas/UNABLE_TO_RETRIEVE_USER"
        }, {
          "$ref" : "#/components/schemas/UNABLE_TO_UPLOAD_DOCUMENT_CONTENT"
        }, {
          "$ref" : "#/components/schemas/UNABLE_TO_PERSIST_DATA"
        }, {
          "$ref" : "#/components/schemas/UNABLE_TO_CONVERT"
        }, {
          "$ref" : "#/components/schemas/UNKNOWN_ERROR"
        }, {
          "$ref" : "#/components/schemas/JSON_DESERIALIZATION"
        }, {
          "$ref" : "#/components/schemas/JSON_SERIALIZATION"
        } ]
      },
      "update_400_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/INVALID_JWT"
        }, {
          "$ref" : "#/components/schemas/INVALID_REQUEST"
        }, {
          "$ref" : "#/components/schemas/INVALID_X_EFOLDER_URI"
        }, {
          "$ref" : "#/components/schemas/UNABLE_TO_VERIFY_FOLDER"
        }, {
          "$ref" : "#/components/schemas/DOES_NOT_CONFORM_TO_SCHEMA"
        }, {
          "$ref" : "#/components/schemas/VALIDATE_INVALID_VALUE"
        }, {
          "$ref" : "#/components/schemas/DUPLICATE_PROVIDERDATA_KEYS"
        } ]
      },
      "update_500_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/UNABLE_TO_DETERMINE_MIMETYPE"
        }, {
          "$ref" : "#/components/schemas/UNABLE_TO_RETRIEVE_USER"
        }, {
          "$ref" : "#/components/schemas/UNABLE_TO_UPLOAD_DOCUMENT_CONTENT"
        }, {
          "$ref" : "#/components/schemas/UNABLE_TO_PERSIST_DATA"
        }, {
          "$ref" : "#/components/schemas/UNABLE_TO_REMEDIATE_DATA"
        }, {
          "$ref" : "#/components/schemas/UNABLE_TO_CONVERT"
        }, {
          "$ref" : "#/components/schemas/UNKNOWN_ERROR"
        }, {
          "$ref" : "#/components/schemas/JSON_DESERIALIZATION"
        } ]
      },
      "getData_200_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/currentFileDataComposition"
        }, {
          "$ref" : "#/components/schemas/currentFileDataCompositionWithRawTextData"
        } ]
      },
      "getData_500_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/UNABLE_TO_RETRIEVE_USER"
        }, {
          "$ref" : "#/components/schemas/INVALID_RESPONSE"
        }, {
          "$ref" : "#/components/schemas/NULL_RESPONSE"
        }, {
          "$ref" : "#/components/schemas/UNKNOWN_ERROR"
        }, {
          "$ref" : "#/components/schemas/JSON_SERIALIZATION"
        } ]
      },
      "updateData_500_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/UNABLE_TO_RETRIEVE_USER"
        }, {
          "$ref" : "#/components/schemas/UNABLE_TO_PERSIST_DATA"
        }, {
          "$ref" : "#/components/schemas/UNKNOWN_ERROR"
        }, {
          "$ref" : "#/components/schemas/JSON_DESERIALIZATION"
        } ]
      },
      "retrieveOcrData_404_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/RESOURCE_NOT_FOUND"
        }, {
          "$ref" : "#/components/schemas/CURRENT_VERSION_NOT_FOUND"
        } ]
      },
      "retrieveOcrData_500_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/UNABLE_TO_RETRIEVE_USER"
        }, {
          "$ref" : "#/components/schemas/NULL_RESPONSE"
        }, {
          "$ref" : "#/components/schemas/UNKNOWN_ERROR"
        } ]
      },
      "updateOcrData_400_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/INVALID_JWT"
        }, {
          "$ref" : "#/components/schemas/DOES_NOT_CONFORM_TO_SCHEMA"
        }, {
          "$ref" : "#/components/schemas/VALIDATE_INVALID_VALUE"
        } ]
      },
      "updateOcrData_500_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/UNABLE_TO_RETRIEVE_USER"
        }, {
          "$ref" : "#/components/schemas/UNABLE_TO_PERSIST_DATA"
        }, {
          "$ref" : "#/components/schemas/UNKNOWN_ERROR"
        }, {
          "$ref" : "#/components/schemas/JSON_DESERIALIZATION"
        }, {
          "$ref" : "#/components/schemas/JSON_SERIALIZATION"
        } ]
      },
      "getContent_500_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/UNABLE_TO_RETRIEVE_USER"
        }, {
          "$ref" : "#/components/schemas/PAYLOAD_VALIDATION"
        }, {
          "$ref" : "#/components/schemas/UNKNOWN_ERROR"
        } ]
      },
      "Annotation_Request" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/basicAnnotationRequest"
        }, {
          "$ref" : "#/components/schemas/lineAnnotationRequest"
        }, {
          "$ref" : "#/components/schemas/calloutAnnotationRequest"
        }, {
          "$ref" : "#/components/schemas/freetextAnnotationRequest"
        }, {
          "$ref" : "#/components/schemas/noteAnnotationRequest"
        }, {
          "$ref" : "#/components/schemas/stampAnnotationRequest"
        }, {
          "$ref" : "#/components/schemas/textSelectionRequest"
        } ],
        "title" : "Annotation Request",
        "type" : "object"
      },
      "Save_Annotation_Response" : {
        "properties" : {
          "uuid" : {
            "format" : "uuid",
            "type" : "string"
          }
        },
        "title" : "Save Annotation Response",
        "type" : "object"
      },
      "addAnnotations_400_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/DOES_NOT_CONFORM_TO_SCHEMA"
        }, {
          "$ref" : "#/components/schemas/VALIDATE_INVALID_VALUE"
        }, {
          "$ref" : "#/components/schemas/INVALID_JWT"
        } ]
      },
      "addAnnotations_500_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/UNABLE_TO_RETRIEVE_USER"
        }, {
          "$ref" : "#/components/schemas/NULL_RESPONSE"
        }, {
          "$ref" : "#/components/schemas/UNKNOWN_ERROR"
        }, {
          "$ref" : "#/components/schemas/JSON_DESERIALIZATION"
        } ]
      },
      "getBookmarks_500_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/UNABLE_TO_RETRIEVE_USER"
        }, {
          "$ref" : "#/components/schemas/UNKNOWN_ERROR"
        } ]
      },
      "saveBookmarks_400_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/INVALID_JWT"
        }, {
          "$ref" : "#/components/schemas/INVALID_REQUEST"
        }, {
          "$ref" : "#/components/schemas/INVALID_X_EFOLDER_URI"
        }, {
          "$ref" : "#/components/schemas/UNABLE_TO_VERIFY_FOLDER"
        }, {
          "$ref" : "#/components/schemas/DOES_NOT_CONFORM_TO_SCHEMA"
        } ]
      },
      "saveBookmarks_500_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/UNABLE_TO_RETRIEVE_USER"
        }, {
          "$ref" : "#/components/schemas/UNKNOWN_ERROR"
        }, {
          "$ref" : "#/components/schemas/JSON_DESERIALIZATION"
        } ]
      },
      "deleteBookmarks_400_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/INVALID_JWT"
        }, {
          "$ref" : "#/components/schemas/INVALID_REQUEST"
        }, {
          "$ref" : "#/components/schemas/INVALID_X_EFOLDER_URI"
        }, {
          "$ref" : "#/components/schemas/UNABLE_TO_VERIFY_FOLDER"
        } ]
      },
      "Update_Annotation_Request" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/basicAnnotationUpdateRequest"
        }, {
          "$ref" : "#/components/schemas/lineAnnotationUpdateRequest"
        } ],
        "title" : "Update Annotation Request",
        "type" : "object"
      },
      "updateAnnotations_500_response" : {
        "oneOf" : [ {
          "type" : "object"
        }, {
          "$ref" : "#/components/schemas/UNKNOWN_ERROR"
        }, {
          "$ref" : "#/components/schemas/JSON_DESERIALIZATION"
        }, {
          "$ref" : "#/components/schemas/JSON_SERIALIZATION"
        } ]
      },
      "getAssociation_200_response" : {
        "properties" : {
          "associatedClaimIds" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "associate_request" : {
        "properties" : {
          "asssociatedClaimIds" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "associate_400_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/INVALID_JWT"
        }, {
          "$ref" : "#/components/schemas/DOES_NOT_CONFORM_TO_SCHEMA"
        } ]
      },
      "getOcrRaw_404_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/DATA_NOT_FOUND_FOR_CURRENT_VERSION"
        }, {
          "$ref" : "#/components/schemas/CURRENT_VERSION_NOT_FOUND"
        } ]
      },
      "updateOcrRaw_500_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/UNABLE_TO_RETRIEVE_USER"
        }, {
          "$ref" : "#/components/schemas/UNABLE_TO_PERSIST_DATA"
        }, {
          "$ref" : "#/components/schemas/UNKNOWN_ERROR"
        } ]
      },
      "getOcrPerspective_400_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/INVALID_JWT"
        } ]
      },
      "upload_500_response_1" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/UNABLE_TO_RETRIEVE_USER"
        }, {
          "$ref" : "#/components/schemas/UNABLE_TO_DETERMINE_MIMETYPE"
        }, {
          "$ref" : "#/components/schemas/UNKNOWN_ERROR"
        } ]
      },
      "createNote_500_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/UNABLE_TO_RETRIEVE_USER"
        }, {
          "$ref" : "#/components/schemas/PAYLOAD_VALIDATION"
        }, {
          "$ref" : "#/components/schemas/INVALID_RESPONSE"
        }, {
          "$ref" : "#/components/schemas/NULL_RESPONSE"
        }, {
          "$ref" : "#/components/schemas/UNKNOWN_ERROR"
        }, {
          "$ref" : "#/components/schemas/JSON_DESERIALIZATION"
        } ]
      },
      "searchNotes_400_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/INVALID_JWT"
        }, {
          "$ref" : "#/components/schemas/INVALID_REQUEST"
        }, {
          "$ref" : "#/components/schemas/INVALID_X_EFOLDER_URI"
        }, {
          "$ref" : "#/components/schemas/UNABLE_TO_VERIFY_FOLDER"
        }, {
          "$ref" : "#/components/schemas/DOES_NOT_CONFORM_TO_SCHEMA"
        }, {
          "$ref" : "#/components/schemas/VALIDATE_INVALID_VALUE"
        }, {
          "$ref" : "#/components/schemas/INVALID_RESPONSE"
        }, {
          "$ref" : "#/components/schemas/NULL_RESPONSE"
        } ]
      },
      "searchNotes_500_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/UNABLE_TO_RETRIEVE_USER"
        }, {
          "$ref" : "#/components/schemas/NO_RESULTS_RETURNED"
        }, {
          "$ref" : "#/components/schemas/PAYLOAD_VALIDATION"
        }, {
          "$ref" : "#/components/schemas/UNKNOWN_ERROR"
        }, {
          "$ref" : "#/components/schemas/JSON_DESERIALIZATION"
        }, {
          "$ref" : "#/components/schemas/JSON_SERIALIZATION"
        } ]
      },
      "migrateNote_500_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/UNABLE_TO_RETRIEVE_USER"
        }, {
          "$ref" : "#/components/schemas/NO_RESULTS_RETURNED"
        }, {
          "$ref" : "#/components/schemas/UNABLE_TO_UPLOAD_DOCUMENT_CONTENT"
        }, {
          "$ref" : "#/components/schemas/UNKNOWN_ERROR"
        }, {
          "$ref" : "#/components/schemas/JSON_DESERIALIZATION"
        } ]
      },
      "retrieveSavedFilters_501_response" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/OPERATION_NOT_ENABLED"
        }, {
          "$ref" : "#/components/schemas/UNKNOWN_ERROR"
        } ]
      },
      "saveAndPublishFilter_200_response_filter_providerData_keyword" : {
        "properties" : {
          "evaluationType" : {
            "example" : "CONTAINS",
            "type" : "string"
          },
          "value" : {
            "example" : "[\"filter\",\"two\"]",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "saveAndPublishFilter_200_response_filter_textContent_query" : {
        "properties" : {
          "includesAll" : {
            "example" : [ "includes all example", "includes all example 2" ],
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          },
          "excludes" : {
            "items" : {
              "example" : "[excludes criteria]",
              "type" : "string"
            },
            "type" : "array"
          },
          "includesAtLeastOne" : {
            "items" : {
              "example" : "[color]",
              "type" : "string"
            },
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "saveAndPublishFilter_200_response_filter_textContent" : {
        "properties" : {
          "evaluationType" : {
            "example" : "QUERY",
            "type" : "string"
          },
          "query" : {
            "$ref" : "#/components/schemas/saveAndPublishFilter_200_response_filter_textContent_query"
          }
        },
        "type" : "object"
      },
      "saveAndPublishFilter_200_response_filter" : {
        "properties" : {
          "providerData.keyword" : {
            "$ref" : "#/components/schemas/saveAndPublishFilter_200_response_filter_providerData_keyword"
          },
          "textContent" : {
            "$ref" : "#/components/schemas/saveAndPublishFilter_200_response_filter_textContent"
          }
        },
        "type" : "object"
      },
      "saveAndPublishFilter_200_response" : {
        "properties" : {
          "id" : {
            "example" : 1111111,
            "type" : "integer"
          },
          "name" : {
            "example" : "filterName",
            "type" : "string"
          },
          "filter" : {
            "$ref" : "#/components/schemas/saveAndPublishFilter_200_response_filter"
          },
          "published" : {
            "example" : true,
            "type" : "boolean"
          }
        },
        "type" : "object"
      },
      "updateSavedFilter_200_response_filter_textContent_query" : {
        "properties" : {
          "includesAtLeastOne" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "updateSavedFilter_200_response_filter_textContent" : {
        "properties" : {
          "evaluationType" : {
            "example" : "QUERY",
            "type" : "string"
          },
          "query" : {
            "$ref" : "#/components/schemas/updateSavedFilter_200_response_filter_textContent_query"
          }
        },
        "type" : "object"
      },
      "updateSavedFilter_200_response_filter" : {
        "properties" : {
          "textContent" : {
            "$ref" : "#/components/schemas/updateSavedFilter_200_response_filter_textContent"
          }
        },
        "type" : "object"
      },
      "updateSavedFilter_200_response" : {
        "properties" : {
          "id" : {
            "example" : 1019,
            "type" : "integer"
          },
          "name" : {
            "type" : "string"
          },
          "filter" : {
            "$ref" : "#/components/schemas/updateSavedFilter_200_response_filter"
          },
          "published" : {
            "type" : "boolean"
          }
        },
        "type" : "object"
      },
      "subscribeToPublishedSavedFilter_200_response_savedFilterSubscription" : {
        "properties" : {
          "id" : {
            "example" : 100,
            "type" : "integer"
          },
          "vbmsUserId" : {
            "example" : 111111,
            "type" : "integer"
          },
          "filterId" : {
            "example" : 1003,
            "type" : "integer"
          }
        },
        "type" : "object"
      },
      "subscribeToPublishedSavedFilter_200_response" : {
        "properties" : {
          "savedFilterSubscription" : {
            "$ref" : "#/components/schemas/subscribeToPublishedSavedFilter_200_response_savedFilterSubscription"
          }
        },
        "type" : "object"
      },
      "unsubscribeFromPublishedSavedFilter_200_response_savedFilterSubscription" : {
        "properties" : {
          "id" : {
            "example" : 111111,
            "type" : "integer"
          },
          "vbmsUserId" : {
            "example" : 222222,
            "type" : "integer"
          },
          "filterId" : {
            "example" : 9999999,
            "type" : "integer"
          }
        },
        "type" : "object"
      },
      "unsubscribeFromPublishedSavedFilter_200_response" : {
        "properties" : {
          "savedFilterSubscription" : {
            "$ref" : "#/components/schemas/unsubscribeFromPublishedSavedFilter_200_response_savedFilterSubscription"
          }
        },
        "type" : "object"
      },
      "deleteSavedFileQuery_200_response_savedFilter" : {
        "properties" : {
          "id" : {
            "example" : 2800103,
            "type" : "integer"
          },
          "queryName" : {
            "example" : "portals Savings e83d87d7-6f63-4442-8f01-1d41a9f0f78e",
            "type" : "string"
          },
          "userId" : {
            "example" : 1126900,
            "type" : "integer"
          },
          "published" : {
            "example" : false,
            "type" : "boolean"
          },
          "queryContent" : {
            "example" : "{\"filters\":{\"providerData.keyword\":{\"evaluationType\":\"CONTAINS\",\"value\":\"[\\\"doc\\\",\\\"type\\\"]\"},\"textContent\":{\"evaluationType\":\"QUERY\",\"query\":{\"includesAll\":[\"includes all example\",\"includes all example 2\"]}}}}",
            "type" : "string"
          },
          "active" : {
            "example" : false,
            "type" : "boolean"
          }
        },
        "type" : "object"
      },
      "deleteSavedFileQuery_200_response" : {
        "properties" : {
          "savedFilter" : {
            "$ref" : "#/components/schemas/deleteSavedFileQuery_200_response_savedFilter"
          }
        },
        "type" : "object"
      },
      "noJwtResponse_messages_inner" : {
        "properties" : {
          "timestamp" : {
            "example" : "2024-05-20T15:53:29.389",
            "type" : "string"
          },
          "key" : {
            "enum" : [ "UNAUTHORIZED" ],
            "type" : "string"
          },
          "severity" : {
            "enum" : [ "ERROR" ],
            "type" : "string"
          },
          "status" : {
            "enum" : [ "401" ],
            "type" : "string"
          },
          "text" : {
            "enum" : [ "No JWT Token in Header." ],
            "type" : "string"
          },
          "httpStatus" : {
            "enum" : [ "UNAUTHORIZED" ],
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "saveBookmarksRequest_appeals" : {
        "properties" : {
          "comment" : {
            "example" : "Comments have a max of 100 characters",
            "maxLength" : 100,
            "pattern" : "^[a-zA-Z0-9\\\\s.\\\\-_|\\\\Q\\\\\\\\E@#~=%,;?!'\\\"`():$+*^\\\\[\\\\]&<>{}\\\\Q/\\\\E]*$",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "saveBookmarksRequest_workingNotes" : {
        "properties" : {
          "comment" : {
            "example" : "Can have some special characters and Numbers {}>>?",
            "maxLength" : 100,
            "pattern" : "^[a-zA-Z0-9\\\\s.\\\\-_|\\\\Q\\\\\\\\E@#~=%,;?!'\\\"`():$+*^\\\\[\\\\]&<>{}\\\\Q/\\\\E]*$",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "saveBookmarksRequest_medical" : {
        "properties" : {
          "comment" : {
            "example" : "Comments are not required, with the exception of deferral bookmark types",
            "maxLength" : 100,
            "pattern" : "^[a-zA-Z0-9\\\\s.\\\\-_|\\\\Q\\\\\\\\E@#~=%,;?!'\\\"`():$+*^\\\\[\\\\]&<>{}\\\\Q/\\\\E]*$",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "saveBookmarksRequest_deferral" : {
        "properties" : {
          "comment" : {
            "example" : "Need at least one character in comment for this bookmark type",
            "maxLength" : 100,
            "minLength" : 1,
            "pattern" : "^\\\\S[a-zA-Z0-9\\\\s.\\\\-_|\\\\Q\\\\\\\\E@#~=%,;?!'\\\"`():$+*^\\\\[\\\\]&<>{}\\\\Q/\\\\E]*$",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "saveBookmarksRequest_dependency" : {
        "properties" : {
          "comment" : {
            "example" : "Only one instance of each bookmark type is allowed per file",
            "maxLength" : 100,
            "pattern" : "^[a-zA-Z0-9\\\\s.\\\\-_|\\\\Q\\\\\\\\E@#~=%,;?!'\\\"`():$+*^\\\\[\\\\]&<>{}\\\\Q/\\\\E]*$",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "saveBookmarksRequest_peerReview" : {
        "properties" : {
          "comment" : {
            "example" : "Comments will update when resending a bookmark type",
            "maxLength" : 100,
            "pattern" : "^[a-zA-Z0-9\\\\s.\\\\-_|\\\\Q\\\\\\\\E@#~=%,;?!'\\\"`():$+*^\\\\[\\\\]&<>{}\\\\Q/\\\\E]*$",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "bookmarkResponseModel_created" : {
        "properties" : {
          "dateTime" : {
            "example" : "2022-04-26T22:41:16",
            "type" : "string"
          },
          "userName" : {
            "example" : "jim *han",
            "type" : "string"
          },
          "userId" : {
            "example" : 132050,
            "format" : "int32",
            "type" : "integer"
          }
        },
        "type" : "object"
      },
      "createNoteRequest_noteData" : {
        "properties" : {
          "claimantParticipantId" : {
            "description" : "String field designating the claimant participant Id.",
            "example" : "000000000",
            "maxLength" : 15,
            "pattern" : "^[0-9]*$",
            "title" : "Claimant Participant Id",
            "type" : "string"
          },
          "lineOfBusiness" : {
            "example" : "EDU",
            "pattern" : "^[a-zA-Z0-9\\s.\\-_|\\Q\\\\E@#~=%,;?!'\"`():$+*^\\[\\]&<>{}\\Q/\\E]*$",
            "title" : "Line of Business",
            "type" : "string"
          }
        },
        "required" : [ "claimantParticipantId", "lineOfBusiness" ],
        "type" : "object"
      },
      "FilterRequest_filters_textContent_query" : {
        "properties" : {
          "includesAll" : {
            "example" : [ "includes all example", "includes all example 2" ],
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "FilterRequest_filters_textContent" : {
        "properties" : {
          "evaluationType" : {
            "example" : "QUERY",
            "type" : "string"
          },
          "query" : {
            "$ref" : "#/components/schemas/FilterRequest_filters_textContent_query"
          }
        },
        "type" : "object"
      },
      "FilterRequest_filters" : {
        "properties" : {
          "providerData.keyword" : {
            "$ref" : "#/components/schemas/saveAndPublishFilter_200_response_filter_providerData_keyword"
          },
          "textContent" : {
            "$ref" : "#/components/schemas/FilterRequest_filters_textContent"
          }
        },
        "type" : "object"
      },
      "moveNotificationsResponse_sent_inner_documentType" : {
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "description" : {
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "moveNotificationsResponse_sent_inner" : {
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "documentType" : {
            "$ref" : "#/components/schemas/moveNotificationsResponse_sent_inner_documentType"
          },
          "destination" : {
            "$ref" : "#/components/schemas/moveNotificationsResponse_sent_inner_documentType"
          },
          "destinationName" : {
            "type" : "string"
          },
          "date" : {
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "moveNotificationsResponse_received_inner" : {
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "documentType" : {
            "$ref" : "#/components/schemas/moveNotificationsResponse_sent_inner_documentType"
          },
          "source" : {
            "$ref" : "#/components/schemas/moveNotificationsResponse_sent_inner_documentType"
          },
          "sourceName" : {
            "type" : "string"
          },
          "date" : {
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "periodOfServiceDocumentsResponse_periodOfServiceInformationList_inner" : {
        "properties" : {
          "enteredOnDutyDt" : {
            "example" : "13/03/2022",
            "type" : "string"
          },
          "releasedActiveDutyDt" : {
            "example" : "21/04/2024",
            "type" : "string"
          },
          "verified" : {
            "type" : "boolean"
          },
          "veteransAssistanceDischargeSystemVerified" : {
            "type" : "boolean"
          },
          "linkageTypes" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "uploadRequest_1_uploads_inner" : {
        "description" : "List of documents to upload, each with a document ID and title",
        "properties" : {
          "documentId" : {
            "description" : "The UUID of the document",
            "format" : "uuid",
            "type" : "string"
          },
          "title" : {
            "description" : "The title of the document",
            "type" : "string"
          }
        },
        "required" : [ "documentId" ],
        "type" : "object"
      },
      "getManifestResponse_documentUploadResponses_inner" : {
        "properties" : {
          "documentId" : {
            "description" : "document identification",
            "format" : "uuid",
            "type" : "string"
          },
          "documentUploadDataId" : {
            "description" : "document upload data identification",
            "format" : "int64",
            "type" : "integer"
          },
          "documentTitle" : {
            "description" : "document title",
            "type" : "string"
          },
          "completed" : {
            "description" : "whether the document has been completed",
            "type" : "boolean"
          }
        },
        "type" : "object"
      },
      "Period_Of_Service_Information_List_inner" : {
        "properties" : {
          "enteredOnDutyDt" : {
            "example" : "13/03/2022",
            "type" : "string"
          },
          "releasedActiveDutyDt" : {
            "example" : "21/04/2024",
            "type" : "string"
          },
          "linkageTypes" : {
            "items" : {
              "type" : "string"
            },
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "selectedAreas_inner" : {
        "properties" : {
          "topLeftX" : {
            "example" : 50,
            "type" : "integer"
          },
          "topLeftY" : {
            "example" : 100,
            "type" : "integer"
          },
          "topRightX" : {
            "example" : 100,
            "type" : "integer"
          },
          "topRightY" : {
            "example" : 100,
            "type" : "integer"
          },
          "bottomLeftX" : {
            "example" : 100,
            "type" : "integer"
          },
          "bottomLeftY" : {
            "example" : 50,
            "type" : "integer"
          },
          "bottomRightX" : {
            "example" : 50,
            "type" : "integer"
          },
          "bottomRightY" : {
            "example" : 50,
            "type" : "integer"
          }
        },
        "type" : "object"
      },
      "Unassociate_Permission" : {
        "description" : "Flag indicating whether the requesting user has permission to unassociate file.",
        "properties" : {
          "hasAccess" : {
            "example" : true,
            "title" : "the value of the unassoicate permission",
            "type" : "boolean"
          }
        },
        "title" : "Unassociate Permission",
        "type" : "object"
      },
      "Move_Permission" : {
        "description" : "Flag indicating whether the requesting user has permission to move file",
        "properties" : {
          "hasAccess" : {
            "example" : true,
            "title" : "the value of the move permission",
            "type" : "boolean"
          }
        },
        "title" : "Move Permission",
        "type" : "object"
      },
      "FilterObject_filter_textContent_query" : {
        "properties" : {
          "includesAll" : {
            "items" : {
              "example" : "[\"swelling\",\"bruised\"]",
              "type" : "string"
            },
            "type" : "array"
          },
          "excludes" : {
            "items" : {
              "example" : "[\"leg\"]",
              "type" : "string"
            },
            "type" : "array"
          },
          "includesAtLeastOne" : {
            "items" : {
              "example" : "[\"discolored\"]",
              "type" : "string"
            },
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "FilterObject_filter_textContent" : {
        "properties" : {
          "evaluationType" : {
            "example" : "QUERY",
            "type" : "string"
          },
          "query" : {
            "$ref" : "#/components/schemas/FilterObject_filter_textContent_query"
          }
        },
        "type" : "object"
      },
      "FilterObject_filter" : {
        "properties" : {
          "textContent" : {
            "$ref" : "#/components/schemas/FilterObject_filter_textContent"
          }
        },
        "type" : "object"
      },
      "Document_Control_Sheet" : {
        "description" : "Object contains document sheet id and status",
        "properties" : {
          "dcsId" : {
            "description" : "Optional DCS id during upload",
            "example" : "LZ8GEZK16F0D8P",
            "maxLength" : 256,
            "minimum" : 1,
            "pattern" : "^[a-zA-Z0-9]{1,13}-?[a-zA-Z0-9]{1,6}$",
            "title" : "DCS ID",
            "type" : "string"
          },
          "dcsScanningComplete" : {
            "default" : false,
            "description" : "Boolean true/false for if this document completes its DCS set",
            "example" : false,
            "title" : "DCS has Completed Scanning",
            "type" : "boolean"
          }
        },
        "required" : [ "dcsId" ],
        "title" : "Document Control Sheet",
        "type" : "object"
      },
      "providerData_duplicateInformation" : {
        "properties" : {
          "bestCopy" : {
            "type" : "boolean"
          },
          "certifiedCopy" : {
            "type" : "boolean"
          },
          "establishesDate" : {
            "type" : "boolean"
          },
          "groupId" : {
            "type" : "integer"
          }
        },
        "type" : "object"
      },
      "providerData_bookmarks" : {
        "properties" : {
          "appeals" : {
            "$ref" : "#/components/schemas/bookmarkSearchResponseModel"
          },
          "medical" : {
            "$ref" : "#/components/schemas/bookmarkSearchResponseModel"
          },
          "peerReview" : {
            "$ref" : "#/components/schemas/bookmarkSearchResponseModel"
          },
          "workingNotes" : {
            "$ref" : "#/components/schemas/bookmarkSearchResponseModel"
          },
          "deferral" : {
            "$ref" : "#/components/schemas/bookmarkSearchResponseModel"
          },
          "dependency" : {
            "$ref" : "#/components/schemas/bookmarkSearchResponseModel"
          },
          "VBA" : {
            "$ref" : "#/components/schemas/bookmarkRealmSearchResponseModel"
          },
          "VRO" : {
            "$ref" : "#/components/schemas/bookmarkRealmSearchResponseModel"
          },
          "BVA" : {
            "$ref" : "#/components/schemas/bookmarkRealmSearchResponseModel"
          }
        },
        "type" : "object"
      }
    },
    "securitySchemes" : {
      "bearer-key" : {
        "bearerFormat" : "JWT",
        "scheme" : "bearer",
        "type" : "http"
      }
    }
  }
}