appName: ""
target_env: ""
image:
  value: ""
  tag: ""
  pullPolicy: Always
vsp_environment: ""
affitnityWeight: ""
mockData:
  enabled: false
matchExpressions:
  key: app
  operator: In
topologyKey: kubernetes.io/hostname
annotations:
  ad.datadoghq.com/vets-api-web.checks: {}
serviceAccount:
  enabled: false
  role_arn: ""
  name: ""

#Web configuration
web:
  strategyType: RollingUpdate
  maxSurge: ""
  maxUnavailable: ""
  securityContext: ""
  images:
  autoscaling:
    enabled: false
    scaling_metric: ""
    minReplicas: ""
    maxReplicas: ""
    targetAverageValue: ""
  affinity:
    weight: ""
  containers:
    ports:
      - containerPort: ""
        name: web
      - containerPort: ""
        name: ""
  healthCheck:
    requestPath: ""
    port: ""
    initialDelaySeconds: ""
    periodSeconds: ""
    readinessPath: ""
    readinessPort: ""
  socatProxyEnabled: false
  envSecrets:
    - name: DD_APM_ENABLED
      value: false
  resources:
    requests:
      cpu: ""
      memory: ""
    limits:
      cpu: ""
      memory: ""
  ssoeEnabled: false
  ssoeConfigs:
    - name: ""
      key: ""
      value: {}
  ingress:
    enabled: false
    entryPoints: web
  webServices:
    default:
      kind: ""
      middleware: ""
      host: ""
      port: ""
      priority: ""
    service: {}
  service:
    enabled: false
    annotations:
      traefik.backend.loadbalancer.sticky: "true"
    ports:
    # port is what this service should serve on, and targetPort is the port in the container.
    - port: ""
      name: ""
      targetPort: web
      protocol: TCP
    - port: ""
      name: healthcheck
      targetPort: stats
      protocol: TCP
    type: ClusterIP
  hpa:
    apiVersion: apps/v1
    kind: Deployment
  externalDns:
    dnsName: ""
    recordTTL: 180
    targets: ""
  dbMigrate:
    enabled: true
    envSecrets:
      - name: DD_APM_ENABLED
        value: false
  pumaBacklog:
    enabled: false
#Worker Configuration
worker:
  enabled: false
  strategyType: RollingUpdate
  maxSurge: ""
  maxUnavailable: ""
  securityContext: ""
  metadata:
    name: ""
  containers:
    command: []
    args: []
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetAverageValue: ""
  healthCheck:
    requestPath: ""
    port: ""
    initialDelaySeconds: ""
    periodSeconds: ""
    readinessPath: ""
    readinessPort: ""
    timeoutSeconds: ""
    successThreshold: 1
    command: []
  terminationGracePeriodSeconds: ""
  socatProxyEnabled: false
  envSecrets:
    - name: DD_APM_ENABLED
      value: false
  resources:
      requests:
        cpu: ""
        memory: ""
      limits:
        cpu: ""
        memory: ""
  service:
    enabled: false


# Common configuration
common:
  socatProxy: {}
  lighthousePreConfigs:
    name: ""
    data: ""
  volumeMounts: {}

  volumes: {}
  initContainers: {}
  secrets: {}

  configMap:
    name: ""
    fileName: ""
    data: ""
