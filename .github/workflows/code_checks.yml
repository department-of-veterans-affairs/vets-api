name: Code Checks
on: [push]
permissions:
  contents: read
  checks: write
jobs:
  linting_and_security:
    name: Linting and Security
    env:
      BUNDLE_ENTERPRISE__CONTRIBSYS__COM: ${{ secrets.BUNDLE_ENTERPRISE__CONTRIBSYS__COM }}
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Run bundle-audit (checks gems for CVE issues)
        run:  bundle exec bundle-audit check --update  --ignore CVE-2022-46648

      - name: Run Rubocop
        run: bundle exec rubocop --parallel --format progress --format json --out rubocop.json

      - name: Run Brakeman
        run:  bundle exec brakeman --ensure-latest --confidence-level=2 -o brakeman.json

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Linting and Security Results
          path: |
            rubocop.json
            brakeman.json
          if-no-files-found: ignore

  tests:
    name: Test
    env:
      BUNDLE_ENTERPRISE__CONTRIBSYS__COM: ${{ secrets.BUNDLE_ENTERPRISE__CONTRIBSYS__COM }}
      CI: true
      RAILS_ENV: test
      TERM: xterm-256color
    runs-on: ubuntu-8-cores-latest
    steps:
      - uses: actions/checkout@v3

      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Setup Environment
        run: |
          echo "USER_ID=$(id -u)" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        uses: docker/build-push-action@v4
        with:
          build-args: |
            BUNDLE_ENTERPRISE__CONTRIBSYS__COM=${{ env.BUNDLE_ENTERPRISE__CONTRIBSYS__COM }}
            USER_ID=${{ env.USER_ID }}
          context: .
          push: false
          load: true
          tags: vets-api
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install gems
        run: |
             docker-compose -f docker-compose.test.yml -f docker-compose.gha.yml \
             run vets-api bash \
             -c "CI=true RAILS_ENV=test DISABLE_BOOTSNAP=true rails --version"

      - name: Setup Database and Run Specs
        run: |
          docker-compose run web bash \
          -c "CI=true RAILS_ENV=test DISABLE_BOOTSNAP=true; \
              bundle exec parallel_test -n 8 -e 'bin/rails db:reset' \
              && bundle exec parallel_rspec spec/ modules/ -n 8 -o '--color --tty'"

      - name: Run Specs

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Coverage Report
          path: coverage

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Test Results
          path: log/*.xml
          if-no-files-found: ignore

  publish_results:
    name: Publish Results
    env:
      BUNDLE_ENTERPRISE__CONTRIBSYS__COM: ${{ secrets.BUNDLE_ENTERPRISE__CONTRIBSYS__COM }}
    if: always()
    needs: [linting_and_security, tests]
    runs-on: ubuntu-20.04 # Doesn't run on self-hosted runners as there are SSL issues within the TIC

    steps:
      - uses: actions/checkout@v3

      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - uses: actions/download-artifact@v3

      - uses: duderman/rubocop-annotate-action@v0.1.0
        with:
          path: Linting and Security Results/rubocop.json
        if: hashFiles('Linting and Security Results/rubocop.json') != ''

      - uses: devmasx/brakeman-linter-action@v1.0.0
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          REPORT_PATH: Linting and Security Results/brakeman.json
        if: hashFiles('Linting and Security/brakeman.json') != ''

      - name: Publish Test Results to GitHub
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          check_name: Test Results
          comment_mode: off
          files: Test Results/*.xml
          github_token: ${{ secrets.GITHUB_TOKEN }}
          check_run_annotations_branch: master, k8s

      - name: Fix up coverage report to work with coverage-check-action
        run: sed -i 's/"line"/"covered_percent"/g' 'Coverage Report/.last_run.json'

      - name: Publish Coverage Report
        uses: devmasx/coverage-check-action@v1.2.0
        if: hashFiles('Coverage Report/.last_run.json') != ''
        with:
          type: simplecov
          result_path: Coverage Report/.last_run.json
          min_coverage: 90
          token: ${{ secrets.GITHUB_TOKEN }}
