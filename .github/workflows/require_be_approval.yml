name: Require backend-review-group approval
on:
  pull_request_review:
    types: [submitted]
    branches: master

jobs:
  get-pr-data:
    name: Get PR Data
    permissions: write-all
    runs-on: ubuntu-latest
    env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      pr_draft: ${{ steps.approval_permissions.outputs.pr_draft }}
      pr_branch: ${{ steps.approval_permissions.outputs.pr_branch }}
      pr_number: ${{ steps.approval_permissions.outputs.pr_number }}
      require_be_approval: ${{ steps.approval_permissions.outputs.require_be_approval }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check for 'require-backend-approval' label
        id: approval_permissions
        run: |
          # Pull recent data

          echo "pr_branch=${{ github.head_ref }}" >> $GITHUB_OUTPUT
          echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT

          DATA=$(gh pr view ${{ github.event.pull_request.number }} --json isDraft,labels --jq '{draft: .isDraft, labels: [.labels[].name]}')
          DRAFT=$(echo "$DATA" | jq -r '.draft')
          LABELS=$(echo "$DATA" | jq -r '.labels[]')
          echo "pr_draft='$DRAFT'" >> $GITHUB_OUTPUT
          echo "Labels on PR: $LABELS"

          if ! echo "$LABELS" | grep -q "require-backend-approval"; then
            echo "require_be_approval=false" >> $GITHUB_OUTPUT
            echo "Label 'require-backend-approval' not found. Exiting successfully."
          else
            echo "require_be_approval=true" >> $GITHUB_OUTPUT
            echo "Label 'require-backend-approval' found. Approval required."
          fi

      # Sucessfully exit this workflow if backend approval is not required.
      # This workflow should never fail for non backend approval pull requests
      - name: Exit for non backend approvals
        if: steps.approval_permissions.outputs.require_be_approval == 'false'
        run: exit 0

  # This workflow should fail when backend approval is required and when PR is in draft mode.
  handle-draft-state:
    name: Handle Draft State
    needs: get-pr-data
    if: needs.get-pr-data.outputs.pr_draft == 'true'
    runs-on: ubuntu-latest
    permissions: write-all
    env:
      pr_number: ${{ needs.get-pr-data.outputs.pr_number }}
    steps:
      - name: Remove ready-for-backend-review label
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          number: ${{ env.pr_number }}
          labels: ready-for-backend-review

      - name: Fail if draft
        run: exit 1

  # This workflow should fail when backend approval is required and required workflows are not complete.
  check-workflow-status:
    name: Check Workflow Statuses
    needs: [get-pr-data]
    if: needs.get-pr-data.outputs.pr_draft == 'false' && needs.get-pr-data.outputs.require_be_approval == 'true'
    runs-on: ubuntu-latest
    permissions: write-all
    env:
      pr_number: ${{ needs.get-pr-data.outputs.pr_number }}
      pr_branch: ${{ needs.get-pr-data.outputs.pr_branch }}
    outputs:
      failures_detected: ${{ steps.check_workflow_status.outputs.failures_detected }}
    steps:
      - name: Check if workflows have completed successfully
        id: check_workflow_status
        run: |
          failures=false
          GITHUB_REPOSITORY="department-of-veterans-affairs/vets-api"
          WORKFLOWS=("Code Checks" "Check CODEOWNERS Entries" "Audit Service Tags" "CodeQL")

          for WORKFLOW in "${WORKFLOWS[@]}"; do
            # Check if there's any in-progress run for this workflow

            IN_PROGRESS=$(gh run list \
              --repo "$GITHUB_REPOSITORY" \
              --workflow="$WORKFLOW" \
              --status=in_progress \
              --json headBranch,event \
              -q ".[] | select(.headBranch == \"$pr_branch\" and .event == \"pull_request\")")


            if [ -n "$IN_PROGRESS" ]; then
              echo "$WORKFLOW is still in progress."
              failures=true
            else
              # Check if the latest completed run was successful
              SUCCESSFUL=$(gh run list \
                --repo "$GITHUB_REPOSITORY" \
                --workflow="$WORKFLOW" \
                --status=completed \
                --json headBranch,event,conclusion \
                -q ".[] | select(.headBranch == \"$pr_branch\" and .event == \"pull_request\") | select(.conclusion == \"success\")" | head -n 1)
              if [ -z "$SUCCESSFUL" ]; then
                echo "$WORKFLOW did not complete successfully."
                failures=true
                # break
              else
                echo "$WORKFLOW completed successfully."
              fi
            fi
          done

          echo "failures_detected=$failures" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  exit-on-workflow-failure:
    name: Exit if required workflows have not successfully completed
    needs: [get-pr-data, check-workflow-status]
    if: needs.check-workflow-status.outputs.failures_detected == 'true'
    runs-on: ubuntu-latest
    permissions: write-all
    env:
      pr_number: ${{ needs.get-pr-data.outputs.pr_number }}
    steps:
      - name: Remove ready-for-backend-review label
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          number: ${{ env.pr_number }}
          labels: ready-for-backend-review

      - name: Fail if required workflows are not successful
        run: exit 1

  # Fetch approvals when required workflows are successful.
  check-backend-approvals:
    name: Check Backend Approvals
    needs: [get-pr-data, check-workflow-status]
    if: needs.check-workflow-status.outputs.failures_detected == 'false'
    runs-on: ubuntu-latest
    permissions: write-all
    env:
      pr_number: ${{ needs.get-pr-data.outputs.pr_number }}
    outputs:
      approval_status: ${{ steps.verify_approval.outputs.approval_status }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: "us-gov-west-1"

      - name: Get bot token from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Get backend-review-group members
        id: get_team_members
        uses: octokit/request-action@v2.x
        with:
          route: GET /orgs/department-of-veterans-affairs/teams/backend-review-group/members
        env:
          GITHUB_TOKEN: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}

      - name: Get PR reviews
        id: get_pr_reviews
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/pulls/${{ env.pr_number }}/reviews
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify backend-review-group approval
        id: verify_approval
        run: |
          BACKEND_REVIEWERS=$(cat <<'EOF' | jq -r '.[].login' | tr '\n' '|' | sed 's/|$//'
          ${{ steps.get_team_members.outputs.data }}
          EOF
          )

          APPROVALS=$(cat <<'EOF' | jq -r '.[] | select(.state == "APPROVED") | .user.login' | grep -iE "$BACKEND_REVIEWERS" | wc -l
          ${{ steps.get_pr_reviews.outputs.data }}
          EOF
          )

          echo "Number of backend-review-group approvals: $APPROVALS"
          if [ "$APPROVALS" -eq 0 ]; then
            echo "approval_status=required" >> $GITHUB_OUTPUT
          else
            echo "approval_status=confirmed" >> $GITHUB_OUTPUT
          fi

  succeed-on-be-approval-confirmed:
    name: Succeed if backend approval is confirmed
    needs: [get-pr-data, check-backend-approvals]
    if: needs.check-backend-approvals.outputs.approval_status == 'confirmed'
    runs-on: ubuntu-latest
    permissions: write-all
    env:
      pr_number: ${{ needs.get-pr-data.outputs.pr_number }}
    steps:
      - name: Remove ready-for-review label
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          number: ${{ env.pr_number }}
          labels: ready-for-backend-review

      - name: Succeed if backend approval is confirmed
        run: exit 0

  fail-on-be-approval-required:
    name: Fail if still waiting for backend approval
    needs: [get-pr-data, check-backend-approvals]
    if: needs.check-backend-approvals.outputs.approval_status == 'required'
    runs-on: ubuntu-latest
    permissions: write-all
    env:
      pr_number: ${{ needs.get-pr-data.outputs.pr_number }}
    steps:
      - name: Add ready-for-backend-review label
        uses: actions-ecosystem/action-add-labels@v1
        with:
          number: ${{ env.pr_number }}
          labels: ready-for-backend-review

      - name: Fail if backend approval is required
        run: exit 1
