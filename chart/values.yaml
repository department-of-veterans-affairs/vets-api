parameters:
  - SETTINGS__HOSTNAME
  - SETTINGS__VIRTUAL_HOSTS
  - SETTINGS__VSP_ENVIRONMENT
appName: vets-api
target_env:
domain:
manualRoll:
image:
  value:
  testRepository: 008577686731.dkr.ecr.us-gov-west-1.amazonaws.com/dsva/vets-api-postman
  tag:
  pullPolicy: Always
git_container_repo:
git_container_version:
vsp_environment:
affinityWeight: 100
mockData:
  enabled: false
  branch: master
matchExpressions:
  key: app
  operator: In
topologyKey: kubernetes.io/hostname
annotations:
  ad.datadoghq.com/vets-api-web.checks:
serviceAccount:
  enabled: false
  role_arn:
  name:
fsGroup:
#Web configuration
web:
  strategyType:
  maxSurge:
  maxUnavailable:
    containers:
      ports:
        - containerPort: 3000
          name: web
        - containerPort: 9293
          name: stats
  healthCheck:
    host:
  livenessProbe:
    enabled: false
    port:
    initialDelaySeconds:
    failureThreshold:
    periodSeconds:
    successThreshold:
    requestPath:
  readinessProbe:
    port:
    initialDelaySeconds:
    failureThreshold:
    periodSeconds:
    successThreshold:
    requestPath:
  startupProbe:
    enabled: false
    port:
    initialDelaySeconds:
    failureThreshold:
    periodSeconds:
    successThreshold:
    requestPath:
  socatProxyEnabled: false
  terminationGracePeriodSeconds:
  envSecrets:
    - name: DD_APM_ENABLED
      value: false
  resources:
    requests:
      cpu:
      memory:
    limits:
      cpu:
      memory:
  ssoeEnabled: false
  ssoeConfigs:
  ingress:
    enabled: true
    entryPoints:
    default:
      port:
      kind:
      host:
      priority:
    headers:
      enabled: false
      properties: {}
  webServices: {}
  autoscaling:
    minReplicas:
    maxReplicas:
    targetValue:
    scaleUp:
      stabilizationWindowSeconds:
      pods:
      periodSeconds:
    scaleDown:
      stabilizationWindowSeconds:
      pods:
      periodSeconds:
  service:
    enabled: false
    annotations: {}
    ports:
    type:
  externalDns:
    dnsName:
    recordTTL:
    targets:
  dbMigrate:
    enabled: false
    envSecrets:
      - name: DD_APM_ENABLED
        value: false
#Worker Configuration
worker:
  enabled: false
  strategyType:
  maxSurge:
  maxUnavailable:
  containers:
    command: []
    args: []
  autoscaling:
    enabled: false
    minReplicas:
    maxReplicas:
    targetValue:
  healthCheck:
    requestPath:
    port:
    initialDelaySeconds:
    readinessPath:
    readinessPort:
    timeoutSeconds:
    successThreshold:
    command: []
    liveness:
      failureThreshold:
    readiness:
      failureThreshold:
  terminationGracePeriodSeconds:
  socatProxyEnabled: false
  envSecrets:
    - name: DD_APM_ENABLED
      value: false
  resources:
    requests:
      cpu:
      memory:
# cronJobs configuration
cronJobs: {}

socat:
  readinessProbe:
    failureThreshold: 10
    periodSeconds: 10
    timeoutSeconds: 30
    successThreshold: 2

# clamav configuration
# Clamav is specific for vets-api helm charts. Please do not enable.
# Setting up clamav incorrectly can lead to a PRODUCTION shut down.
clamav:
  enabled: false
  requestedCPU: "100m"
  requestedMemory: "3Gi"
  image:
    tag:
    value:
    pullPolicy: Always
  readinessProbe:
    failureThreshold: 5
    periodSeconds: 5
    timeoutSeconds: 5
    successThreshold: 1
  resources: {}
socatImage:
# Common configuration
common:
  lighthousePreConfigs:
    name:
    data:
  volumeMounts:
  volumes:
  initContainers:
  secrets: {}
  configMaps: {}
    # configMap:
    #   name:
    #   data: {}
    # readinessConfigMap:
    #   name:
    #   data: {}
