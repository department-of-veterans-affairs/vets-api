name: Pull Request Ready for Review
on:
  pull_request:
     types: [opened, reopened, synchronize, ready_for_review, converted_to_draft, review_requested, review_request_removed, labeled, unlabeled]
  workflow_run:
    workflows: ["Code Checks", "Check CODEOWNERS Entries", "Audit Service Tags", "CodeQL"]
    types: [completed]
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true
permissions:
  id-token: write
  contents: read
jobs:
  fetch-pr-reviews:
    name: Fetch Pull Request Reviews
    needs: [get-pr-data, check-workflow-status, check-backend-requirement]
    runs-on: ubuntu-latest
    permissions: write-all
    env:
      backend_approval_required: ${{ needs.check-backend-requirement.outputs.backend_approval_required }}
      failures_detected:  ${{ needs.check-workflow-status.outputs.failures_detected }}
      pr_number: ${{ needs.get-pr-data.outputs.pr_number }}
      pr_branch: ${{ needs.get-pr-data.outputs.pr_branch }}
      pr_draft: ${{ needs.get-pr-data.outputs.pr_draft }}
    outputs:
      author_is_backend: ${{ steps.verify_approval.outputs.author_is_backend }}
      team_approval_status: ${{ steps.verify_approval.outputs.team_approval_status }}
      approval_status: ${{ steps.verify_approval.outputs.approval_status }}
    steps:
      - name: Checkout PR HEAD ref
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ vars.AWS_ASSUME_ROLE }}
          aws-region: "us-gov-west-1"

      - name: Get bot token from Parameter Store
        uses: marvinpinto/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: VA_VSP_BOT_GITHUB_TOKEN

      - name: Verify backend-review-group approval
        id: verify_approval
        run: |
          approval_status=required
          team_approval_status=required
          author_is_backend=false

          BACKEND_REVIEWERS=$(gh api /orgs/department-of-veterans-affairs/teams/backend-review-group/members --jq '.[].login')
          BACKEND_REVIEWERS=$(echo "$BACKEND_REVIEWERS" | tr '\n' '|' | sed 's/|$//')
          echo "Backend reviewers regex: $BACKEND_REVIEWERS"

          # Get PR author
          PR_AUTHOR=$(gh pr view ${{ env.pr_number }} --json author -q '.author.login')
          if echo "$PR_AUTHOR" | grep -qiE "^($BACKEND_REVIEWERS)$"; then
            echo "PR author '$PR_AUTHOR' is a backend-review-group member."
            echo "author_is_backend=true" >> "$GITHUB_OUTPUT"
          fi

          APPROVED=$(gh api /repos/${{ github.repository }}/pulls/${{ env.pr_number }}/reviews --jq '
            [ .[]
            | select(.state == "APPROVED" and (.dismissed_at == null))
            ]
            | sort_by(.submitted_at)
            | reverse
            | unique_by(.user.login)
            | .[].user.login
          ' || true)

          echo "$APPROVED"

          TEAM_APPROVALS=$(echo "$APPROVED" | grep -viE "^($BACKEND_REVIEWERS)$" || true)
          echo "Team Approvals: $TEAM_APPROVALS"
          if [ -z "$TEAM_APPROVALS" ]; then
            echo "TEAM APPROVAL REQUIRED"
            team_approval_status=required
          else
            echo "TEAM APPROVAL CONFIRMED"
            team_approval_status=confirmed
          fi

          BE_APPROVALS=$(echo "$APPROVED" | grep -iE "^($BACKEND_REVIEWERS)$" || true)
          echo "Backend Approvals: $BE_APPROVALS"
          if [ -z "$BE_APPROVALS" ]; then
            echo "BE APPROVAL REQUIRED"
            approval_status=required
          else
            echo "BE APPROVAL CONFIRMED"
            approval_status=confirmed
          fi

          echo "author_is_backend=$author_is_backend" >> "$GITHUB_OUTPUT"
          echo "team_approval_status=$team_approval_status" >> "$GITHUB_OUTPUT"
          echo "approval_status=$approval_status" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ env.VA_VSP_BOT_GITHUB_TOKEN }}

      - name: Remove ready-for-backend-review label
        if: needs.get-pr-data.outputs.pr_draft == 'true' || needs.check-workflow-status.outputs.failures_detected == 'true'
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          number: ${{ needs.get-pr-data.outputs.pr_number }}
          labels: ready-for-backend-review

      - name: Remove ready-for-review label
        if: needs.get-pr-data.outputs.pr_draft == 'true' || needs.check-workflow-status.outputs.failures_detected == 'true'
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          number: ${{ env.pr_number }}
          labels: ready-for-review


      - name: Fail if draft
        if: needs.get-pr-data.outputs.pr_draft == 'true'
        run: exit 1

      # The ready-for-review label will be added when pull request has not been reviewed
      - name: Add ready-for-review label
        if: |
          steps.verify_approval.outputs.approval_status == 'required' ||
          steps.verify_approval.outputs.team_approval_status == 'required'
        uses: actions-ecosystem/action-add-labels@v1
        with:
          number: ${{ env.pr_number }}
          labels: ready-for-review

      # The ready-for-backend-review label will be added when a VFS team member has reviewed the pull request
      # The ready-for-backend-review label will be added for backend-review-group team members
      - name: Add ready-for-backend-review label
        if: |
          needs.check-backend-requirement.outputs.backend_approval_required == 'true' &&
          steps.verify_approval.outputs.approval_status == 'required' &&
          (
            steps.verify_approval.outputs.author_is_backend == 'true' ||
            steps.verify_approval.outputs.team_approval_status == 'confirmed'
          )
        uses: actions-ecosystem/action-add-labels@v1
        with:
          number: ${{ env.pr_number }}
          labels: ready-for-backend-review
