#!/bin/sh
set -e
command_exists () {
    type "$1" &> /dev/null ;
}
postgis_installed () {
    postgis_version=$(psql -c "SELECT installed_version FROM pg_catalog.pg_available_extensions WHERE name='postgis';" | grep 2.*.*)
    [[ ! -z $postgis_version ]]
}
RED=`tput setaf 1`
GREEN=`tput setaf 2`
YELLOW=`tput setaf 3`
RESET=`tput sgr0`

# Check for homebrew
if command_exists brew ; then
  brew update
  echo "${GREEN} * Updated Homebrew.${RESET}"
else
  echo "${RED} * Installing Homebrew.${RESET}"
  cd ~
  mkdir .homebrew
  curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C .homebrew
  echo 'export PATH=~/.homebrew/bin:$PATH' >> ~/.bash_profile
  source ~/.bash_profile
  brew update
  brew analytics off
  cd -
fi

# Check for development deps

if command_exists rbenv ; then
  echo "${GREEN} * rbenv already installed.${RESET}"
else
  echo "${RED} * Installing rbenv.${RESET}"
  brew install rbenv
  echo "eval \"\$(rbenv init -)\"" >> ~/.bash_profile
  source ~/.bash_profile
fi

if command_exists ruby-build ; then
  echo "${GREEN} * Ruby build is already installed.${RESET}"
else
  echo "${RED} * Installing ruby-build${RESET}"
  brew install ruby-build
fi

if rbenv versions | grep $(rbenv local) ; then
  echo "${GREEN} * Ruby $(rbenv local) is installed.${RESET}"
else
  echo "${RED} * Installing Ruby $(rbenv local).${RESET}"
  rbenv install $(rbenv local)
  rbenv rehash
  source ~/.bash_profile
  gem install bundler
fi

if command_exists rbenv-bundler ; then
  echo "${GREEN} * rbenv-bundler is already installed.${RESET}"
else
  echo "${RED} * Installing rbenv-bundler${RESET}"
  brew install rbenv-bundler
  rbenv rehash
fi

source ~/.bash_profile
# Check for application deps

if command_exists redis-server ; then
  echo "${GREEN} * redis already installed.${RESET}"
else
  echo "${RED} * Installing Redis. ${RESET}"
  brew install redis
fi

brew services start redis

if command_exists postgres ; then
  echo "${GREEN} * PostgreSQL already installed.${RESET}"
else
  echo "${RED} * Installing PostgreSQL. ${RESET}"
  brew install postgresql
fi

brew services start postgresql

if postgis_installed ; then
    echo "${GREEN} * postgis already installed.${REST}"
else
    echo "${RED} * Installing postgis. ${RESET}"
    brew install postgis
fi

brew services restart postgresql

if command_exists convert ; then
  echo "${GREEN} * Imagemagick already installed.${RESET}"
else
  echo "${RED} * Installing Imagemagick. ${RESET}"
  brew install imagemagick
fi

if command_exists clamscan ; then
  echo "${GREEN} * ClamAV already installed.${RESET}"
else
  echo "${RED} * Installing ClamAV. ${RESET}"
  brew install clamav
  touch ~/.homebrew/etc/clamav/clamd.sock
  echo "LocalSocket ~/.homebrew/etc/clamav/clamd.sock" > ~/.homebrew/etc/clamav/clamd.conf
  echo "DatabaseMirror database.clamav.net" > ~/.homebrew/etc/clamav/freshclam.conf
fi

freshclam -v

if command_exists pdfinfo ; then
  echo "${GREEN} * pdfinfo already installed.${RESET}"
else
  echo "${RED} * Installing pdfinfo (poppler). ${RESET}"
  brew install poppler
fi

if command_exists pdftk ; then
  echo "${GREEN} * pdftk already installed.${RESET}"
else
  echo "${RED} * Installing pdftk. ${RESET}"
  brew install https://gist.githubusercontent.com/lihanli/03ec8f17a6a1ff52e3a149be4cf7f2ae/raw/d18eff01396bbc25a928f756ff21edcc3521fc5e/pdftk.rb
fi

# Make vetsgov-localhost.crt and .key

CERT_INSTALL_REQUIRED=false
if [ ! -d ~/.certs ]; then
  mkdir ~/.certs
fi

if [ -f ~/.certs/vetsgov-localhost.crt ]; then
  echo "${GREEN} * vetsgov-localhost.crt installed.${RESET}"
else
  echo "${RED} * Installing vetsgov-localhost.crt.${RESET}"
  touch ~/.certs/vetsgov-localhost.crt
  CERT_INSTALL_REQUIRED=true
fi

if [ -f ~/.certs/vetsgov-localhost.key ]; then
  echo "${GREEN} * vetsgov-localhost.key installed.${RESET}"
else
  echo "${RED} * Installing vetsgov-localhost.key.${RESET}"
  touch ~/.certs/vetsgov-localhost.key
  CERT_INSTALL_REQUIRED=true
fi

# Install ruby / vet-api deps

bundle install -j4
rbenv rehash && cd .
bundle exec overcommit --install --sign

rake db:create db:setup db:seed

# Run a test to make sure things are working after setup

rake

# Warn the user that the certs installed are blank and have limited functionality

if [ "$CERT_INSTALL_REQUIRED" = true ]; then
  echo "${YELLOW}Notice: Blank certificate files were installed for limited functionality. If you have access, go to:"
  echo
  echo "  https://github.com/department-of-veterans-affairs/vets.gov-team/tree/master/Products/Identity/Files_From_IDme/development-certificates"
  echo
  echo "and copy the .crt and .key files to ~/.certs/${RESET}"
fi
